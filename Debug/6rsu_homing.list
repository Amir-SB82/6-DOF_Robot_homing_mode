
6rsu_homing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c868  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800ca68  0800ca68  0001ca68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf08  0800cf08  00020280  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf08  0800cf08  0001cf08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf10  0800cf10  00020280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf10  0800cf10  0001cf10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf14  0800cf14  0001cf14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  0800cf18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000280  0800d198  00020280  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  0800d198  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202ae  2**0
                  CONTENTS, READONLY
 13 .debug_info   000225fc  00000000  00000000  000202f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004831  00000000  00000000  000428ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  00047120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001258  00000000  00000000  000483e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c22b  00000000  00000000  00049640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c301  00000000  00000000  0007586b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102b85  00000000  00000000  00091b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000550c  00000000  00000000  001946f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000280 	.word	0x20000280
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ca50 	.word	0x0800ca50

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000284 	.word	0x20000284
 800023c:	0800ca50 	.word	0x0800ca50

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <CO_getUint8>:
 *
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t CO_getUint8(const void *buf) {
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 80005f8:	73fb      	strb	r3, [r7, #15]
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <CO_setUint8>:
 * @param buf Memory buffer.
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t CO_setUint8(void *buf, uint8_t value) {
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
 8000614:	78fa      	ldrb	r2, [r7, #3]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	701a      	strb	r2, [r3, #0]
 800061a:	2301      	movs	r3, #1
}
 800061c:	4618      	mov	r0, r3
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <CO_setUint32>:
/** Write uint16_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint16(void *buf, uint16_t value) {
    memmove(buf, &value, sizeof(value)); return sizeof(value);
}
/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
 8000632:	683a      	ldr	r2, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	2304      	movs	r3, #4
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8000646:	b480      	push	{r7}
 8000648:	b083      	sub	sp, #12
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <OD_getIndex+0x14>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	e000      	b.n	800065c <OD_getIndex+0x16>
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d101      	bne.n	800067c <OD_extension_init+0x14>
 8000678:	2305      	movs	r3, #5
 800067a:	e003      	b.n	8000684 <OD_extension_init+0x1c>
    entry->extension = extension;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000682:	2300      	movs	r3, #0
}
 8000684:	4618      	mov	r0, r3
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <OD_get_u32>:
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af02      	add	r7, sp, #8
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	607a      	str	r2, [r7, #4]
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	460b      	mov	r3, r1
 800069e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80006a0:	7af9      	ldrb	r1, [r7, #11]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2304      	movs	r3, #4
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	f001 fb86 	bl	8001dbc <OD_get_value>
 80006b0:	4603      	mov	r3, r0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <OD_read_1014_default>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1014_default(OD_stream_t *stream, void *buf,
                                  OD_size_t count, OD_size_t *countRead)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b086      	sub	sp, #24
 80006be:	af00      	add	r7, sp, #0
 80006c0:	60f8      	str	r0, [r7, #12]
 80006c2:	60b9      	str	r1, [r7, #8]
 80006c4:	607a      	str	r2, [r7, #4]
 80006c6:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d00c      	beq.n	80006e8 <OD_read_1014_default+0x2e>
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	7c5b      	ldrb	r3, [r3, #17]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d108      	bne.n	80006e8 <OD_read_1014_default+0x2e>
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d005      	beq.n	80006e8 <OD_read_1014_default+0x2e>
        || count < sizeof(uint32_t) || countRead == NULL
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d902      	bls.n	80006e8 <OD_read_1014_default+0x2e>
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d101      	bne.n	80006ec <OD_read_1014_default+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80006e8:	2309      	movs	r3, #9
 80006ea:	e01b      	b.n	8000724 <OD_read_1014_default+0x6a>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0 : 0x80000000;
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <OD_read_1014_default+0x44>
 80006fa:	2300      	movs	r3, #0
 80006fc:	e001      	b.n	8000702 <OD_read_1014_default+0x48>
 80006fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000702:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + em->nodeId;
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800070a:	3380      	adds	r3, #128	; 0x80
 800070c:	461a      	mov	r2, r3
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	4313      	orrs	r3, r2
 8000712:	613b      	str	r3, [r7, #16]
    CO_setUint32(buf, COB_IDEmergency32);
 8000714:	6939      	ldr	r1, [r7, #16]
 8000716:	68b8      	ldr	r0, [r7, #8]
 8000718:	f7ff ff86 	bl	8000628 <CO_setUint32>

    *countRead = sizeof(uint32_t);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	2204      	movs	r2, #4
 8000720:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8000722:	2300      	movs	r3, #0
}
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <OD_read_1003>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1003(OD_stream_t *stream, void *buf,
                          OD_size_t count, OD_size_t *countRead)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
 8000738:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d00f      	beq.n	8000760 <OD_read_1003+0x34>
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d00c      	beq.n	8000760 <OD_read_1003+0x34>
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d009      	beq.n	8000760 <OD_read_1003+0x34>
        || (count < 4 && stream->subIndex > 0) || count < 1
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b03      	cmp	r3, #3
 8000750:	d803      	bhi.n	800075a <OD_read_1003+0x2e>
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	7c5b      	ldrb	r3, [r3, #17]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d102      	bne.n	8000760 <OD_read_1003+0x34>
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d101      	bne.n	8000764 <OD_read_1003+0x38>
    ) {
        return ODR_DEV_INCOMPAT;
 8000760:	2309      	movs	r3, #9
 8000762:	e04d      	b.n	8000800 <OD_read_1003+0xd4>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2) {
 800076a:	693b      	ldr	r3, [r7, #16]
 800076c:	7f1b      	ldrb	r3, [r3, #28]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d801      	bhi.n	8000776 <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 8000772:	2309      	movs	r3, #9
 8000774:	e044      	b.n	8000800 <OD_read_1003+0xd4>
    }
    if (stream->subIndex == 0) {
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	7c5b      	ldrb	r3, [r3, #17]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d10b      	bne.n	8000796 <OD_read_1003+0x6a>
        CO_setUint8(buf, em->fifoCount);
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000784:	4619      	mov	r1, r3
 8000786:	68b8      	ldr	r0, [r7, #8]
 8000788:	f7ff ff3e 	bl	8000608 <CO_setUint8>

        *countRead = sizeof(uint8_t);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	2201      	movs	r2, #1
 8000790:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8000792:	2300      	movs	r3, #0
 8000794:	e034      	b.n	8000800 <OD_read_1003+0xd4>
    }
    else if (stream->subIndex <= em->fifoCount) {
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	7c5a      	ldrb	r2, [r3, #17]
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d82c      	bhi.n	80007fe <OD_read_1003+0xd2>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - stream->subIndex;
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	7f5b      	ldrb	r3, [r3, #29]
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	7c5b      	ldrb	r3, [r3, #17]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 80007b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	da07      	bge.n	80007ce <OD_read_1003+0xa2>
            index += em->fifoSize;
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	7f1b      	ldrb	r3, [r3, #28]
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	8afb      	ldrh	r3, [r7, #22]
 80007c6:	4413      	add	r3, r2
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	82fb      	strh	r3, [r7, #22]
 80007cc:	e007      	b.n	80007de <OD_read_1003+0xb2>
        }
        else if (index >= (em->fifoSize)) {
 80007ce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007d2:	693a      	ldr	r2, [r7, #16]
 80007d4:	7f12      	ldrb	r2, [r2, #28]
 80007d6:	4293      	cmp	r3, r2
 80007d8:	db01      	blt.n	80007de <OD_read_1003+0xb2>
            return ODR_DEV_INCOMPAT;
 80007da:	2309      	movs	r3, #9
 80007dc:	e010      	b.n	8000800 <OD_read_1003+0xd4>
        }
        CO_setUint32(buf, em->fifo[index].msg);
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	699a      	ldr	r2, [r3, #24]
 80007e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	4413      	add	r3, r2
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	68b8      	ldr	r0, [r7, #8]
 80007f0:	f7ff ff1a 	bl	8000628 <CO_setUint32>

        *countRead = sizeof(uint32_t);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	2204      	movs	r2, #4
 80007f8:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 80007fa:	2300      	movs	r3, #0
 80007fc:	e000      	b.n	8000800 <OD_read_1003+0xd4>
    }
    else {
        return ODR_NO_DATA;
 80007fe:	2319      	movs	r3, #25
    }
}
 8000800:	4618      	mov	r0, r3
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <OD_write_1003>:

static ODR_t OD_write_1003(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL || count != 1
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d00c      	beq.n	8000836 <OD_write_1003+0x2e>
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	7c5b      	ldrb	r3, [r3, #17]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d108      	bne.n	8000836 <OD_write_1003+0x2e>
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d005      	beq.n	8000836 <OD_write_1003+0x2e>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d102      	bne.n	8000836 <OD_write_1003+0x2e>
        || countWritten == NULL)
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d101      	bne.n	800083a <OD_write_1003+0x32>
    {
        return ODR_DEV_INCOMPAT;
 8000836:	2309      	movs	r3, #9
 8000838:	e012      	b.n	8000860 <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0) {
 800083a:	68b8      	ldr	r0, [r7, #8]
 800083c:	f7ff fed6 	bl	80005ec <CO_getUint8>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 8000846:	230f      	movs	r3, #15
 8000848:	e00a      	b.n	8000860 <OD_write_1003+0x58>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	2200      	movs	r2, #0
 8000854:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 800085e:	2300      	movs	r3, #0
}
 8000860:	4618      	mov	r0, r3
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <CO_EM_init>:
                            CO_CANmodule_t *CANdevRx,
                            uint16_t CANdevRxIdx,
#endif
                            const uint8_t nodeId,
                            uint32_t *errInfo)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af02      	add	r7, sp, #8
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
 8000874:	603b      	str	r3, [r7, #0]
    (void) nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 8000876:	2300      	movs	r3, #0
 8000878:	75fb      	strb	r3, [r7, #23]
    ODR_t odRet;

    /* verify arguments */
    if (em == NULL || OD_1001_errReg == NULL
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d01a      	beq.n	80008b6 <CO_EM_init+0x4e>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d017      	beq.n	80008b6 <CO_EM_init+0x4e>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
        || (fifo == NULL && fifoSize >= 2)
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d103      	bne.n	8000894 <CO_EM_init+0x2c>
 800088c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d810      	bhi.n	80008b6 <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
        || OD_1014_cobIdEm == NULL || CANdevTx == NULL
 8000894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000896:	2b00      	cmp	r3, #0
 8000898:	d00d      	beq.n	80008b6 <CO_EM_init+0x4e>
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d00a      	beq.n	80008b6 <CO_EM_init+0x4e>
        || nodeId < 1 || nodeId > 127
 80008a0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d006      	beq.n	80008b6 <CO_EM_init+0x4e>
 80008a8:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	db02      	blt.n	80008b6 <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
       || OD_1003_preDefErr == NULL
 80008b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d102      	bne.n	80008bc <CO_EM_init+0x54>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
       || CANdevRx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	e0a7      	b.n	8000a0c <CO_EM_init+0x1a4>
    }

    /* clear the object */
    memset(em, 0, sizeof(CO_EM_t));
 80008bc:	2250      	movs	r2, #80	; 0x50
 80008be:	2100      	movs	r1, #0
 80008c0:	68f8      	ldr	r0, [r7, #12]
 80008c2:	f00b fc89 	bl	800c1d8 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	68ba      	ldr	r2, [r7, #8]
 80008ca:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 80008cc:	2300      	movs	r3, #0
 80008ce:	2201      	movs	r2, #1
 80008d0:	2100      	movs	r1, #0
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f001 fad9 	bl	8001e8a <OD_getPtr>
 80008d8:	4602      	mov	r2, r0
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d10c      	bne.n	8000900 <CO_EM_init+0x98>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1001_errReg);
 80008e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d006      	beq.n	80008fa <CO_EM_init+0x92>
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff feaa 	bl	8000646 <OD_getIndex>
 80008f2:	4603      	mov	r3, r0
 80008f4:	461a      	mov	r2, r3
 80008f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008f8:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80008fa:	f06f 030b 	mvn.w	r3, #11
 80008fe:	e085      	b.n	8000a0c <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    em->fifo = fifo;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	683a      	ldr	r2, [r7, #0]
 800090c:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000914:	771a      	strb	r2, [r3, #28]
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 8000916:	f107 0210 	add.w	r2, r7, #16
 800091a:	2301      	movs	r3, #1
 800091c:	2100      	movs	r1, #0
 800091e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000920:	f7ff feb6 	bl	8000690 <OD_get_u32>
 8000924:	4603      	mov	r3, r0
 8000926:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK || (COB_IDEmergency32 & 0x7FFFF800) != 0) {
 8000928:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d104      	bne.n	800093a <CO_EM_init+0xd2>
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	4b38      	ldr	r3, [pc, #224]	; (8000a14 <CO_EM_init+0x1ac>)
 8000934:	4013      	ands	r3, r2
 8000936:	2b00      	cmp	r3, #0
 8000938:	d010      	beq.n	800095c <CO_EM_init+0xf4>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 800093a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800093c:	2b00      	cmp	r3, #0
 800093e:	d006      	beq.n	800094e <CO_EM_init+0xe6>
 8000940:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000942:	f7ff fe80 	bl	8000646 <OD_getIndex>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800094c:	601a      	str	r2, [r3, #0]
         /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK)
 800094e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d002      	beq.n	800095c <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 8000956:	f06f 030b 	mvn.w	r3, #11
 800095a:	e057      	b.n	8000a0c <CO_EM_init+0x1a4>
    /* if default producerCanId is used, then value of CO_CAN_ID_EMERGENCY
     * (0x80) is stored into non-volatile memory. In that case it is necessary
     * to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) producerCanId += nodeId;
 #else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + nodeId;
 800095c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000960:	b29b      	uxth	r3, r3
 8000962:	3380      	adds	r3, #128	; 0x80
 8000964:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000) == 0;
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	43db      	mvns	r3, r3
 800096a:	0fdb      	lsrs	r3, r3, #31
 800096c:	b2db      	uxtb	r3, r3
 800096e:	461a      	mov	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	625a      	str	r2, [r3, #36]	; 0x24

    em->OD_1014_extension.object = em;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	631a      	str	r2, [r3, #48]	; 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4a26      	ldr	r2, [pc, #152]	; (8000a18 <CO_EM_init+0x1b0>)
 800097e:	635a      	str	r2, [r3, #52]	; 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	4a26      	ldr	r2, [pc, #152]	; (8000a1c <CO_EM_init+0x1b4>)
 8000984:	639a      	str	r2, [r3, #56]	; 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	3330      	adds	r3, #48	; 0x30
 800098a:	4619      	mov	r1, r3
 800098c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800098e:	f7ff fe6b 	bl	8000668 <OD_extension_init>
 8000992:	4603      	mov	r3, r0
 8000994:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8000996:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d00c      	beq.n	80009b8 <CO_EM_init+0x150>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 800099e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d006      	beq.n	80009b2 <CO_EM_init+0x14a>
 80009a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009a6:	f7ff fe4e 	bl	8000646 <OD_getIndex>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009b0:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80009b2:	f06f 030b 	mvn.w	r3, #11
 80009b6:	e029      	b.n	8000a0c <CO_EM_init+0x1a4>
    }
 #endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80009be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    em->CANtxBuff = CO_CANtxBufferInit(
 80009c2:	8aba      	ldrh	r2, [r7, #20]
 80009c4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80009c6:	2300      	movs	r3, #0
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	2308      	movs	r3, #8
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2300      	movs	r3, #0
 80009d0:	68b8      	ldr	r0, [r7, #8]
 80009d2:	f007 fbcb 	bl	800816c <CO_CANtxBufferInit>
 80009d6:	4602      	mov	r2, r0
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
            producerCanId,      /* CAN identifier */
            0,                  /* rtr */
            8U,                 /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (em->CANtxBuff == NULL) {
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80009e4:	f04f 33ff 	mov.w	r3, #4294967295
 80009e8:	e010      	b.n	8000a0c <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */


#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	641a      	str	r2, [r3, #64]	; 0x40
    em->OD_1003_extension.read = OD_read_1003;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <CO_EM_init+0x1b8>)
 80009f4:	645a      	str	r2, [r3, #68]	; 0x44
    em->OD_1003_extension.write = OD_write_1003;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <CO_EM_init+0x1bc>)
 80009fa:	649a      	str	r2, [r3, #72]	; 0x48
    OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3340      	adds	r3, #64	; 0x40
 8000a00:	4619      	mov	r1, r3
 8000a02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000a04:	f7ff fe30 	bl	8000668 <OD_extension_init>
        0,                      /* rtr */
        (void*)em,              /* object passed to receive function */
        CO_EM_receive);         /* this function will process received message*/
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 8000a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	7ffff800 	.word	0x7ffff800
 8000a18:	080006bb 	.word	0x080006bb
 8000a1c:	080019f1 	.word	0x080019f1
 8000a20:	0800072d 	.word	0x0800072d
 8000a24:	08000809 	.word	0x08000809

08000a28 <CO_EM_process>:
/******************************************************************************/
void CO_EM_process(CO_EM_t *em,
                   bool_t NMTisPreOrOperational,
                   uint32_t timeDifference_us,
                   uint32_t *timerNext_us)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
 8000a34:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	8a5b      	ldrh	r3, [r3, #18]
 8000a3c:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	8a1b      	ldrh	r3, [r3, #16]
 8000a42:	8aba      	ldrh	r2, [r7, #20]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	f000 80a2 	beq.w	8000b8e <CO_EM_process+0x166>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	8a1a      	ldrh	r2, [r3, #16]
 8000a4e:	8abb      	ldrh	r3, [r7, #20]
 8000a50:	4053      	eors	r3, r2
 8000a52:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	8aba      	ldrh	r2, [r7, #20]
 8000a58:	821a      	strh	r2, [r3, #16]

        if (CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING))
 8000a5a:	8a7a      	ldrh	r2, [r7, #18]
 8000a5c:	f240 1301 	movw	r3, #257	; 0x101
 8000a60:	4013      	ands	r3, r2
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d010      	beq.n	8000a88 <CO_EM_process+0x60>
            CO_error(em,
                (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0,
 8000a66:	8aba      	ldrh	r2, [r7, #20]
 8000a68:	f240 1301 	movw	r3, #257	; 0x101
 8000a6c:	4013      	ands	r3, r2
            CO_error(em,
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	bf14      	ite	ne
 8000a72:	2301      	movne	r3, #1
 8000a74:	2300      	moveq	r3, #0
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	4619      	mov	r1, r3
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	2300      	movs	r3, #0
 8000a80:	2201      	movs	r2, #1
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f000 f91a 	bl	8000cbc <CO_error>
                CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PASSIVE)
 8000a88:	8a7b      	ldrh	r3, [r7, #18]
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d010      	beq.n	8000ab4 <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0,
 8000a92:	8abb      	ldrh	r3, [r7, #20]
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	bf14      	ite	ne
 8000a9c:	2301      	movne	r3, #1
 8000a9e:	2300      	moveq	r3, #0
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	f248 1320 	movw	r3, #33056	; 0x8120
 8000aac:	2207      	movs	r2, #7
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f000 f904 	bl	8000cbc <CO_error>
                     CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_BUS_OFF)
 8000ab4:	8a7b      	ldrh	r3, [r7, #18]
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d010      	beq.n	8000ae0 <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0,
 8000abe:	8abb      	ldrh	r3, [r7, #20]
 8000ac0:	f003 0304 	and.w	r3, r3, #4
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	bf14      	ite	ne
 8000ac8:	2301      	movne	r3, #1
 8000aca:	2300      	moveq	r3, #0
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	4619      	mov	r1, r3
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	f248 1340 	movw	r3, #33088	; 0x8140
 8000ad8:	2212      	movs	r2, #18
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f000 f8ee 	bl	8000cbc <CO_error>
                     CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_OVERFLOW)
 8000ae0:	8a7b      	ldrh	r3, [r7, #18]
 8000ae2:	f003 0308 	and.w	r3, r3, #8
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d010      	beq.n	8000b0c <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0,
 8000aea:	8abb      	ldrh	r3, [r7, #20]
 8000aec:	f003 0308 	and.w	r3, r3, #8
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	bf14      	ite	ne
 8000af4:	2301      	movne	r3, #1
 8000af6:	2300      	moveq	r3, #0
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	4619      	mov	r1, r3
 8000afc:	2300      	movs	r3, #0
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	f248 1310 	movw	r3, #33040	; 0x8110
 8000b04:	2214      	movs	r2, #20
 8000b06:	68f8      	ldr	r0, [r7, #12]
 8000b08:	f000 f8d8 	bl	8000cbc <CO_error>
                     CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PDO_LATE)
 8000b0c:	8a7b      	ldrh	r3, [r7, #18]
 8000b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d010      	beq.n	8000b38 <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0,
 8000b16:	8abb      	ldrh	r3, [r7, #20]
 8000b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	bf14      	ite	ne
 8000b20:	2301      	movne	r3, #1
 8000b22:	2300      	moveq	r3, #0
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	4619      	mov	r1, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000b30:	2215      	movs	r2, #21
 8000b32:	68f8      	ldr	r0, [r7, #12]
 8000b34:	f000 f8c2 	bl	8000cbc <CO_error>
                     CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_PASSIVE)
 8000b38:	8a7b      	ldrh	r3, [r7, #18]
 8000b3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d010      	beq.n	8000b64 <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0,
 8000b42:	8abb      	ldrh	r3, [r7, #20]
 8000b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bf14      	ite	ne
 8000b4c:	2301      	movne	r3, #1
 8000b4e:	2300      	moveq	r3, #0
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	4619      	mov	r1, r3
 8000b54:	2300      	movs	r3, #0
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	f248 1320 	movw	r3, #33056	; 0x8120
 8000b5c:	2206      	movs	r2, #6
 8000b5e:	68f8      	ldr	r0, [r7, #12]
 8000b60:	f000 f8ac 	bl	8000cbc <CO_error>
                     CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_OVERFLOW)
 8000b64:	8a7b      	ldrh	r3, [r7, #18]
 8000b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d00f      	beq.n	8000b8e <CO_EM_process+0x166>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0,
 8000b6e:	8abb      	ldrh	r3, [r7, #20]
 8000b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	bf14      	ite	ne
 8000b78:	2301      	movne	r3, #1
 8000b7a:	2300      	moveq	r3, #0
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4619      	mov	r1, r3
 8000b80:	2300      	movs	r3, #0
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	2313      	movs	r3, #19
 8000b86:	2213      	movs	r2, #19
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f000 f897 	bl	8000cbc <CO_error>
                     CO_EM_CAN_RXB_OVERFLOW, CO_EM_CAN_RXB_OVERFLOW, 0);
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	795b      	ldrb	r3, [r3, #5]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d003      	beq.n	8000ba2 <CO_EM_process+0x17a>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 8000b9a:	7dfb      	ldrb	r3, [r7, #23]
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	75fb      	strb	r3, [r7, #23]
#endif
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE)
        errorRegister |= CO_ERR_REG_TEMPERATURE;
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	789b      	ldrb	r3, [r3, #2]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d103      	bne.n	8000bb2 <CO_EM_process+0x18a>
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	78db      	ldrb	r3, [r3, #3]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <CO_EM_process+0x192>
        errorRegister |= CO_ERR_REG_COMMUNICATION;
 8000bb2:	7dfb      	ldrb	r3, [r7, #23]
 8000bb4:	f043 0310 	orr.w	r3, r3, #16
 8000bb8:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE)
        errorRegister |= CO_ERR_REG_DEV_PROFILE;
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	7a1b      	ldrb	r3, [r3, #8]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d103      	bne.n	8000bca <CO_EM_process+0x1a2>
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	7a5b      	ldrb	r3, [r3, #9]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d003      	beq.n	8000bd2 <CO_EM_process+0x1aa>
        errorRegister |= CO_ERR_REG_MANUFACTURER;
 8000bca:	7dfb      	ldrb	r3, [r7, #23]
 8000bcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bd0:	75fb      	strb	r3, [r7, #23]
    *em->errorRegister = errorRegister;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	7dfa      	ldrb	r2, [r7, #23]
 8000bd8:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d067      	beq.n	8000cb0 <CO_EM_process+0x288>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    if (em->fifoSize >= 2) {
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	7f1b      	ldrb	r3, [r3, #28]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d965      	bls.n	8000cb4 <CO_EM_process+0x28c>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	7f9b      	ldrb	r3, [r3, #30]
 8000bec:	747b      	strb	r3, [r7, #17]
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull
            && em->inhibitEmTimer >= em->inhibitEmTime_us
        ) {
            em->inhibitEmTimer = 0;
 #else
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull) {
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	7f5b      	ldrb	r3, [r3, #29]
 8000bf2:	7c7a      	ldrb	r2, [r7, #17]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d05d      	beq.n	8000cb4 <CO_EM_process+0x28c>
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d158      	bne.n	8000cb4 <CO_EM_process+0x28c>
 #endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t) errorRegister << 16;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	699a      	ldr	r2, [r3, #24]
 8000c06:	7c7b      	ldrb	r3, [r7, #17]
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	4413      	add	r3, r2
 8000c0c:	6819      	ldr	r1, [r3, #0]
 8000c0e:	7dfb      	ldrb	r3, [r7, #23]
 8000c10:	041a      	lsls	r2, r3, #16
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	6998      	ldr	r0, [r3, #24]
 8000c16:	7c7b      	ldrb	r3, [r7, #17]
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	4403      	add	r3, r0
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            memcpy(em->CANtxBuff->data, &em->fifo[fifoPpPtr].msg,
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c24:	1d58      	adds	r0, r3, #5
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	699a      	ldr	r2, [r3, #24]
 8000c2a:	7c7b      	ldrb	r3, [r7, #17]
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	4413      	add	r3, r2
 8000c30:	2208      	movs	r2, #8
 8000c32:	4619      	mov	r1, r3
 8000c34:	f00b fb5a 	bl	800c2ec <memcpy>
                sizeof(em->CANtxBuff->data));
            CO_CANsend(em->CANdevTx, em->CANtxBuff);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	695a      	ldr	r2, [r3, #20]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c40:	4619      	mov	r1, r3
 8000c42:	4610      	mov	r0, r2
 8000c44:	f007 fb0c 	bl	8008260 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
 #endif

            /* increment pointer */
            em->fifoPpPtr = (++fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0;
 8000c48:	7c7b      	ldrb	r3, [r7, #17]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	747b      	strb	r3, [r7, #17]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	7f1b      	ldrb	r3, [r3, #28]
 8000c52:	7c7a      	ldrb	r2, [r7, #17]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d201      	bcs.n	8000c5c <CO_EM_process+0x234>
 8000c58:	7c7a      	ldrb	r2, [r7, #17]
 8000c5a:	e000      	b.n	8000c5e <CO_EM_process+0x236>
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all
             * messages from fifo buffer are processed */
            if (em->fifoOverflow == 1) {
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	7fdb      	ldrb	r3, [r3, #31]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d10c      	bne.n	8000c84 <CO_EM_process+0x25c>
                em->fifoOverflow = 2;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL,
 8000c70:	2300      	movs	r3, #0
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c78:	2220      	movs	r2, #32
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	68f8      	ldr	r0, [r7, #12]
 8000c7e:	f000 f81d 	bl	8000cbc <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 8000c82:	e017      	b.n	8000cb4 <CO_EM_process+0x28c>
            else if (em->fifoOverflow == 2 && em->fifoPpPtr == em->fifoWrPtr) {
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	7fdb      	ldrb	r3, [r3, #31]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d113      	bne.n	8000cb4 <CO_EM_process+0x28c>
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	7f9a      	ldrb	r2, [r3, #30]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	7f5b      	ldrb	r3, [r3, #29]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d10d      	bne.n	8000cb4 <CO_EM_process+0x28c>
                em->fifoOverflow = 0;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	2220      	movs	r2, #32
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f000 f807 	bl	8000cbc <CO_error>
    return;
 8000cae:	e001      	b.n	8000cb4 <CO_EM_process+0x28c>
        return;
 8000cb0:	bf00      	nop
 8000cb2:	e000      	b.n	8000cb6 <CO_EM_process+0x28e>
    return;
 8000cb4:	bf00      	nop
}
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <CO_error>:


/******************************************************************************/
void CO_error(CO_EM_t *em, bool_t setError, const uint8_t errorBit,
              uint16_t errorCode, uint32_t infoCode)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b08d      	sub	sp, #52	; 0x34
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	461a      	mov	r2, r3
 8000cca:	460b      	mov	r3, r1
 8000ccc:	71fb      	strb	r3, [r7, #7]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) return;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f000 80a6 	beq.w	8000e26 <CO_error+0x16a>

    uint8_t index = errorBit >> 3;
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 0307 	and.w	r3, r3, #7
 8000ce8:	2201      	movs	r2, #1
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)) {
 8000cf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cf6:	2b09      	cmp	r3, #9
 8000cf8:	d90a      	bls.n	8000d10 <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8000cfa:	2305      	movs	r3, #5
 8000cfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        bitmask = 1 << (CO_EM_WRONG_ERROR_REPORT & 0x7);
 8000d00:	2301      	movs	r3, #1
 8000d02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8000d06:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8000d0a:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    uint8_t *errorStatusBits = &em->errorStatusBits[index];
 8000d10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d14:	68fa      	ldr	r2, [r7, #12]
 8000d16:	4413      	add	r3, r2
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8000d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1c:	781a      	ldrb	r2, [r3, #0]
 8000d1e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d22:	4013      	ands	r3, r2
 8000d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d004      	beq.n	8000d38 <CO_error+0x7c>
        if (errorStatusBitMasked != 0) {
 8000d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d006      	beq.n	8000d44 <CO_error+0x88>
            return;
 8000d36:	e079      	b.n	8000e2c <CO_error+0x170>
        }
    }
    else {
        if (errorStatusBitMasked == 0) {
 8000d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d074      	beq.n	8000e2a <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 8000d40:	2300      	movs	r3, #0
 8000d42:	80bb      	strh	r3, [r7, #4]
    }

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    /* prepare emergency message. Error register will be added in post-process*/
    uint32_t errMsg = (uint32_t)errorBit << 24 | CO_SWAP_16(errorCode);
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	061a      	lsls	r2, r3, #24
 8000d48:	88bb      	ldrh	r3, [r7, #4]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	623b      	str	r3, [r7, #32]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 8000d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d50:	61fb      	str	r3, [r7, #28]
 #endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d56:	f3ef 8210 	mrs	r2, PRIMASK
 8000d5a:	617a      	str	r2, [r7, #20]
  return(result);
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8000d60:	b672      	cpsid	i
}
 8000d62:	bf00      	nop
    if (setError) *errorStatusBits |= bitmask;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d008      	beq.n	8000d7c <CO_error+0xc0>
 8000d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d72:	4313      	orrs	r3, r2
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d78:	701a      	strb	r2, [r3, #0]
 8000d7a:	e00b      	b.n	8000d94 <CO_error+0xd8>
    else          *errorStatusBits &= ~bitmask;
 8000d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b25a      	sxtb	r2, r3
 8000d82:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000d86:	43db      	mvns	r3, r3
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	b25b      	sxtb	r3, r3
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d92:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    if (em->fifoSize >= 2) {
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	7f1b      	ldrb	r3, [r3, #28]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d93c      	bls.n	8000e16 <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	7f5b      	ldrb	r3, [r3, #29]
 8000da0:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1;
 8000da2:	7efb      	ldrb	r3, [r7, #27]
 8000da4:	3301      	adds	r3, #1
 8000da6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	7f1b      	ldrb	r3, [r3, #28]
 8000dae:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d302      	bcc.n	8000dbc <CO_error+0x100>
            fifoWrPtrNext = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	7f9b      	ldrb	r3, [r3, #30]
 8000dc0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d103      	bne.n	8000dd0 <CO_error+0x114>
            em->fifoOverflow = 1;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	77da      	strb	r2, [r3, #31]
 8000dce:	e022      	b.n	8000e16 <CO_error+0x15a>
        }
        else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	699a      	ldr	r2, [r3, #24]
 8000dd4:	7efb      	ldrb	r3, [r7, #27]
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	4413      	add	r3, r2
 8000dda:	6a3a      	ldr	r2, [r7, #32]
 8000ddc:	601a      	str	r2, [r3, #0]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	699a      	ldr	r2, [r3, #24]
 8000de2:	7efb      	ldrb	r3, [r7, #27]
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	4413      	add	r3, r2
 8000de8:	69fa      	ldr	r2, [r7, #28]
 8000dea:	605a      	str	r2, [r3, #4]
 #endif
            em->fifoWrPtr = fifoWrPtrNext;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000df2:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1)) em->fifoCount++;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	7f1b      	ldrb	r3, [r3, #28]
 8000e00:	3b01      	subs	r3, #1
 8000e02:	429a      	cmp	r2, r3
 8000e04:	da07      	bge.n	8000e16 <CO_error+0x15a>
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	f383 8810 	msr	PRIMASK, r3
}
 8000e24:	e002      	b.n	8000e2c <CO_error+0x170>
    if (em == NULL) return;
 8000e26:	bf00      	nop
 8000e28:	e000      	b.n	8000e2c <CO_error+0x170>
            return;
 8000e2a:	bf00      	nop
    if (em->pFunctSignalPre != NULL && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
 #endif
#endif
}
 8000e2c:	3734      	adds	r7, #52	; 0x34
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8000e36:	b480      	push	{r7}
 8000e38:	b085      	sub	sp, #20
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d002      	beq.n	8000e66 <OD_getIndex+0x14>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	e000      	b.n	8000e68 <OD_getIndex+0x16>
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <OD_extension_init>:
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d101      	bne.n	8000e88 <OD_extension_init+0x14>
 8000e84:	2305      	movs	r3, #5
 8000e86:	e003      	b.n	8000e90 <OD_extension_init+0x1c>
    entry->extension = extension;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <OD_get_u32>:
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af02      	add	r7, sp, #8
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	607a      	str	r2, [r7, #4]
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000eac:	7af9      	ldrb	r1, [r7, #11]
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f000 ff80 	bl	8001dbc <OD_get_value>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, void *msg) {
 8000ec6:	b480      	push	{r7}
 8000ec8:	b087      	sub	sp, #28
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode = object;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	791b      	ldrb	r3, [r3, #4]
 8000ed8:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	3305      	adds	r3, #5
 8000ede:	60fb      	str	r3, [r7, #12]

    if (DLC == 1) {
 8000ee0:	7cfb      	ldrb	r3, [r7, #19]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d107      	bne.n	8000ef6 <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	b25a      	sxtb	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8000ef6:	bf00      	nop
 8000ef8:	371c      	adds	r7, #28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <OD_write_1016>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1016(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b088      	sub	sp, #32
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	60f8      	str	r0, [r7, #12]
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t *HBcons = stream->object;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	61fb      	str	r3, [r7, #28]

    if (stream == NULL || buf == NULL
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d012      	beq.n	8000f42 <OD_write_1016+0x40>
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00f      	beq.n	8000f42 <OD_write_1016+0x40>
        || stream->subIndex < 1
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	7c5b      	ldrb	r3, [r3, #17]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00b      	beq.n	8000f42 <OD_write_1016+0x40>
        || stream->subIndex > HBcons->numberOfMonitoredNodes
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	7c5a      	ldrb	r2, [r3, #17]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	7a1b      	ldrb	r3, [r3, #8]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d805      	bhi.n	8000f42 <OD_write_1016+0x40>
        || count != sizeof(uint32_t) || countWritten == NULL
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b04      	cmp	r3, #4
 8000f3a:	d102      	bne.n	8000f42 <OD_write_1016+0x40>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <OD_write_1016+0x44>
    ) {
        return ODR_DEV_INCOMPAT;
 8000f42:	2309      	movs	r3, #9
 8000f44:	e020      	b.n	8000f88 <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 8000f46:	68b8      	ldr	r0, [r7, #8]
 8000f48:	f7ff ff75 	bl	8000e36 <CO_getUint32>
 8000f4c:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (val >> 16) & 0xFF;
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	0c1b      	lsrs	r3, r3, #16
 8000f52:	75fb      	strb	r3, [r7, #23]
    uint16_t time = val & 0xFFFF;
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1,
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	7c5b      	ldrb	r3, [r3, #17]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	b2d9      	uxtb	r1, r3
 8000f60:	8abb      	ldrh	r3, [r7, #20]
 8000f62:	7dfa      	ldrb	r2, [r7, #23]
 8000f64:	69f8      	ldr	r0, [r7, #28]
 8000f66:	f000 f8bf 	bl	80010e8 <CO_HBconsumer_initEntry>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	74fb      	strb	r3, [r7, #19]
                                                   nodeId, time);
    if (ret != CO_ERROR_NO) {
 8000f6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 8000f76:	2308      	movs	r3, #8
 8000f78:	e006      	b.n	8000f88 <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f000 fd35 	bl	80019f0 <OD_writeOriginal>
 8000f86:	4603      	mov	r3, r0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3720      	adds	r7, #32
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <CO_HBconsumer_init>:
                                    uint8_t monitoredNodesCount,
                                    OD_entry_t *OD_1016_HBcons,
                                    CO_CANmodule_t *CANdevRx,
                                    uint16_t CANdevRxIdxStart,
                                    uint32_t *errInfo)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if (HBcons == NULL || em == NULL || monitoredNodes == NULL
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00b      	beq.n	8000fbc <CO_HBconsumer_init+0x2c>
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d008      	beq.n	8000fbc <CO_HBconsumer_init+0x2c>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d005      	beq.n	8000fbc <CO_HBconsumer_init+0x2c>
        || OD_1016_HBcons == NULL || CANdevRx == NULL
 8000fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d002      	beq.n	8000fbc <CO_HBconsumer_init+0x2c>
 8000fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <CO_HBconsumer_init+0x32>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc0:	e08a      	b.n	80010d8 <CO_HBconsumer_init+0x148>
    }

    /* Configure object variables */
    memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8000fc2:	2230      	movs	r2, #48	; 0x30
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f00b f906 	bl	800c1d8 <memset>
    HBcons->em = em;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fdc:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000fe2:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes =
        OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
 8000fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe6:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8000fe8:	78fa      	ldrb	r2, [r7, #3]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d304      	bcc.n	8000ff8 <CO_HBconsumer_init+0x68>
        OD_1016_HBcons->subEntriesCount-1 : monitoredNodesCount;
 8000fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff0:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	e000      	b.n	8000ffa <CO_HBconsumer_init+0x6a>
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	7213      	strb	r3, [r2, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000ffe:	2300      	movs	r3, #0
 8001000:	77fb      	strb	r3, [r7, #31]
 8001002:	e041      	b.n	8001088 <CO_HBconsumer_init+0xf8>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1, &val, true);
 8001004:	7ffb      	ldrb	r3, [r7, #31]
 8001006:	3301      	adds	r3, #1
 8001008:	b2d9      	uxtb	r1, r3
 800100a:	f107 0214 	add.w	r2, r7, #20
 800100e:	2301      	movs	r3, #1
 8001010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001012:	f7ff ff43 	bl	8000e9c <OD_get_u32>
 8001016:	4603      	mov	r3, r0
 8001018:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 800101a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00c      	beq.n	800103c <CO_HBconsumer_init+0xac>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8001022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001024:	2b00      	cmp	r3, #0
 8001026:	d006      	beq.n	8001036 <CO_HBconsumer_init+0xa6>
 8001028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800102a:	f7ff ff12 	bl	8000e52 <OD_getIndex>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001034:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8001036:	f06f 030b 	mvn.w	r3, #11
 800103a:	e04d      	b.n	80010d8 <CO_HBconsumer_init+0x148>
        }

        uint8_t nodeId = (val >> 16) & 0xFF;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	0c1b      	lsrs	r3, r3, #16
 8001040:	777b      	strb	r3, [r7, #29]
        uint16_t time = val & 0xFFFF;
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 8001046:	8b7b      	ldrh	r3, [r7, #26]
 8001048:	7f7a      	ldrb	r2, [r7, #29]
 800104a:	7ff9      	ldrb	r1, [r7, #31]
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f000 f84b 	bl	80010e8 <CO_HBconsumer_initEntry>
 8001052:	4603      	mov	r3, r0
 8001054:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 8001056:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d011      	beq.n	8001082 <CO_HBconsumer_init+0xf2>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 800105e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001060:	2b00      	cmp	r3, #0
 8001062:	d006      	beq.n	8001072 <CO_HBconsumer_init+0xe2>
 8001064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001066:	f7ff fef4 	bl	8000e52 <OD_getIndex>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001070:	601a      	str	r2, [r3, #0]
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS)
 8001072:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001076:	f113 0f0c 	cmn.w	r3, #12
 800107a:	d002      	beq.n	8001082 <CO_HBconsumer_init+0xf2>
                return ret;
 800107c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001080:	e02a      	b.n	80010d8 <CO_HBconsumer_init+0x148>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001082:	7ffb      	ldrb	r3, [r7, #31]
 8001084:	3301      	adds	r3, #1
 8001086:	77fb      	strb	r3, [r7, #31]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	7a1b      	ldrb	r3, [r3, #8]
 800108c:	7ffa      	ldrb	r2, [r7, #31]
 800108e:	429a      	cmp	r2, r3
 8001090:	d3b8      	bcc.n	8001004 <CO_HBconsumer_init+0x74>
        }
    }

    /* configure extension for OD */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_OD_DYNAMIC
    HBcons->OD_1016_extension.object = HBcons;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4a11      	ldr	r2, [pc, #68]	; (80010e0 <CO_HBconsumer_init+0x150>)
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <CO_HBconsumer_init+0x154>)
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	3320      	adds	r3, #32
 80010a8:	4619      	mov	r1, r3
 80010aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010ac:	f7ff fee2 	bl	8000e74 <OD_extension_init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 80010b4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00c      	beq.n	80010d6 <CO_HBconsumer_init+0x146>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 80010bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d006      	beq.n	80010d0 <CO_HBconsumer_init+0x140>
 80010c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010c4:	f7ff fec5 	bl	8000e52 <OD_getIndex>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ce:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80010d0:	f06f 030b 	mvn.w	r3, #11
 80010d4:	e000      	b.n	80010d8 <CO_HBconsumer_init+0x148>
    }
#endif

    return CO_ERROR_NO;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	08001941 	.word	0x08001941
 80010e4:	08000f03 	.word	0x08000f03

080010e8 <CO_HBconsumer_initEntry>:
/******************************************************************************/
static CO_ReturnError_t CO_HBconsumer_initEntry(CO_HBconsumer_t *HBcons,
                                                uint8_t idx,
                                                uint8_t nodeId,
                                                uint16_t consumerTime_ms)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b08d      	sub	sp, #52	; 0x34
 80010ec:	af04      	add	r7, sp, #16
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	4608      	mov	r0, r1
 80010f2:	4611      	mov	r1, r2
 80010f4:	461a      	mov	r2, r3
 80010f6:	4603      	mov	r3, r0
 80010f8:	70fb      	strb	r3, [r7, #3]
 80010fa:	460b      	mov	r3, r1
 80010fc:	70bb      	strb	r3, [r7, #2]
 80010fe:	4613      	mov	r3, r2
 8001100:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001102:	2300      	movs	r3, #0
 8001104:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d004      	beq.n	8001116 <CO_HBconsumer_initEntry+0x2e>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7a1b      	ldrb	r3, [r3, #8]
 8001110:	78fa      	ldrb	r2, [r7, #3]
 8001112:	429a      	cmp	r2, r3
 8001114:	d302      	bcc.n	800111c <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	e077      	b.n	800120c <CO_HBconsumer_initEntry+0x124>
    }

    /* verify for duplicate entries */
    if(consumerTime_ms != 0 && nodeId != 0) {
 800111c:	883b      	ldrh	r3, [r7, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d024      	beq.n	800116c <CO_HBconsumer_initEntry+0x84>
 8001122:	78bb      	ldrb	r3, [r7, #2]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d021      	beq.n	800116c <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001128:	2300      	movs	r3, #0
 800112a:	77bb      	strb	r3, [r7, #30]
 800112c:	e019      	b.n	8001162 <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	7fbb      	ldrb	r3, [r7, #30]
 8001134:	011b      	lsls	r3, r3, #4
 8001136:	4413      	add	r3, r2
 8001138:	f107 0408 	add.w	r4, r7, #8
 800113c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800113e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if(idx != i && node.time_us != 0 && node.nodeId == nodeId) {
 8001142:	78fa      	ldrb	r2, [r7, #3]
 8001144:	7fbb      	ldrb	r3, [r7, #30]
 8001146:	429a      	cmp	r2, r3
 8001148:	d008      	beq.n	800115c <CO_HBconsumer_initEntry+0x74>
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <CO_HBconsumer_initEntry+0x74>
 8001150:	7a3b      	ldrb	r3, [r7, #8]
 8001152:	78ba      	ldrb	r2, [r7, #2]
 8001154:	429a      	cmp	r2, r3
 8001156:	d101      	bne.n	800115c <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 8001158:	23f4      	movs	r3, #244	; 0xf4
 800115a:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 800115c:	7fbb      	ldrb	r3, [r7, #30]
 800115e:	3301      	adds	r3, #1
 8001160:	77bb      	strb	r3, [r7, #30]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7a1b      	ldrb	r3, [r3, #8]
 8001166:	7fba      	ldrb	r2, [r7, #30]
 8001168:	429a      	cmp	r2, r3
 800116a:	d3e0      	bcc.n	800112e <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 800116c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d149      	bne.n	8001208 <CO_HBconsumer_initEntry+0x120>
        uint16_t COB_ID;

        CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	4413      	add	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	78ba      	ldrb	r2, [r7, #2]
 8001184:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 8001186:	883b      	ldrh	r3, [r7, #0]
 8001188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800118c:	fb02 f303 	mul.w	r3, r2, r3
 8001190:	461a      	mov	r2, r3
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	22ff      	movs	r2, #255	; 0xff
 800119a:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if (monitoredNode->nodeId != 0 && monitoredNode->time_us != 0) {
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00d      	beq.n	80011c6 <CO_HBconsumer_initEntry+0xde>
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d009      	beq.n	80011c6 <CO_HBconsumer_initEntry+0xde>
            COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80011bc:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	2201      	movs	r2, #1
 80011c2:	709a      	strb	r2, [r3, #2]
 80011c4:	e007      	b.n	80011d6 <CO_HBconsumer_initEntry+0xee>
        }
        else {
            COB_ID = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	2200      	movs	r2, #0
 80011d4:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6998      	ldr	r0, [r3, #24]
                                 HBcons->CANdevRxIdxStart + idx,
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	8b9a      	ldrh	r2, [r3, #28]
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 80011de:	78fb      	ldrb	r3, [r7, #3]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	4413      	add	r3, r2
 80011e4:	b299      	uxth	r1, r3
                                 COB_ID,
                                 0x7FF,
                                 0,
                                 (void*)&HBcons->monitoredNodes[idx],
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	78fb      	ldrb	r3, [r7, #3]
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 80011f0:	8bba      	ldrh	r2, [r7, #28]
 80011f2:	4c08      	ldr	r4, [pc, #32]	; (8001214 <CO_HBconsumer_initEntry+0x12c>)
 80011f4:	9402      	str	r4, [sp, #8]
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	2300      	movs	r3, #0
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001200:	f006 ff58 	bl	80080b4 <CO_CANrxBufferInit>
 8001204:	4603      	mov	r3, r0
 8001206:	77fb      	strb	r3, [r7, #31]
                                 CO_HBcons_receive);
    }
    return ret;
 8001208:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3724      	adds	r7, #36	; 0x24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd90      	pop	{r4, r7, pc}
 8001214:	08000ec7 	.word	0x08000ec7

08001218 <CO_HBconsumer_process>:
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08e      	sub	sp, #56	; 0x38
 800121c:	af02      	add	r7, sp, #8
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 8001226:	2301      	movs	r3, #1
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 800122a:	2301      	movs	r3, #1
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 808c 	beq.w	800134e <CO_HBconsumer_process+0x136>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 8087 	beq.w	800134e <CO_HBconsumer_process+0x136>
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001240:	2300      	movs	r3, #0
 8001242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001246:	e07a      	b.n	800133e <CO_HBconsumer_process+0x126>
            uint32_t timeDifference_us_copy = timeDifference_us;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	4413      	add	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	789b      	ldrb	r3, [r3, #2]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d067      	beq.n	8001332 <CO_HBconsumer_process+0x11a>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d022      	beq.n	80012b0 <CO_HBconsumer_process+0x98>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d112      	bne.n	800129a <CO_HBconsumer_process+0x82>
                        monitoredNode->pFunctSignalRemoteReset(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	789b      	ldrb	r3, [r3, #2]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d10a      	bne.n	8001292 <CO_HBconsumer_process+0x7a>
                        CO_errorReport(HBcons->em,
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6818      	ldr	r0, [r3, #0]
 8001280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	f248 1330 	movw	r3, #33072	; 0x8130
 800128a:	221c      	movs	r2, #28
 800128c:	2101      	movs	r1, #1
 800128e:	f7ff fd15 	bl	8000cbc <CO_error>
                                       CO_EM_HB_CONSUMER_REMOTE_RESET,
                                       CO_EMC_HEARTBEAT, i);
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	2201      	movs	r2, #1
 8001296:	709a      	strb	r2, [r3, #2]
 8001298:	e007      	b.n	80012aa <CO_HBconsumer_process+0x92>
                        monitoredNode->pFunctSignalHbStarted(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2202      	movs	r2, #2
 800129e:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2200      	movs	r2, #0
 80012a4:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	2200      	movs	r2, #0
 80012ae:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	789b      	ldrb	r3, [r3, #2]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d12e      	bne.n	8001316 <CO_HBconsumer_process+0xfe>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	441a      	add	r2, r3
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d311      	bcc.n	80012f4 <CO_HBconsumer_process+0xdc>
                        monitoredNode->pFunctSignalTimeout(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER,
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	f248 1330 	movw	r3, #33072	; 0x8130
 80012de:	221b      	movs	r2, #27
 80012e0:	2101      	movs	r1, #1
 80012e2:	f7ff fceb 	bl	8000cbc <CO_error>
                                   CO_EMC_HEARTBEAT, i);
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	22ff      	movs	r2, #255	; 0xff
 80012ea:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2203      	movs	r2, #3
 80012f0:	709a      	strb	r2, [r3, #2]
 80012f2:	e010      	b.n	8001316 <CO_HBconsumer_process+0xfe>
                }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_TIMERNEXT
                else if (timerNext_us != NULL) {
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00d      	beq.n	8001316 <CO_HBconsumer_process+0xfe>
                    /* Calculate timerNext_us for next timeout checking. */
                    uint32_t diff = monitoredNode->time_us
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	689a      	ldr	r2, [r3, #8]
                                  - monitoredNode->timeoutTimer;
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	685b      	ldr	r3, [r3, #4]
                    uint32_t diff = monitoredNode->time_us
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	617b      	str	r3, [r7, #20]
                    if (*timerNext_us > diff) {
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	429a      	cmp	r2, r3
 800130e:	d202      	bcs.n	8001316 <CO_HBconsumer_process+0xfe>
                        *timerNext_us = diff;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	601a      	str	r2, [r3, #0]
                    }
                }
#endif
            }

            if(monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	789b      	ldrb	r3, [r3, #2]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d001      	beq.n	8001322 <CO_HBconsumer_process+0x10a>
                allMonitoredActiveCurrent = false;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001328:	2b05      	cmp	r3, #5
 800132a:	d003      	beq.n	8001334 <CO_HBconsumer_process+0x11c>
                allMonitoredOperationalCurrent = false;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001330:	e000      	b.n	8001334 <CO_HBconsumer_process+0x11c>
                continue;
 8001332:	bf00      	nop
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001338:	3301      	adds	r3, #1
 800133a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	7a1b      	ldrb	r3, [r3, #8]
 8001342:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001346:	429a      	cmp	r2, r3
 8001348:	f4ff af7e 	bcc.w	8001248 <CO_HBconsumer_process+0x30>
 800134c:	e028      	b.n	80013a0 <CO_HBconsumer_process+0x188>
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    }
    else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d103      	bne.n	800135c <CO_HBconsumer_process+0x144>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d021      	beq.n	80013a0 <CO_HBconsumer_process+0x188>
        /* (pre)operational state changed, clear variables */
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 800135c:	2300      	movs	r3, #0
 800135e:	77fb      	strb	r3, [r7, #31]
 8001360:	e015      	b.n	800138e <CO_HBconsumer_process+0x176>
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	7ffb      	ldrb	r3, [r7, #31]
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	4413      	add	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	22ff      	movs	r2, #255	; 0xff
 8001372:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	789b      	ldrb	r3, [r3, #2]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d002      	beq.n	8001388 <CO_HBconsumer_process+0x170>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	2201      	movs	r2, #1
 8001386:	709a      	strb	r2, [r3, #2]
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001388:	7ffb      	ldrb	r3, [r7, #31]
 800138a:	3301      	adds	r3, #1
 800138c:	77fb      	strb	r3, [r7, #31]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	7a1b      	ldrb	r3, [r3, #8]
 8001392:	7ffa      	ldrb	r2, [r7, #31]
 8001394:	429a      	cmp	r2, r3
 8001396:	d3e4      	bcc.n	8001362 <CO_HBconsumer_process+0x14a>
            }
        }
        allMonitoredActiveCurrent = false;
 8001398:	2300      	movs	r3, #0
 800139a:	62fb      	str	r3, [r7, #44]	; 0x2c
        allMonitoredOperationalCurrent = false;
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d114      	bne.n	80013d2 <CO_HBconsumer_process+0x1ba>
 80013a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d011      	beq.n	80013d2 <CO_HBconsumer_process+0x1ba>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	2300      	movs	r3, #0
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2300      	movs	r3, #0
 80013b8:	221b      	movs	r2, #27
 80013ba:	2100      	movs	r1, #0
 80013bc:	f7ff fc7e 	bl	8000cbc <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6818      	ldr	r0, [r3, #0]
 80013c4:	2300      	movs	r3, #0
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2300      	movs	r3, #0
 80013ca:	221c      	movs	r2, #28
 80013cc:	2100      	movs	r1, #0
 80013ce:	f7ff fc75 	bl	8000cbc <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013d6:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013dc:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	615a      	str	r2, [r3, #20]
}
 80013e4:	bf00      	nop
 80013e6:	3730      	adds	r7, #48	; 0x30
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 80013fa:	81fb      	strh	r3, [r7, #14]
 80013fc:	89fb      	ldrh	r3, [r7, #14]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d002      	beq.n	800141e <OD_getIndex+0x14>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	e000      	b.n	8001420 <OD_getIndex+0x16>
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <OD_extension_init>:
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <OD_extension_init+0x14>
 800143c:	2305      	movs	r3, #5
 800143e:	e003      	b.n	8001448 <OD_extension_init+0x1c>
    entry->extension = extension;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <OD_get_u16>:
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af02      	add	r7, sp, #8
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	460b      	mov	r3, r1
 8001462:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001464:	7af9      	ldrb	r1, [r7, #11]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2302      	movs	r3, #2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f000 fca4 	bl	8001dbc <OD_get_value>
 8001474:	4603      	mov	r3, r0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <CO_isError>:
 * @param em Emergency object.
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 800147e:	b480      	push	{r7}
 8001480:	b085      	sub	sp, #20
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	08db      	lsrs	r3, r3, #3
 800148e:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	2201      	movs	r2, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00a      	beq.n	80014ba <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	2b09      	cmp	r3, #9
 80014a8:	d807      	bhi.n	80014ba <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	5cd2      	ldrb	r2, [r2, r3]
 80014b0:	7bbb      	ldrb	r3, [r7, #14]
 80014b2:	4013      	ands	r3, r2
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <CO_isError+0x40>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <CO_isError+0x42>
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <CO_getErrorRegister>:
 *
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d007      	beq.n	80014ea <CO_getErrorRegister+0x1e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <CO_getErrorRegister+0x1e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	e000      	b.n	80014ec <CO_getErrorRegister+0x20>
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, void *msg) {
 80014f8:	b480      	push	{r7}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	791b      	ldrb	r3, [r3, #4]
 8001506:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	3305      	adds	r3, #5
 800150c:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	785b      	ldrb	r3, [r3, #1]
 8001518:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t *NMT = (CO_NMT_t*)object;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	60bb      	str	r3, [r7, #8]

    if (DLC == 2 && (nodeId == 0 || nodeId == NMT->nodeId)) {
 800151e:	7dfb      	ldrb	r3, [r7, #23]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d10a      	bne.n	800153a <CO_NMT_receive+0x42>
 8001524:	7bbb      	ldrb	r3, [r7, #14]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d004      	beq.n	8001534 <CO_NMT_receive+0x3c>
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	78db      	ldrb	r3, [r3, #3]
 800152e:	7bba      	ldrb	r2, [r7, #14]
 8001530:	429a      	cmp	r2, r3
 8001532:	d102      	bne.n	800153a <CO_NMT_receive+0x42>
        NMT->internalCommand = command;
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 800153a:	bf00      	nop
 800153c:	371c      	adds	r7, #28
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <OD_write_1017>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1017(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00c      	beq.n	8001574 <OD_write_1017+0x2e>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	7c5b      	ldrb	r3, [r3, #17]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d108      	bne.n	8001574 <OD_write_1017+0x2e>
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <OD_write_1017+0x2e>
        || count != sizeof(uint16_t) || countWritten == NULL
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d102      	bne.n	8001574 <OD_write_1017+0x2e>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <OD_write_1017+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8001574:	2309      	movs	r3, #9
 8001576:	e017      	b.n	80015a8 <OD_write_1017+0x62>
    }

    CO_NMT_t *NMT = (CO_NMT_t *)stream->object;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000;
 800157e:	68b8      	ldr	r0, [r7, #8]
 8001580:	f7ff ff34 	bl	80013ec <CO_getUint16>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158c:	fb03 f202 	mul.w	r2, r3, r2
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	68b9      	ldr	r1, [r7, #8]
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 fa25 	bl	80019f0 <OD_writeOriginal>
 80015a6:	4603      	mov	r3, r0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <CO_NMT_init>:
#endif
                             CO_CANmodule_t *HB_CANdevTx,
                             uint16_t HB_txIdx,
                             uint16_t CANidTxHB,
                             uint32_t *errInfo)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af04      	add	r7, sp, #16
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80015be:	2300      	movs	r3, #0
 80015c0:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (NMT == NULL || OD_1017_ProducerHbTime == NULL || em == NULL
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00b      	beq.n	80015e0 <CO_NMT_init+0x30>
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d008      	beq.n	80015e0 <CO_NMT_init+0x30>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <CO_NMT_init+0x30>
        || NMT_CANdevRx == NULL || HB_CANdevTx == NULL
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <CO_NMT_init+0x30>
 80015da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <CO_NMT_init+0x36>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
        || NMT_CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
 80015e4:	e098      	b.n	8001718 <CO_NMT_init+0x168>
    }

    /* clear the object */
    memset(NMT, 0, sizeof(CO_NMT_t));
 80015e6:	222c      	movs	r2, #44	; 0x2c
 80015e8:	2100      	movs	r1, #0
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f00a fdf4 	bl	800c1d8 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	78fa      	ldrb	r2, [r7, #3]
 8001600:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	8c3a      	ldrh	r2, [r7, #32]
 8001606:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (int32_t)firstHBTime_ms * 1000;
 800160e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001610:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001614:	fb02 f303 	mul.w	r3, r2, r3
 8001618:	461a      	mov	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 800161e:	f107 0214 	add.w	r2, r7, #20
 8001622:	2301      	movs	r3, #1
 8001624:	2100      	movs	r1, #0
 8001626:	68b8      	ldr	r0, [r7, #8]
 8001628:	f7ff ff14 	bl	8001454 <OD_get_u16>
 800162c:	4603      	mov	r3, r0
 800162e:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001630:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00c      	beq.n	8001652 <CO_NMT_init+0xa2>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800163a:	2b00      	cmp	r3, #0
 800163c:	d006      	beq.n	800164c <CO_NMT_init+0x9c>
 800163e:	68b8      	ldr	r0, [r7, #8]
 8001640:	f7ff fee3 	bl	800140a <OD_getIndex>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800164a:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800164c:	f06f 030b 	mvn.w	r3, #11
 8001650:	e062      	b.n	8001718 <CO_NMT_init+0x168>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000;
 8001652:	8abb      	ldrh	r3, [r7, #20]
 8001654:	461a      	mov	r2, r3
 8001656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165a:	fb03 f202 	mul.w	r2, r3, r2
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4a2d      	ldr	r2, [pc, #180]	; (8001720 <CO_NMT_init+0x170>)
 800166c:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4a2c      	ldr	r2, [pc, #176]	; (8001724 <CO_NMT_init+0x174>)
 8001672:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3310      	adds	r3, #16
 8001678:	4619      	mov	r1, r3
 800167a:	68b8      	ldr	r0, [r7, #8]
 800167c:	f7ff fed6 	bl	800142c <OD_extension_init>
 8001680:	4603      	mov	r3, r0
 8001682:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001684:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00c      	beq.n	80016a6 <CO_NMT_init+0xf6>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 800168c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800168e:	2b00      	cmp	r3, #0
 8001690:	d006      	beq.n	80016a0 <CO_NMT_init+0xf0>
 8001692:	68b8      	ldr	r0, [r7, #8]
 8001694:	f7ff feb9 	bl	800140a <OD_getIndex>
 8001698:	4603      	mov	r3, r0
 800169a:	461a      	mov	r2, r3
 800169c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800169e:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80016a0:	f06f 030b 	mvn.w	r3, #11
 80016a4:	e038      	b.n	8001718 <CO_NMT_init+0x168>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d903      	bls.n	80016ba <CO_NMT_init+0x10a>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(
 80016ba:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80016bc:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80016be:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <CO_NMT_init+0x178>)
 80016c0:	9302      	str	r3, [sp, #8]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	2300      	movs	r3, #0
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80016ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016d0:	f006 fcf0 	bl	80080b4 <CO_CANrxBufferInit>
 80016d4:	4603      	mov	r3, r0
 80016d6:	75fb      	strb	r3, [r7, #23]
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 80016d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <CO_NMT_init+0x136>
        return ret;
 80016e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016e4:	e018      	b.n	8001718 <CO_NMT_init+0x168>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016ea:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 80016ec:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80016ee:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80016f0:	2300      	movs	r3, #0
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	2301      	movs	r3, #1
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2300      	movs	r3, #0
 80016fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016fc:	f006 fd36 	bl	800816c <CO_CANtxBufferInit>
 8001700:	4602      	mov	r2, r0
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	629a      	str	r2, [r3, #40]	; 0x28
            HB_txIdx,           /* index of specific buffer inside CAN module */
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */
    if (NMT->HB_TXbuff == NULL) {
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <CO_NMT_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
 8001712:	e001      	b.n	8001718 <CO_NMT_init+0x168>
    }

    return ret;
 8001714:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	08001941 	.word	0x08001941
 8001724:	08001547 	.word	0x08001547
 8001728:	080014f9 	.word	0x080014f9

0800172c <CO_NMT_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_NMT_process(CO_NMT_t *NMT,
                                  CO_NMT_internalState_t *NMTstate,
                                  uint32_t timeDifference_us,
                                  uint32_t *timerNext_us)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	77fb      	strb	r3, [r7, #31]
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 8001740:	2300      	movs	r3, #0
 8001742:	77bb      	strb	r3, [r7, #30]
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 8001744:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001748:	2b00      	cmp	r3, #0
 800174a:	bf0c      	ite	eq
 800174c:	2301      	moveq	r3, #1
 800174e:	2300      	movne	r3, #0
 8001750:	b2db      	uxtb	r3, r3
 8001752:	61bb      	str	r3, [r7, #24]

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	68db      	ldr	r3, [r3, #12]
                         ? (NMT->HBproducerTimer - timeDifference_us) : 0;
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	429a      	cmp	r2, r3
 800175c:	d204      	bcs.n	8001768 <CO_NMT_process+0x3c>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	e000      	b.n	800176a <CO_NMT_process+0x3e>
 8001768:	2300      	movs	r3, #0
    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed*/
    if (NNTinit || (NMT->HBproducerTime_us != 0
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10e      	bne.n	8001792 <CO_NMT_process+0x66>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d029      	beq.n	80017d0 <CO_NMT_process+0xa4>
                    && (NMT->HBproducerTimer == 0
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d006      	beq.n	8001792 <CO_NMT_process+0x66>
                        || NMTstateCpy != NMT->operatingStatePrev)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800178a:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800178e:	429a      	cmp	r2, r3
 8001790:	d01e      	beq.n	80017d0 <CO_NMT_process+0xa4>
    )) {
        NMT->HB_TXbuff->data[0] = (uint8_t) NMTstateCpy;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	7ffa      	ldrb	r2, [r7, #31]
 8001798:	715a      	strb	r2, [r3, #5]
        CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a2:	4619      	mov	r1, r3
 80017a4:	4610      	mov	r0, r2
 80017a6:	f006 fd5b 	bl	8008260 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 80017aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10a      	bne.n	80017c8 <CO_NMT_process+0x9c>
            /* NMT slave self starting */
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	889b      	ldrh	r3, [r3, #4]
 80017b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
                          ? CO_NMT_OPERATIONAL : CO_NMT_PRE_OPERATIONAL;
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <CO_NMT_process+0x96>
 80017be:	2305      	movs	r3, #5
 80017c0:	e000      	b.n	80017c4 <CO_NMT_process+0x98>
 80017c2:	237f      	movs	r3, #127	; 0x7f
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 80017c4:	77fb      	strb	r3, [r7, #31]
 80017c6:	e003      	b.n	80017d0 <CO_NMT_process+0xa4>
        else {
            /* Start timer from the beginning. If OS is slow, time sliding may
             * occur. However, heartbeat is not for synchronization, it is for
             * health report. In case of initializing, timer is set in the
             * CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	7ffa      	ldrb	r2, [r7, #31]
 80017d4:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or
     * CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	789b      	ldrb	r3, [r3, #2]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d025      	beq.n	800182a <CO_NMT_process+0xfe>
        switch (NMT->internalCommand) {
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	789b      	ldrb	r3, [r3, #2]
 80017e2:	2b82      	cmp	r3, #130	; 0x82
 80017e4:	d01a      	beq.n	800181c <CO_NMT_process+0xf0>
 80017e6:	2b82      	cmp	r3, #130	; 0x82
 80017e8:	dc1b      	bgt.n	8001822 <CO_NMT_process+0xf6>
 80017ea:	2b81      	cmp	r3, #129	; 0x81
 80017ec:	d013      	beq.n	8001816 <CO_NMT_process+0xea>
 80017ee:	2b81      	cmp	r3, #129	; 0x81
 80017f0:	dc17      	bgt.n	8001822 <CO_NMT_process+0xf6>
 80017f2:	2b80      	cmp	r3, #128	; 0x80
 80017f4:	d00c      	beq.n	8001810 <CO_NMT_process+0xe4>
 80017f6:	2b80      	cmp	r3, #128	; 0x80
 80017f8:	dc13      	bgt.n	8001822 <CO_NMT_process+0xf6>
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d002      	beq.n	8001804 <CO_NMT_process+0xd8>
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d003      	beq.n	800180a <CO_NMT_process+0xde>
                break;
            case CO_NMT_RESET_COMMUNICATION:
                resetCommand = CO_RESET_COMM;
                break;
            default:
                break;
 8001802:	e00e      	b.n	8001822 <CO_NMT_process+0xf6>
                NMTstateCpy = CO_NMT_OPERATIONAL;
 8001804:	2305      	movs	r3, #5
 8001806:	77fb      	strb	r3, [r7, #31]
                break;
 8001808:	e00c      	b.n	8001824 <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_STOPPED;
 800180a:	2304      	movs	r3, #4
 800180c:	77fb      	strb	r3, [r7, #31]
                break;
 800180e:	e009      	b.n	8001824 <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_PRE_OPERATIONAL;
 8001810:	237f      	movs	r3, #127	; 0x7f
 8001812:	77fb      	strb	r3, [r7, #31]
                break;
 8001814:	e006      	b.n	8001824 <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_APP;
 8001816:	2302      	movs	r3, #2
 8001818:	77bb      	strb	r3, [r7, #30]
                break;
 800181a:	e003      	b.n	8001824 <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_COMM;
 800181c:	2301      	movs	r3, #1
 800181e:	77bb      	strb	r3, [r7, #30]
                break;
 8001820:	e000      	b.n	8001824 <CO_NMT_process+0xf8>
                break;
 8001822:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	889b      	ldrh	r3, [r3, #4]
 800182e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 8001832:	2b00      	cmp	r3, #0
 8001834:	d01c      	beq.n	8001870 <CO_NMT_process+0x144>
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	2112      	movs	r1, #18
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fe1e 	bl	800147e <CO_isError>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d111      	bne.n	800186c <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	211b      	movs	r1, #27
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fe15 	bl	800147e <CO_isError>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d108      	bne.n	800186c <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET));
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	211c      	movs	r1, #28
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fe0c 	bl	800147e <CO_isError>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <CO_NMT_process+0x144>
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <CO_NMT_process+0x146>
 8001870:	2300      	movs	r3, #0
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 8001872:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	889b      	ldrh	r3, [r3, #4]
 8001878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    && (CO_getErrorRegister(NMT->em) & NMT->NMTcontrol) != 0;
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00d      	beq.n	800189c <CO_NMT_process+0x170>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fe21 	bl	80014cc <CO_getErrorRegister>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	889b      	ldrh	r3, [r3, #4]
 8001892:	4013      	ands	r3, r2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <CO_NMT_process+0x170>
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <CO_NMT_process+0x172>
 800189c:	2300      	movs	r3, #0
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 800189e:	613b      	str	r3, [r7, #16]

    if (NMTstateCpy == CO_NMT_OPERATIONAL && (busOff_HB || errRegMasked)) {
 80018a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018a4:	2b05      	cmp	r3, #5
 80018a6:	d110      	bne.n	80018ca <CO_NMT_process+0x19e>
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <CO_NMT_process+0x188>
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00a      	beq.n	80018ca <CO_NMT_process+0x19e>
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	889b      	ldrh	r3, [r3, #4]
 80018b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
                    ? CO_NMT_STOPPED : CO_NMT_PRE_OPERATIONAL;
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <CO_NMT_process+0x198>
 80018c0:	2304      	movs	r3, #4
 80018c2:	e000      	b.n	80018c6 <CO_NMT_process+0x19a>
 80018c4:	237f      	movs	r3, #127	; 0x7f
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 80018c6:	77fb      	strb	r3, [r7, #31]
 80018c8:	e010      	b.n	80018ec <CO_NMT_process+0x1c0>
    }
    else if ((NMT->NMTcontrol & CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	889b      	ldrh	r3, [r3, #4]
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	da0b      	bge.n	80018ec <CO_NMT_process+0x1c0>
        && NMTstateCpy == CO_NMT_PRE_OPERATIONAL && !busOff_HB && !errRegMasked
 80018d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018d8:	2b7f      	cmp	r3, #127	; 0x7f
 80018da:	d107      	bne.n	80018ec <CO_NMT_process+0x1c0>
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d104      	bne.n	80018ec <CO_NMT_process+0x1c0>
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <CO_NMT_process+0x1c0>
    ) {
        NMTstateCpy = CO_NMT_OPERATIONAL;
 80018e8:	2305      	movs	r3, #5
 80018ea:	77fb      	strb	r3, [r7, #31]
    }
#endif

#if (CO_CONFIG_NMT) & CO_CONFIG_FLAG_TIMERNEXT
    /* Calculate, when next Heartbeat needs to be send */
    if (NMT->HBproducerTime_us != 0 && timerNext_us != NULL) {
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d017      	beq.n	8001924 <CO_NMT_process+0x1f8>
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d014      	beq.n	8001924 <CO_NMT_process+0x1f8>
        if (NMT->operatingStatePrev != NMTstateCpy) {
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001900:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8001904:	429a      	cmp	r2, r3
 8001906:	d003      	beq.n	8001910 <CO_NMT_process+0x1e4>
            *timerNext_us = 0;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	e009      	b.n	8001924 <CO_NMT_process+0x1f8>
        }
        else if (*timerNext_us > NMT->HBproducerTimer) {
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d903      	bls.n	8001924 <CO_NMT_process+0x1f8>
            *timerNext_us = NMT->HBproducerTimer;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	601a      	str	r2, [r3, #0]
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	7ffa      	ldrb	r2, [r7, #31]
 8001928:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) *NMTstate = NMTstateCpy;
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <CO_NMT_process+0x20a>
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	7ffa      	ldrb	r2, [r7, #31]
 8001934:	701a      	strb	r2, [r3, #0]

    return resetCommand;
 8001936:	7fbb      	ldrb	r3, [r7, #30]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <OD_readOriginal>:


/******************************************************************************/
ODR_t OD_readOriginal(OD_stream_t *stream, void *buf,
                      OD_size_t count, OD_size_t *countRead)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
 800194c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL) {
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <OD_readOriginal+0x20>
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <OD_readOriginal+0x20>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001960:	2309      	movs	r3, #9
 8001962:	e041      	b.n	80019e8 <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	61fb      	str	r3, [r7, #28]
    const uint8_t *dataOrig = stream->dataOrig;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 8001976:	230e      	movs	r3, #14
 8001978:	e036      	b.n	80019e8 <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d103      	bne.n	800198e <OD_readOriginal+0x4e>
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	429a      	cmp	r2, r3
 800198c:	d922      	bls.n	80019d4 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	69fa      	ldr	r2, [r7, #28]
 8001994:	429a      	cmp	r2, r3
 8001996:	d801      	bhi.n	800199c <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 8001998:	2309      	movs	r3, #9
 800199a:	e025      	b.n	80019e8 <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4413      	add	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d90a      	bls.n	80019ce <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	441a      	add	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80019c8:	23ff      	movs	r3, #255	; 0xff
 80019ca:	75fb      	strb	r3, [r7, #23]
 80019cc:	e002      	b.n	80019d4 <OD_readOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
        }
    }

    memcpy(buf, dataOrig, dataLenToCopy);
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	69b9      	ldr	r1, [r7, #24]
 80019d8:	68b8      	ldr	r0, [r7, #8]
 80019da:	f00a fc87 	bl	800c2ec <memcpy>

    *countRead = dataLenToCopy;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	69fa      	ldr	r2, [r7, #28]
 80019e2:	601a      	str	r2, [r3, #0]
    return returnCode;
 80019e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <OD_writeOriginal>:

/******************************************************************************/
ODR_t OD_writeOriginal(OD_stream_t *stream, const void *buf,
                       OD_size_t count, OD_size_t *countWritten)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <OD_writeOriginal+0x20>
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <OD_writeOriginal+0x20>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001a10:	2309      	movs	r3, #9
 8001a12:	e047      	b.n	8001aa4 <OD_writeOriginal+0xb4>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	61fb      	str	r3, [r7, #28]
    uint8_t *dataOrig = stream->dataOrig;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <OD_writeOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 8001a26:	230e      	movs	r3, #14
 8001a28:	e03c      	b.n	8001aa4 <OD_writeOriginal+0xb4>
    }

    ODR_t returnCode = ODR_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	75fb      	strb	r3, [r7, #23]

    /* If previous write was partial or OD variable length is larger than
     * current buffer size, then data was (will be) written in several
     * segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d103      	bne.n	8001a3e <OD_writeOriginal+0x4e>
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d922      	bls.n	8001a84 <OD_writeOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d801      	bhi.n	8001a4c <OD_writeOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 8001a48:	2309      	movs	r3, #9
 8001a4a:	e02b      	b.n	8001aa4 <OD_writeOriginal+0xb4>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	69fa      	ldr	r2, [r7, #28]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d90a      	bls.n	8001a7e <OD_writeOriginal+0x8e>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	441a      	add	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8001a78:	23ff      	movs	r3, #255	; 0xff
 8001a7a:	75fb      	strb	r3, [r7, #23]
 8001a7c:	e002      	b.n	8001a84 <OD_writeOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d201      	bcs.n	8001a90 <OD_writeOriginal+0xa0>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 8001a8c:	230c      	movs	r3, #12
 8001a8e:	e009      	b.n	8001aa4 <OD_writeOriginal+0xb4>
    }

    memcpy(dataOrig, buf, dataLenToCopy);
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	68b9      	ldr	r1, [r7, #8]
 8001a94:	69b8      	ldr	r0, [r7, #24]
 8001a96:	f00a fc29 	bl	800c2ec <memcpy>

    *countWritten = dataLenToCopy;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001aa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t*/
static ODR_t OD_readDisabled(OD_stream_t *stream, void *buf,
                             OD_size_t count, OD_size_t *countRead)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countRead;
    return ODR_UNSUPP_ACCESS;
 8001aba:	2302      	movs	r3, #2
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t OD_writeDisabled(OD_stream_t *stream, const void *buf,
                              OD_size_t count, OD_size_t *countWritten)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countWritten;
    return ODR_UNSUPP_ACCESS;
 8001ad6:	2302      	movs	r3, #2
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <OD_find>:


/******************************************************************************/
OD_entry_t *OD_find(OD_t *od, uint16_t index) {
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]
    if (od == NULL || od->size == 0) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <OD_find+0x1a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <OD_find+0x1e>
        return NULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e046      	b.n	8001b90 <OD_find+0xac>
    }

    uint16_t min = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed,
     * this won't work. If Object Dictionary has up to N entries, then the
     * max number of loop passes is log2(N) */
    while (min < max) {
 8001b0e:	e026      	b.n	8001b5e <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 8001b10:	8afa      	ldrh	r2, [r7, #22]
 8001b12:	8abb      	ldrh	r3, [r7, #20]
 8001b14:	4413      	add	r3, r2
 8001b16:	105b      	asrs	r3, r3, #1
 8001b18:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6859      	ldr	r1, [r3, #4]
 8001b1e:	89fa      	ldrh	r2, [r7, #14]
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	887a      	ldrh	r2, [r7, #2]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d101      	bne.n	8001b3a <OD_find+0x56>
            return entry;
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	e02a      	b.n	8001b90 <OD_find+0xac>
        }

        if (index < entry->index) {
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d209      	bcs.n	8001b58 <OD_find+0x74>
            max = (cur > 0) ? (cur - 1) : cur;
 8001b44:	89fb      	ldrh	r3, [r7, #14]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <OD_find+0x6e>
 8001b4a:	89fb      	ldrh	r3, [r7, #14]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	e000      	b.n	8001b54 <OD_find+0x70>
 8001b52:	89fb      	ldrh	r3, [r7, #14]
 8001b54:	82bb      	strh	r3, [r7, #20]
 8001b56:	e002      	b.n	8001b5e <OD_find+0x7a>
        }
        else {
            min = cur + 1;
 8001b58:	89fb      	ldrh	r3, [r7, #14]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 8001b5e:	8afa      	ldrh	r2, [r7, #22]
 8001b60:	8abb      	ldrh	r3, [r7, #20]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d3d4      	bcc.n	8001b10 <OD_find+0x2c>
        }
    }

    if (min == max) {
 8001b66:	8afa      	ldrh	r2, [r7, #22]
 8001b68:	8abb      	ldrh	r3, [r7, #20]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d10f      	bne.n	8001b8e <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6859      	ldr	r1, [r3, #4]
 8001b72:	8afa      	ldrh	r2, [r7, #22]
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	887a      	ldrh	r2, [r7, #2]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d101      	bne.n	8001b8e <OD_find+0xaa>
            return entry;
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	e000      	b.n	8001b90 <OD_find+0xac>
        }
    }

    return NULL;  /* entry does not exist in OD */
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	371c      	adds	r7, #28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <OD_getSub>:

/******************************************************************************/
ODR_t OD_getSub(const OD_entry_t *entry, uint8_t subIndex,
                OD_IO_t *io, bool_t odOrig)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b08d      	sub	sp, #52	; 0x34
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	72fb      	strb	r3, [r7, #11]
    if (entry == NULL || entry->odObject == NULL) return ODR_IDX_NOT_EXIST;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <OD_getSub+0x1e>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <OD_getSub+0x22>
 8001bba:	2305      	movs	r3, #5
 8001bbc:	e0d2      	b.n	8001d64 <OD_getSub+0x1c8>
    if (io == NULL) return ODR_DEV_INCOMPAT;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <OD_getSub+0x2c>
 8001bc4:	2309      	movs	r3, #9
 8001bc6:	e0cd      	b.n	8001d64 <OD_getSub+0x1c8>

    OD_stream_t *stream = &io->stream;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & ODT_TYPE_MASK) {
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	78db      	ldrb	r3, [r3, #3]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d050      	beq.n	8001c7a <OD_getSub+0xde>
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	f300 808c 	bgt.w	8001cf6 <OD_getSub+0x15a>
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d002      	beq.n	8001be8 <OD_getSub+0x4c>
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d015      	beq.n	8001c12 <OD_getSub+0x76>
 8001be6:	e086      	b.n	8001cf6 <OD_getSub+0x15a>
    case ODT_VAR: {
        if (subIndex > 0) return ODR_SUB_NOT_EXIST;
 8001be8:	7afb      	ldrb	r3, [r7, #11]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <OD_getSub+0x56>
 8001bee:	230e      	movs	r3, #14
 8001bf0:	e0b8      	b.n	8001d64 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_var_t *odo = entry->odObject;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	617b      	str	r3, [r7, #20]


        stream->attribute = odo->attribute;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	791a      	ldrb	r2, [r3, #4]
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	609a      	str	r2, [r3, #8]
        break;
 8001c10:	e073      	b.n	8001cfa <OD_getSub+0x15e>
    }
    case ODT_ARR: {
        if (subIndex >= entry->subEntriesCount) return ODR_SUB_NOT_EXIST;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	789b      	ldrb	r3, [r3, #2]
 8001c16:	7afa      	ldrb	r2, [r7, #11]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d301      	bcc.n	8001c20 <OD_getSub+0x84>
 8001c1c:	230e      	movs	r3, #14
 8001c1e:	e0a1      	b.n	8001d64 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_array_t *odo = entry->odObject;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	61fb      	str	r3, [r7, #28]

        if (subIndex == 0) {
 8001c26:	7afb      	ldrb	r3, [r7, #11]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10b      	bne.n	8001c44 <OD_getSub+0xa8>
            stream->attribute = odo->attribute0;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	7a1a      	ldrb	r2, [r3, #8]
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig0;
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	601a      	str	r2, [r3, #0]
            stream->dataLength = 1;
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	2201      	movs	r2, #1
 8001c40:	609a      	str	r2, [r3, #8]
            uint8_t *ptr = odo->dataOrig;
            stream->dataOrig = ptr == NULL ? ptr
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
            stream->dataLength = odo->dataElementLength;
        }
        break;
 8001c42:	e05a      	b.n	8001cfa <OD_getSub+0x15e>
            stream->attribute = odo->attribute;
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	7a5a      	ldrb	r2, [r3, #9]
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	741a      	strb	r2, [r3, #16]
            uint8_t *ptr = odo->dataOrig;
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	61bb      	str	r3, [r7, #24]
            stream->dataOrig = ptr == NULL ? ptr
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <OD_getSub+0xce>
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	7afa      	ldrb	r2, [r7, #11]
 8001c5e:	3a01      	subs	r2, #1
 8001c60:	fb02 f303 	mul.w	r3, r2, r3
            stream->dataOrig = ptr == NULL ? ptr
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4413      	add	r3, r2
 8001c68:	e000      	b.n	8001c6c <OD_getSub+0xd0>
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6e:	6013      	str	r3, [r2, #0]
            stream->dataLength = odo->dataElementLength;
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	609a      	str	r2, [r3, #8]
        break;
 8001c78:	e03f      	b.n	8001cfa <OD_getSub+0x15e>
    }
    case ODT_REC: {
        CO_PROGMEM OD_obj_record_t *odoArr = entry->odObject;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	623b      	str	r3, [r7, #32]
        CO_PROGMEM OD_obj_record_t *odo = NULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001c8a:	e01c      	b.n	8001cc6 <OD_getSub+0x12a>
            if (odoArr[i].subIndex == subIndex) {
 8001c8c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	791b      	ldrb	r3, [r3, #4]
 8001ca0:	7afa      	ldrb	r2, [r7, #11]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d10a      	bne.n	8001cbc <OD_getSub+0x120>
                odo = &odoArr[i];
 8001ca6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8001cba:	e00a      	b.n	8001cd2 <OD_getSub+0x136>
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001cbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	789b      	ldrb	r3, [r3, #2]
 8001cca:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d3dc      	bcc.n	8001c8c <OD_getSub+0xf0>
            }
        }
        if (odo == NULL) return ODR_SUB_NOT_EXIST;
 8001cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <OD_getSub+0x140>
 8001cd8:	230e      	movs	r3, #14
 8001cda:	e043      	b.n	8001d64 <OD_getSub+0x1c8>

        stream->attribute = odo->attribute;
 8001cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cde:	795a      	ldrb	r2, [r3, #5]
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8001ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8001cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	609a      	str	r2, [r3, #8]
        break;
 8001cf4:	e001      	b.n	8001cfa <OD_getSub+0x15e>
    }
    default: {
        return ODR_DEV_INCOMPAT;
 8001cf6:	2309      	movs	r3, #9
 8001cf8:	e034      	b.n	8001d64 <OD_getSub+0x1c8>
    }
    }

    /* Access data from the original OD location */
    if (entry->extension == NULL || odOrig) {
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <OD_getSub+0x16c>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d009      	beq.n	8001d1c <OD_getSub+0x180>
        io->read = OD_readOriginal;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <OD_getSub+0x1d4>)
 8001d0c:	615a      	str	r2, [r3, #20]
        io->write = OD_writeOriginal;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a18      	ldr	r2, [pc, #96]	; (8001d74 <OD_getSub+0x1d8>)
 8001d12:	619a      	str	r2, [r3, #24]
        stream->object = NULL;
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	2200      	movs	r2, #0
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	e01c      	b.n	8001d56 <OD_getSub+0x1ba>
    }
    /* Access data from extension specified by application */
    else {
        io->read = entry->extension->read != NULL ?
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	685b      	ldr	r3, [r3, #4]
                   entry->extension->read : OD_readDisabled;
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <OD_getSub+0x192>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	e000      	b.n	8001d30 <OD_getSub+0x194>
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <OD_getSub+0x1dc>)
        io->read = entry->extension->read != NULL ?
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6153      	str	r3, [r2, #20]
        io->write = entry->extension->write != NULL ?
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	689b      	ldr	r3, [r3, #8]
                    entry->extension->write : OD_writeDisabled;
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <OD_getSub+0x1aa>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	e000      	b.n	8001d48 <OD_getSub+0x1ac>
 8001d46:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <OD_getSub+0x1e0>)
        io->write = entry->extension->write != NULL ?
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6193      	str	r3, [r2, #24]
        stream->object = entry->extension->object;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	605a      	str	r2, [r3, #4]
    }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	2200      	movs	r2, #0
 8001d5a:	60da      	str	r2, [r3, #12]
    stream->subIndex = subIndex;
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	7afa      	ldrb	r2, [r7, #11]
 8001d60:	745a      	strb	r2, [r3, #17]

    return ODR_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3734      	adds	r7, #52	; 0x34
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	08001941 	.word	0x08001941
 8001d74:	080019f1 	.word	0x080019f1
 8001d78:	08001aad 	.word	0x08001aad
 8001d7c:	08001ac9 	.word	0x08001ac9

08001d80 <OD_getSDOabCode>:

/******************************************************************************/
uint32_t OD_getSDOabCode(ODR_t returnCode) {
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	db03      	blt.n	8001d9a <OD_getSDOabCode+0x1a>
    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	2b19      	cmp	r3, #25
 8001d98:	dd02      	ble.n	8001da0 <OD_getSDOabCode+0x20>
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <OD_getSDOabCode+0x38>)
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	e004      	b.n	8001daa <OD_getSDOabCode+0x2a>
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <OD_getSDOabCode+0x38>)
 8001da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	0800cc30 	.word	0x0800cc30

08001dbc <OD_get_value>:


/******************************************************************************/
ODR_t OD_get_value(const OD_entry_t *entry, uint8_t subIndex,
                   void *val, OD_size_t len, bool_t odOrig)
{
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b08f      	sub	sp, #60	; 0x3c
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) return ODR_DEV_INCOMPAT;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <OD_get_value+0x1a>
 8001dd2:	2309      	movs	r3, #9
 8001dd4:	e024      	b.n	8001e20 <OD_get_value+0x64>

    OD_IO_t io;
    OD_stream_t *stream = (OD_stream_t *)&io;
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countRd = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001de0:	f107 0214 	add.w	r2, r7, #20
 8001de4:	7af9      	ldrb	r1, [r7, #11]
 8001de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f7ff fed7 	bl	8001b9c <OD_getSub>
 8001dee:	4603      	mov	r3, r0
 8001df0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (ret != ODR_OK) return ret;
 8001df4:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <OD_get_value+0x46>
 8001dfc:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001e00:	e00e      	b.n	8001e20 <OD_get_value+0x64>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8001e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d001      	beq.n	8001e10 <OD_get_value+0x54>
 8001e0c:	230b      	movs	r3, #11
 8001e0e:	e007      	b.n	8001e20 <OD_get_value+0x64>

    return io.read(stream, val, len, &countRd);
 8001e10:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001e12:	f107 0310 	add.w	r3, r7, #16
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e1c:	47a0      	blx	r4
 8001e1e:	4603      	mov	r3, r0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	373c      	adds	r7, #60	; 0x3c
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd90      	pop	{r4, r7, pc}

08001e28 <OD_set_value>:

ODR_t OD_set_value(const OD_entry_t *entry, uint8_t subIndex, void *val,
                   OD_size_t len, bool_t odOrig)
{
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b08f      	sub	sp, #60	; 0x3c
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	460b      	mov	r3, r1
 8001e36:	72fb      	strb	r3, [r7, #11]
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countWritten = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001e42:	f107 0214 	add.w	r2, r7, #20
 8001e46:	7af9      	ldrb	r1, [r7, #11]
 8001e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f7ff fea6 	bl	8001b9c <OD_getSub>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (ret != ODR_OK) return ret;
 8001e56:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <OD_set_value+0x3c>
 8001e5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001e62:	e00e      	b.n	8001e82 <OD_set_value+0x5a>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8001e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d001      	beq.n	8001e72 <OD_set_value+0x4a>
 8001e6e:	230b      	movs	r3, #11
 8001e70:	e007      	b.n	8001e82 <OD_set_value+0x5a>

    return io.write(stream, val, len, &countWritten);
 8001e72:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001e74:	f107 0310 	add.w	r3, r7, #16
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e7e:	47a0      	blx	r4
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	373c      	adds	r7, #60	; 0x3c
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd90      	pop	{r4, r7, pc}

08001e8a <OD_getPtr>:

void *OD_getPtr(const OD_entry_t *entry, uint8_t subIndex, OD_size_t len,
                ODR_t *err)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b08e      	sub	sp, #56	; 0x38
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
 8001e96:	460b      	mov	r3, r1
 8001e98:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	633b      	str	r3, [r7, #48]	; 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8001ea0:	f107 0214 	add.w	r2, r7, #20
 8001ea4:	7af9      	ldrb	r1, [r7, #11]
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f7ff fe77 	bl	8001b9c <OD_getSub>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (errCopy == ODR_OK) {
 8001eb4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d116      	bne.n	8001eea <OD_getPtr+0x60>
        if (stream->dataOrig == NULL || stream->dataLength == 0) {
 8001ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <OD_getPtr+0x42>
 8001ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d103      	bne.n	8001ed4 <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 8001ecc:	2309      	movs	r3, #9
 8001ece:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001ed2:	e00a      	b.n	8001eea <OD_getPtr+0x60>
        }
        else if (len != 0 && len != stream->dataLength) {
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d007      	beq.n	8001eea <OD_getPtr+0x60>
 8001eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d002      	beq.n	8001eea <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 8001ee4:	230b      	movs	r3, #11
 8001ee6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if (err != NULL) *err = errCopy;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <OD_getPtr+0x6e>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001ef6:	701a      	strb	r2, [r3, #0]

    return errCopy == ODR_OK ? stream->dataOrig : NULL;
 8001ef8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <OD_getPtr+0x7c>
 8001f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	e000      	b.n	8001f08 <OD_getPtr+0x7e>
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3738      	adds	r7, #56	; 0x38
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8001f1c:	73fb      	strb	r3, [r7, #15]
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8001f3a:	81fb      	strh	r3, [r7, #14]
 8001f3c:	89fb      	ldrh	r3, [r7, #14]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8001f4a:	b480      	push	{r7}
 8001f4c:	b085      	sub	sp, #20
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <CO_setUint32>:
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
 8001f70:	683a      	ldr	r2, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	2304      	movs	r3, #4
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <OD_getIndex+0x14>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	e000      	b.n	8001f9a <OD_getIndex+0x16>
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <OD_extension_init>:
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <OD_extension_init+0x14>
 8001fb6:	2305      	movs	r3, #5
 8001fb8:	e003      	b.n	8001fc2 <OD_extension_init+0x1c>
    entry->extension = extension;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <OD_get_u8>:
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af02      	add	r7, sp, #8
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001fde:	7af9      	ldrb	r1, [r7, #11]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f7ff fee7 	bl	8001dbc <OD_get_value>
 8001fee:	4603      	mov	r3, r0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <OD_get_u16>:
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af02      	add	r7, sp, #8
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	460b      	mov	r3, r1
 8002006:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002008:	7af9      	ldrb	r1, [r7, #11]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	2302      	movs	r3, #2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f7ff fed2 	bl	8001dbc <OD_get_value>
 8002018:	4603      	mov	r3, r0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <OD_get_u32>:
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af02      	add	r7, sp, #8
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	460b      	mov	r3, r1
 8002030:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002032:	7af9      	ldrb	r1, [r7, #11]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	2304      	movs	r3, #4
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f7ff febd 	bl	8001dbc <OD_get_value>
 8002042:	4603      	mov	r3, r0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <OD_write_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_dummy(OD_stream_t *stream, const void *buf,
                            OD_size_t count, OD_size_t *countWritten)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf;
    if (countWritten != NULL) *countWritten = count;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <OD_write_dummy+0x1a>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <OD_read_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_dummy(OD_stream_t *stream, void *buf,
                           OD_size_t count, OD_size_t *countRead)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	603b      	str	r3, [r7, #0]
    if (buf == NULL || stream == NULL || countRead == NULL) {
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <OD_read_dummy+0x20>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <OD_read_dummy+0x20>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8002094:	2309      	movs	r3, #9
 8002096:	e010      	b.n	80020ba <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d902      	bls.n	80020a8 <OD_read_dummy+0x34>
        count = stream->dataLength;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	607b      	str	r3, [r7, #4]
    }

    memset(buf, 0, count);
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	2100      	movs	r1, #0
 80020ac:	68b8      	ldr	r0, [r7, #8]
 80020ae:	f00a f893 	bl	800c1d8 <memset>

    *countRead = count;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <PDOconfigMap>:
static ODR_t PDOconfigMap(CO_PDO_common_t *PDO,
                          uint32_t map,
                          uint8_t mapIndex,
                          bool_t isRPDO,
                          OD_t *OD)
{
 80020c4:	b5b0      	push	{r4, r5, r7, lr}
 80020c6:	b092      	sub	sp, #72	; 0x48
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	4613      	mov	r3, r2
 80020d2:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t) (map >> 16);
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	0c1b      	lsrs	r3, r3, #16
 80020d8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    uint8_t subIndex = (uint8_t) (map >> 8);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	0a1b      	lsrs	r3, r3, #8
 80020e0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t mappedLengthBits = (uint8_t) map;
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 80020ea:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80020ee:	08db      	lsrs	r3, r3, #3
 80020f0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    OD_IO_t *OD_IO = &PDO->OD_IO[mapIndex];
 80020f4:	79fa      	ldrb	r2, [r7, #7]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	3310      	adds	r3, #16
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 8002106:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800210a:	2b08      	cmp	r3, #8
 800210c:	d901      	bls.n	8002112 <PDOconfigMap+0x4e>
        return ODR_MAP_LEN; /* PDO length exceeded */
 800210e:	2307      	movs	r3, #7
 8002110:	e090      	b.n	8002234 <PDOconfigMap+0x170>
    }

    /* is there a reference to the dummy entry */
    if (index < 0x20 && subIndex == 0) {
 8002112:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002116:	2b1f      	cmp	r3, #31
 8002118:	d81a      	bhi.n	8002150 <PDOconfigMap+0x8c>
 800211a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800211e:	2b00      	cmp	r3, #0
 8002120:	d116      	bne.n	8002150 <PDOconfigMap+0x8c>
        OD_stream_t *stream = &OD_IO->stream;
 8002122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002124:	63bb      	str	r3, [r7, #56]	; 0x38
        memset(stream, 0, sizeof(OD_stream_t));
 8002126:	2214      	movs	r2, #20
 8002128:	2100      	movs	r1, #0
 800212a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800212c:	f00a f854 	bl	800c1d8 <memset>
        stream->dataLength = stream->dataOffset = mappedLength;
 8002130:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002136:	60da      	str	r2, [r3, #12]
 8002138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213e:	609a      	str	r2, [r3, #8]
        OD_IO->read = OD_read_dummy;
 8002140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002142:	4a3e      	ldr	r2, [pc, #248]	; (800223c <PDOconfigMap+0x178>)
 8002144:	615a      	str	r2, [r3, #20]
        OD_IO->write = OD_write_dummy;
 8002146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002148:	4a3d      	ldr	r2, [pc, #244]	; (8002240 <PDOconfigMap+0x17c>)
 800214a:	619a      	str	r2, [r3, #24]
        return ODR_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	e071      	b.n	8002234 <PDOconfigMap+0x170>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t *entry = OD_find(OD, index);
 8002150:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002154:	4619      	mov	r1, r3
 8002156:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002158:	f7ff fcc4 	bl	8001ae4 <OD_find>
 800215c:	6378      	str	r0, [r7, #52]	; 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 800215e:	f107 0214 	add.w	r2, r7, #20
 8002162:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 8002166:	2300      	movs	r3, #0
 8002168:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800216a:	f7ff fd17 	bl	8001b9c <OD_getSub>
 800216e:	4603      	mov	r3, r0
 8002170:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (odRet != ODR_OK) {
 8002174:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <PDOconfigMap+0xbe>
        return odRet;
 800217c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002180:	e058      	b.n	8002234 <PDOconfigMap+0x170>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? ODA_RPDO : ODA_TPDO;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <PDOconfigMap+0xc8>
 8002188:	2308      	movs	r3, #8
 800218a:	e000      	b.n	800218e <PDOconfigMap+0xca>
 800218c:	2304      	movs	r3, #4
 800218e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if ((OD_IOcopy.stream.attribute & testAttribute) == 0
 8002192:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002196:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800219a:	4013      	ands	r3, r2
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <PDOconfigMap+0xf4>
        || (mappedLengthBits & 0x07) != 0
 80021a2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d104      	bne.n	80021b8 <PDOconfigMap+0xf4>
        || OD_IOcopy.stream.dataLength < mappedLength
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d201      	bcs.n	80021bc <PDOconfigMap+0xf8>
    ) {
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 80021b8:	2306      	movs	r3, #6
 80021ba:	e03b      	b.n	8002234 <PDOconfigMap+0x170>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 80021bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021be:	461d      	mov	r5, r3
 80021c0:	f107 0414 	add.w	r4, r7, #20
 80021c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80021cc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    OD_IO->stream.dataOffset = mappedLength;
 80021d0:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80021d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021d6:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d129      	bne.n	8002232 <PDOconfigMap+0x16e>
        if (subIndex < (OD_FLAGS_PDO_SIZE * 8) && entry->extension != NULL) {
 80021de:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80021e2:	2b1f      	cmp	r3, #31
 80021e4:	d81f      	bhi.n	8002226 <PDOconfigMap+0x162>
 80021e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d01b      	beq.n	8002226 <PDOconfigMap+0x162>
            PDO->flagPDObyte[mapIndex] =
                    &entry->extension->flagsPDO[subIndex >> 3];
 80021ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f0:	6899      	ldr	r1, [r3, #8]
 80021f2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80021f6:	08db      	lsrs	r3, r3, #3
 80021f8:	b2db      	uxtb	r3, r3
            PDO->flagPDObyte[mapIndex] =
 80021fa:	79fa      	ldrb	r2, [r7, #7]
                    &entry->extension->flagsPDO[subIndex >> 3];
 80021fc:	3308      	adds	r3, #8
 80021fe:	440b      	add	r3, r1
 8002200:	1d19      	adds	r1, r3, #4
            PDO->flagPDObyte[mapIndex] =
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	323c      	adds	r2, #60	; 0x3c
 8002206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1 << (subIndex & 0x07);
 800220a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	2201      	movs	r2, #1
 8002214:	409a      	lsls	r2, r3
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	b2d1      	uxtb	r1, r2
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4413      	add	r3, r2
 800221e:	460a      	mov	r2, r1
 8002220:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8002224:	e005      	b.n	8002232 <PDOconfigMap+0x16e>
        }
        else {
            PDO->flagPDObyte[mapIndex] = NULL;
 8002226:	79fa      	ldrb	r2, [r7, #7]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	323c      	adds	r2, #60	; 0x3c
 800222c:	2100      	movs	r1, #0
 800222e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3748      	adds	r7, #72	; 0x48
 8002238:	46bd      	mov	sp, r7
 800223a:	bdb0      	pop	{r4, r5, r7, pc}
 800223c:	08002075 	.word	0x08002075
 8002240:	0800204d 	.word	0x0800204d

08002244 <PDO_initMapping>:
                                        OD_t *OD,
                                        OD_entry_t *OD_PDOMapPar,
                                        bool_t isRPDO,
                                        uint32_t *errInfo,
                                        uint32_t *erroneousMap)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08c      	sub	sp, #48	; 0x30
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t mappedObjectsCount = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 800225a:	f107 021b 	add.w	r2, r7, #27
 800225e:	2301      	movs	r3, #1
 8002260:	2100      	movs	r1, #0
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff feb3 	bl	8001fce <OD_get_u8>
 8002268:	4603      	mov	r3, r0
 800226a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 800226e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00c      	beq.n	8002290 <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 8002276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002278:	2b00      	cmp	r3, #0
 800227a:	d006      	beq.n	800228a <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff fe81 	bl	8001f84 <OD_getIndex>
 8002282:	4603      	mov	r3, r0
 8002284:	021a      	lsls	r2, r3, #8
 8002286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002288:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800228a:	f06f 030b 	mvn.w	r3, #11
 800228e:	e082      	b.n	8002396 <PDO_initMapping+0x152>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002290:	2300      	movs	r3, #0
 8002292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002296:	e05e      	b.n	8002356 <PDO_initMapping+0x112>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002298:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	1a9b      	subs	r3, r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	3310      	adds	r3, #16
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4413      	add	r3, r2
 80022aa:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1, &map, true);
 80022b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022b4:	3301      	adds	r3, #1
 80022b6:	b2d9      	uxtb	r1, r3
 80022b8:	f107 0214 	add.w	r2, r7, #20
 80022bc:	2301      	movs	r3, #1
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff feaf 	bl	8002022 <OD_get_u32>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 80022ca:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80022ce:	2b0e      	cmp	r3, #14
 80022d0:	d03b      	beq.n	800234a <PDO_initMapping+0x106>
            continue;
        }
        if (odRet != ODR_OK) {
 80022d2:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00f      	beq.n	80022fa <PDO_initMapping+0xb6>
            if (errInfo != NULL) {
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <PDO_initMapping+0xb0>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar))<<8) | i;
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7ff fe4f 	bl	8001f84 <OD_getIndex>
 80022e6:	4603      	mov	r3, r0
 80022e8:	021a      	lsls	r2, r3, #8
 80022ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022ee:	431a      	orrs	r2, r3
 80022f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f2:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 80022f4:	f06f 030b 	mvn.w	r3, #11
 80022f8:	e04d      	b.n	8002396 <PDO_initMapping+0x152>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 80022fa:	6979      	ldr	r1, [r7, #20]
 80022fc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff fedc 	bl	80020c4 <PDOconfigMap>
 800230c:	4603      	mov	r3, r0
 800230e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet != ODR_OK) {
 8002312:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00c      	beq.n	8002334 <PDO_initMapping+0xf0>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	22ff      	movs	r2, #255	; 0xff
 8002324:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0) *erroneousMap = map;
 8002326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d102      	bne.n	8002334 <PDO_initMapping+0xf0>
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002332:	601a      	str	r2, [r3, #0]
        }

        if (i < mappedObjectsCount) {
 8002334:	7efb      	ldrb	r3, [r7, #27]
 8002336:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800233a:	429a      	cmp	r2, r3
 800233c:	d206      	bcs.n	800234c <PDO_initMapping+0x108>
            pdoDataLength += OD_IO->stream.dataOffset;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002344:	4413      	add	r3, r2
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
 8002348:	e000      	b.n	800234c <PDO_initMapping+0x108>
            continue;
 800234a:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 800234c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002350:	3301      	adds	r3, #1
 8002352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002356:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800235a:	2b07      	cmp	r3, #7
 800235c:	d99c      	bls.n	8002298 <PDO_initMapping+0x54>
        }
    }
    if (pdoDataLength > CO_PDO_MAX_SIZE
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	2b08      	cmp	r3, #8
 8002362:	d805      	bhi.n	8002370 <PDO_initMapping+0x12c>
        || (pdoDataLength == 0 && mappedObjectsCount > 0)
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	2b00      	cmp	r3, #0
 8002368:	d109      	bne.n	800237e <PDO_initMapping+0x13a>
 800236a:	7efb      	ldrb	r3, [r7, #27]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d006      	beq.n	800237e <PDO_initMapping+0x13a>
    ) {
        if (*erroneousMap == 0) *erroneousMap = 1;
 8002370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <PDO_initMapping+0x13a>
 8002378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]
    }

    if (*erroneousMap == 0) {
 800237e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <PDO_initMapping+0x150>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	b2da      	uxtb	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 800238e:	7efa      	ldrb	r2, [r7, #27]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3728      	adds	r7, #40	; 0x28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <OD_write_PDO_mapping>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_PDO_mapping(OD_stream_t *stream, const void *buf,
                                  OD_size_t count, OD_size_t *countWritten)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b08e      	sub	sp, #56	; 0x38
 80023a2:	af02      	add	r7, sp, #8
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <OD_write_PDO_mapping+0x28>
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d006      	beq.n	80023c6 <OD_write_PDO_mapping+0x28>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <OD_write_PDO_mapping+0x28>
        || stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	7c5b      	ldrb	r3, [r3, #17]
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d901      	bls.n	80023ca <OD_write_PDO_mapping+0x2c>
    ) {
        return ODR_DEV_INCOMPAT;
 80023c6:	2309      	movs	r3, #9
 80023c8:	e086      	b.n	80024d8 <OD_write_PDO_mapping+0x13a>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t *PDO = stream->object;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24

    /* PDO must be disabled before mapping configuration */
    if (PDO->valid || (PDO->mappedObjectsCount != 0 && stream->subIndex > 0)) {
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d107      	bne.n	80023e8 <OD_write_PDO_mapping+0x4a>
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	7b5b      	ldrb	r3, [r3, #13]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <OD_write_PDO_mapping+0x4e>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	7c5b      	ldrb	r3, [r3, #17]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 80023e8:	2302      	movs	r3, #2
 80023ea:	e075      	b.n	80024d8 <OD_write_PDO_mapping+0x13a>
    }

    if (stream->subIndex == 0) {
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	7c5b      	ldrb	r3, [r3, #17]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d14d      	bne.n	8002490 <OD_write_PDO_mapping+0xf2>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 80023f4:	68b8      	ldr	r0, [r7, #8]
 80023f6:	f7ff fd8b 	bl	8001f10 <CO_getUint8>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        size_t pdoDataLength = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8002404:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002408:	2b08      	cmp	r3, #8
 800240a:	d901      	bls.n	8002410 <OD_write_PDO_mapping+0x72>
            return ODR_MAP_LEN;
 800240c:	2307      	movs	r3, #7
 800240e:	e063      	b.n	80024d8 <OD_write_PDO_mapping+0x13a>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002410:	2300      	movs	r3, #0
 8002412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002416:	e01e      	b.n	8002456 <OD_write_PDO_mapping+0xb8>
            OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002418:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	3310      	adds	r3, #16
 8002426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002428:	4413      	add	r3, r2
 800242a:	61fb      	str	r3, [r7, #28]
            size_t dataLength = (size_t) OD_IO->stream.dataLength;
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	61bb      	str	r3, [r7, #24]
            size_t mappedLength = (size_t) OD_IO->stream.dataOffset;
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	617b      	str	r3, [r7, #20]

            if (mappedLength > dataLength) {
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	429a      	cmp	r2, r3
 800243e:	d901      	bls.n	8002444 <OD_write_PDO_mapping+0xa6>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 8002440:	2306      	movs	r3, #6
 8002442:	e049      	b.n	80024d8 <OD_write_PDO_mapping+0x13a>
            }
            pdoDataLength += mappedLength;
 8002444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	4413      	add	r3, r2
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 800244c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002450:	3301      	adds	r3, #1
 8002452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002456:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800245a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800245e:	429a      	cmp	r2, r3
 8002460:	d3da      	bcc.n	8002418 <OD_write_PDO_mapping+0x7a>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 8002462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002464:	2b08      	cmp	r3, #8
 8002466:	d901      	bls.n	800246c <OD_write_PDO_mapping+0xce>
            return ODR_MAP_LEN;
 8002468:	2307      	movs	r3, #7
 800246a:	e035      	b.n	80024d8 <OD_write_PDO_mapping+0x13a>
        }
        if (pdoDataLength == 0 && mappedObjectsCount > 0) {
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	2b00      	cmp	r3, #0
 8002470:	d105      	bne.n	800247e <OD_write_PDO_mapping+0xe0>
 8002472:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <OD_write_PDO_mapping+0xe0>
            return ODR_INVALID_VALUE;
 800247a:	230f      	movs	r3, #15
 800247c:	e02c      	b.n	80024d8 <OD_write_PDO_mapping+0x13a>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 800247e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002480:	b2da      	uxtb	r2, r3
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800248c:	735a      	strb	r2, [r3, #13]
 800248e:	e01c      	b.n	80024ca <OD_write_PDO_mapping+0x12c>
    }
    else {
        ODR_t odRet = PDOconfigMap(PDO, CO_getUint32(buf), stream->subIndex-1,
 8002490:	68b8      	ldr	r0, [r7, #8]
 8002492:	f7ff fd5a 	bl	8001f4a <CO_getUint32>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	7c5b      	ldrb	r3, [r3, #17]
 800249a:	3b01      	subs	r3, #1
 800249c:	b2da      	uxtb	r2, r3
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	460b      	mov	r3, r1
 80024ae:	4601      	mov	r1, r0
 80024b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024b2:	f7ff fe07 	bl	80020c4 <PDOconfigMap>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                   PDO->isRPDO, PDO->OD);
        if (odRet != ODR_OK) {
 80024bc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <OD_write_PDO_mapping+0x12c>
            return odRet;
 80024c4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80024c8:	e006      	b.n	80024d8 <OD_write_PDO_mapping+0x13a>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	68b9      	ldr	r1, [r7, #8]
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff fa8d 	bl	80019f0 <OD_writeOriginal>
 80024d6:	4603      	mov	r3, r0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3730      	adds	r7, #48	; 0x30
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <OD_read_PDO_commParam>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_PDO_commParam(OD_stream_t *stream, void *buf,
                                   OD_size_t count, OD_size_t *countRead)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	68b9      	ldr	r1, [r7, #8]
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f7ff fa23 	bl	8001940 <OD_readOriginal>
 80024fa:	4603      	mov	r3, r0
 80024fc:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if (returnCode == ODR_OK && stream->subIndex == 1 && *countRead == 4) {
 80024fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d134      	bne.n	8002570 <OD_read_PDO_commParam+0x90>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	7c5b      	ldrb	r3, [r3, #17]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d130      	bne.n	8002570 <OD_read_PDO_commParam+0x90>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b04      	cmp	r3, #4
 8002514:	d12c      	bne.n	8002570 <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t *PDO = stream->object;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 800251c:	68b8      	ldr	r0, [r7, #8]
 800251e:	f7ff fd14 	bl	8001f4a <CO_getUint32>
 8002522:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	b29b      	uxth	r3, r3
 8002528:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800252c:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if (CAN_ID != 0 && CAN_ID == (PDO->preDefinedCanId & 0xFF80)) {
 800252e:	8a7b      	ldrh	r3, [r7, #18]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d011      	beq.n	8002558 <OD_read_PDO_commParam+0x78>
 8002534:	8a7a      	ldrh	r2, [r7, #18]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 800253c:	4619      	mov	r1, r3
 800253e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002542:	400b      	ands	r3, r1
 8002544:	429a      	cmp	r2, r3
 8002546:	d107      	bne.n	8002558 <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000) | PDO->preDefinedCanId;
 8002548:	69fa      	ldr	r2, [r7, #28]
 800254a:	4b0c      	ldr	r3, [pc, #48]	; (800257c <OD_read_PDO_commParam+0x9c>)
 800254c:	4013      	ands	r3, r2
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	f8b2 2122 	ldrh.w	r2, [r2, #290]	; 0x122
 8002554:	4313      	orrs	r3, r2
 8002556:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) COB_ID |= 0x80000000;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d103      	bne.n	8002568 <OD_read_PDO_commParam+0x88>
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002566:	61fb      	str	r3, [r7, #28]

        CO_setUint32(buf, COB_ID);
 8002568:	69f9      	ldr	r1, [r7, #28]
 800256a:	68b8      	ldr	r0, [r7, #8]
 800256c:	f7ff fcfb 	bl	8001f66 <CO_setUint32>
    }

    return returnCode;
 8002570:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3720      	adds	r7, #32
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	ffff0000 	.word	0xffff0000

08002580 <CO_PDO_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by the new message.
 */
static void CO_PDO_receive(void *object, void *msg) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO = object;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	61bb      	str	r3, [r7, #24]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	791b      	ldrb	r3, [r3, #4]
 8002596:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	3305      	adds	r3, #5
 800259c:	60fb      	str	r3, [r7, #12]
    uint8_t err = RPDO->receiveError;
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80025a4:	77fb      	strb	r3, [r7, #31]

    if (PDO->valid) {
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d03e      	beq.n	800262c <CO_PDO_receive+0xac>
        if (DLC >= PDO->dataLength) {
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	7b1b      	ldrb	r3, [r3, #12]
 80025b2:	7cfa      	ldrb	r2, [r7, #19]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d334      	bcc.n	8002622 <CO_PDO_receive+0xa2>
            /* indicate errors in PDO length */
            if (DLC == PDO->dataLength) {
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	7b1b      	ldrb	r3, [r3, #12]
 80025bc:	7cfa      	ldrb	r2, [r7, #19]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d105      	bne.n	80025ce <CO_PDO_receive+0x4e>
                if (err == CO_RPDO_RX_ACK_ERROR) err = CO_RPDO_RX_OK;
 80025c2:	7ffb      	ldrb	r3, [r7, #31]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d107      	bne.n	80025d8 <CO_PDO_receive+0x58>
 80025c8:	230b      	movs	r3, #11
 80025ca:	77fb      	strb	r3, [r7, #31]
 80025cc:	e004      	b.n	80025d8 <CO_PDO_receive+0x58>
            }
            else {
                if (err == CO_RPDO_RX_ACK_NO_ERROR) err = CO_RPDO_RX_LONG;
 80025ce:	7ffb      	ldrb	r3, [r7, #31]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <CO_PDO_receive+0x58>
 80025d4:	230d      	movs	r3, #13
 80025d6:	77fb      	strb	r3, [r7, #31]
            }

            /* Determine, to which of the two rx buffers copy the message. */
            uint8_t bufNo = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	77bb      	strb	r3, [r7, #30]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
            if (RPDO->synchronous && RPDO->SYNC != NULL
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00c      	beq.n	8002600 <CO_PDO_receive+0x80>
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <CO_PDO_receive+0x80>
                && RPDO->SYNC->CANrxToggle
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <CO_PDO_receive+0x80>
            ) {
                bufNo = 1;
 80025fc:	2301      	movs	r3, #1
 80025fe:	77bb      	strb	r3, [r7, #30]
            }
#endif

            /* copy data into appropriate buffer and set 'new message' flag */
            memcpy(RPDO->CANrxData[bufNo], data,sizeof(RPDO->CANrxData[bufNo]));
 8002600:	7fbb      	ldrb	r3, [r7, #30]
 8002602:	332a      	adds	r3, #42	; 0x2a
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4413      	add	r3, r2
 800260a:	2208      	movs	r2, #8
 800260c:	68f9      	ldr	r1, [r7, #12]
 800260e:	4618      	mov	r0, r3
 8002610:	f009 fe6c 	bl	800c2ec <memcpy>
            CO_FLAG_SET(RPDO->CANrxNew[bufNo]);
 8002614:	7fba      	ldrb	r2, [r7, #30]
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	3252      	adds	r2, #82	; 0x52
 800261a:	2101      	movs	r1, #1
 800261c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002620:	e004      	b.n	800262c <CO_PDO_receive+0xac>
            if (RPDO->pFunctSignalPre != NULL) {
                RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
            }
#endif
        }
        else if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 8002622:	7ffb      	ldrb	r3, [r7, #31]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <CO_PDO_receive+0xac>
            err = CO_RPDO_RX_SHORT;
 8002628:	230c      	movs	r3, #12
 800262a:	77fb      	strb	r3, [r7, #31]
        }
    }

    RPDO->receiveError = err;
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	7ffa      	ldrb	r2, [r7, #31]
 8002630:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
}
 8002634:	bf00      	nop
 8002636:	3720      	adds	r7, #32
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <OD_write_14xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_14xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b092      	sub	sp, #72	; 0x48
 8002640:	af04      	add	r7, sp, #16
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <OD_write_14xx+0x26>
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <OD_write_14xx+0x26>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <OD_write_14xx+0x26>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b04      	cmp	r3, #4
 8002660:	d901      	bls.n	8002666 <OD_write_14xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8002662:	2309      	movs	r3, #9
 8002664:	e0ff      	b.n	8002866 <OD_write_14xx+0x22a>
    }

    CO_RPDO_t *RPDO = stream->object;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	633b      	str	r3, [r7, #48]	; 0x30
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 800266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 8002670:	f107 0310 	add.w	r3, r7, #16
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	68b9      	ldr	r1, [r7, #8]
 8002678:	4618      	mov	r0, r3
 800267a:	f009 fe37 	bl	800c2ec <memcpy>

    switch (stream->subIndex) {
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	7c5b      	ldrb	r3, [r3, #17]
 8002682:	2b05      	cmp	r3, #5
 8002684:	f000 80d4 	beq.w	8002830 <OD_write_14xx+0x1f4>
 8002688:	2b05      	cmp	r3, #5
 800268a:	f300 80e4 	bgt.w	8002856 <OD_write_14xx+0x21a>
 800268e:	2b01      	cmp	r3, #1
 8002690:	d003      	beq.n	800269a <OD_write_14xx+0x5e>
 8002692:	2b02      	cmp	r3, #2
 8002694:	f000 80a5 	beq.w	80027e2 <OD_write_14xx+0x1a6>
 8002698:	e0dd      	b.n	8002856 <OD_write_14xx+0x21a>
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 800269a:	68b8      	ldr	r0, [r7, #8]
 800269c:	f7ff fc55 	bl	8001f4a <CO_getUint32>
 80026a0:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026aa:	86fb      	strh	r3, [r7, #54]	; 0x36
        bool_t valid = (COB_ID & 0x80000000) == 0;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	0fdb      	lsrs	r3, r3, #31
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	61bb      	str	r3, [r7, #24]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	4b6d      	ldr	r3, [pc, #436]	; (8002870 <OD_write_14xx+0x234>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d13d      	bne.n	800273c <OD_write_14xx+0x100>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d009      	beq.n	80026da <OD_write_14xx+0x9e>
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <OD_write_14xx+0x9e>
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 80026d4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d130      	bne.n	800273c <OD_write_14xx+0x100>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d026      	beq.n	800272e <OD_write_14xx+0xf2>
 80026e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026e2:	2b7f      	cmp	r3, #127	; 0x7f
 80026e4:	d92a      	bls.n	800273c <OD_write_14xx+0x100>
 80026e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ec:	d903      	bls.n	80026f6 <OD_write_14xx+0xba>
 80026ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026f0:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80026f4:	d922      	bls.n	800273c <OD_write_14xx+0x100>
 80026f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026f8:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80026fc:	d903      	bls.n	8002706 <OD_write_14xx+0xca>
 80026fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002700:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002704:	d31a      	bcc.n	800273c <OD_write_14xx+0x100>
 8002706:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002708:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800270c:	d903      	bls.n	8002716 <OD_write_14xx+0xda>
 800270e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002710:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8002714:	d312      	bcc.n	800273c <OD_write_14xx+0x100>
 8002716:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002718:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 800271c:	d303      	bcc.n	8002726 <OD_write_14xx+0xea>
 800271e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002720:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002724:	d30a      	bcc.n	800273c <OD_write_14xx+0x100>
 8002726:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002728:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800272c:	d806      	bhi.n	800273c <OD_write_14xx+0x100>
            || (valid && PDO->mappedObjectsCount == 0)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <OD_write_14xx+0x104>
 8002734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002736:	7b5b      	ldrb	r3, [r3, #13]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <OD_write_14xx+0x104>
        ) {
            return ODR_INVALID_VALUE;
 800273c:	230f      	movs	r3, #15
 800273e:	e092      	b.n	8002866 <OD_write_14xx+0x22a>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	429a      	cmp	r2, r3
 8002748:	d105      	bne.n	8002756 <OD_write_14xx+0x11a>
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8002750:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002752:	429a      	cmp	r2, r3
 8002754:	d07e      	beq.n	8002854 <OD_write_14xx+0x218>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 8002756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002758:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 800275c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800275e:	429a      	cmp	r2, r3
 8002760:	d108      	bne.n	8002774 <OD_write_14xx+0x138>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8002768:	f107 0310 	add.w	r3, r7, #16
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fbf9 	bl	8001f66 <CO_setUint32>
            }
            if (!valid) {
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <OD_write_14xx+0x142>
                CAN_ID = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	86fb      	strh	r3, [r7, #54]	; 0x36
            }

            CO_ReturnError_t ret = CO_CANrxBufferInit(
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	6858      	ldr	r0, [r3, #4]
 8002782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002784:	f8b3 1120 	ldrh.w	r1, [r3, #288]	; 0x120
 8002788:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800278a:	4b3a      	ldr	r3, [pc, #232]	; (8002874 <OD_write_14xx+0x238>)
 800278c:	9302      	str	r3, [sp, #8]
 800278e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	2300      	movs	r3, #0
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800279a:	f005 fc8b 	bl	80080b4 <CO_CANrxBufferInit>
 800279e:	4603      	mov	r3, r0
 80027a0:	75fb      	strb	r3, [r7, #23]
                    0x7FF,              /* mask */
                    0,                  /* rtr */
                    (void*)RPDO,        /* object passed to receive function */
                    CO_PDO_receive);    /* this function will process rx msg */

            if (valid && ret == CO_ERROR_NO) {
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00b      	beq.n	80027c0 <OD_write_14xx+0x184>
 80027a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d107      	bne.n	80027c0 <OD_write_14xx+0x184>
                PDO->valid = true;
 80027b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b2:	2201      	movs	r2, #1
 80027b4:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 80027b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80027ba:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
                if (ret != CO_ERROR_NO) {
                    return ODR_DEV_INCOMPAT;
                }
            }
        }
        break;
 80027be:	e049      	b.n	8002854 <OD_write_14xx+0x218>
                PDO->valid = false;
 80027c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
                CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 80027c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c8:	2200      	movs	r2, #0
 80027ca:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
                CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 80027ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d0:	2200      	movs	r2, #0
 80027d2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
                if (ret != CO_ERROR_NO) {
 80027d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d03a      	beq.n	8002854 <OD_write_14xx+0x218>
                    return ODR_DEV_INCOMPAT;
 80027de:	2309      	movs	r3, #9
 80027e0:	e041      	b.n	8002866 <OD_write_14xx+0x22a>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 80027e2:	68b8      	ldr	r0, [r7, #8]
 80027e4:	f7ff fb94 	bl	8001f10 <CO_getUint8>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 80027ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027f2:	2bf0      	cmp	r3, #240	; 0xf0
 80027f4:	d905      	bls.n	8002802 <OD_write_14xx+0x1c6>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 80027f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027fa:	2bfd      	cmp	r3, #253	; 0xfd
 80027fc:	d801      	bhi.n	8002802 <OD_write_14xx+0x1c6>
        ) {
            return ODR_INVALID_VALUE;
 80027fe:	230f      	movs	r3, #15
 8002800:	e031      	b.n	8002866 <OD_write_14xx+0x22a>
        }

        bool_t synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8002802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002806:	2bf0      	cmp	r3, #240	; 0xf0
 8002808:	bf94      	ite	ls
 800280a:	2301      	movls	r3, #1
 800280c:	2300      	movhi	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	623b      	str	r3, [r7, #32]
        /* Remove old message from the second buffer. */
        if (RPDO->synchronous != synchronous) {
 8002812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002814:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002818:	6a3a      	ldr	r2, [r7, #32]
 800281a:	429a      	cmp	r2, r3
 800281c:	d003      	beq.n	8002826 <OD_write_14xx+0x1ea>
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	2200      	movs	r2, #0
 8002822:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
        }

        RPDO->synchronous = synchronous;
 8002826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002828:	6a3a      	ldr	r2, [r7, #32]
 800282a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        break;
 800282e:	e012      	b.n	8002856 <OD_write_14xx+0x21a>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 8002830:	68b8      	ldr	r0, [r7, #8]
 8002832:	f7ff fb7b 	bl	8001f2c <CO_getUint16>
 8002836:	4603      	mov	r3, r0
 8002838:	62bb      	str	r3, [r7, #40]	; 0x28
        RPDO->timeoutTime_us = eventTime * 1000;
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002840:	fb03 f202 	mul.w	r2, r3, r2
 8002844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002846:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
        RPDO->timeoutTimer = 0;
 800284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284c:	2200      	movs	r2, #0
 800284e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        break;
 8002852:	e000      	b.n	8002856 <OD_write_14xx+0x21a>
        break;
 8002854:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8002856:	f107 0110 	add.w	r1, r7, #16
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f7ff f8c6 	bl	80019f0 <OD_writeOriginal>
 8002864:	4603      	mov	r3, r0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3738      	adds	r7, #56	; 0x38
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	3ffff800 	.word	0x3ffff800
 8002874:	08002581 	.word	0x08002581

08002878 <CO_RPDO_init>:
                              OD_entry_t *OD_14xx_RPDOCommPar,
                              OD_entry_t *OD_16xx_RPDOMapPar,
                              CO_CANmodule_t *CANdevRx,
                              uint16_t CANdevRxIdx,
                              uint32_t *errInfo)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b090      	sub	sp, #64	; 0x40
 800287c:	af04      	add	r7, sp, #16
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
    CO_ReturnError_t ret;
    ODR_t odRet;

    /* verify arguments */
    if (RPDO == NULL || OD == NULL || em == NULL || OD_14xx_RPDOCommPar == NULL
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00e      	beq.n	80028ae <CO_RPDO_init+0x36>
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00b      	beq.n	80028ae <CO_RPDO_init+0x36>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <CO_RPDO_init+0x36>
 800289c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <CO_RPDO_init+0x36>
        || OD_16xx_RPDOMapPar == NULL || CANdevRx == NULL
 80028a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <CO_RPDO_init+0x36>
 80028a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <CO_RPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295
 80028b2:	e118      	b.n	8002ae6 <CO_RPDO_init+0x26e>
    }

    /* clear object */
    memset(RPDO, 0, sizeof(CO_RPDO_t));
 80028b4:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80028b8:	2100      	movs	r1, #0
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f009 fc8c 	bl	800c1d8 <memset>

    /* Configure object variables */
    PDO->em = em;
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevRx;
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028ca:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61fb      	str	r3, [r7, #28]
    ret = PDO_initMapping(PDO,
 80028d0:	f107 031c 	add.w	r3, r7, #28
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	2301      	movs	r3, #1
 80028dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028de:	68b9      	ldr	r1, [r7, #8]
 80028e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028e2:	f7ff fcaf 	bl	8002244 <PDO_initMapping>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                          OD,
                          OD_16xx_RPDOMapPar,
                          true,
                          errInfo,
                          &erroneousMap);
    if (ret != CO_ERROR_NO) {
 80028ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <CO_RPDO_init+0x82>
        return ret;
 80028f4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80028f8:	e0f5      	b.n	8002ae6 <CO_RPDO_init+0x26e>
    }


    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
    odRet = OD_get_u32(OD_14xx_RPDOCommPar, 1, &COB_ID, true);
 80028fe:	f107 0218 	add.w	r2, r7, #24
 8002902:	2301      	movs	r3, #1
 8002904:	2101      	movs	r1, #1
 8002906:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002908:	f7ff fb8b 	bl	8002022 <OD_get_u32>
 800290c:	4603      	mov	r3, r0
 800290e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8002912:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00e      	beq.n	8002938 <CO_RPDO_init+0xc0>
        if (errInfo != NULL) {
 800291a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <CO_RPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 1;
 8002920:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002922:	f7ff fb2f 	bl	8001f84 <OD_getIndex>
 8002926:	4603      	mov	r3, r0
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	f043 0201 	orr.w	r2, r3, #1
 800292e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002930:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002932:	f06f 030b 	mvn.w	r3, #11
 8002936:	e0d6      	b.n	8002ae6 <CO_RPDO_init+0x26e>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	43db      	mvns	r3, r3
 800293c:	0fdb      	lsrs	r3, r3, #31
 800293e:	b2db      	uxtb	r3, r3
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	b29b      	uxth	r3, r3
 8002946:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800294a:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 800294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00d      	beq.n	800296e <CO_RPDO_init+0xf6>
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	7b5b      	ldrb	r3, [r3, #13]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <CO_RPDO_init+0xe8>
 800295a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800295c:	2b00      	cmp	r3, #0
 800295e:	d106      	bne.n	800296e <CO_RPDO_init+0xf6>
        valid = false;
 8002960:	2300      	movs	r3, #0
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <CO_RPDO_init+0xf6>
 800296a:	2301      	movs	r3, #1
 800296c:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00e      	beq.n	8002992 <CO_RPDO_init+0x11a>
        CO_errorReport(PDO->em,
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d001      	beq.n	8002982 <CO_RPDO_init+0x10a>
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	e000      	b.n	8002984 <CO_RPDO_init+0x10c>
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 800298a:	221a      	movs	r2, #26
 800298c:	2101      	movs	r1, #1
 800298e:	f7fe f995 	bl	8000cbc <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8002992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <CO_RPDO_init+0x124>
        CAN_ID = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 800299c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d008      	beq.n	80029b4 <CO_RPDO_init+0x13c>
 80029a2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80029a4:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80029a6:	f64f 7380 	movw	r3, #65408	; 0xff80
 80029aa:	400b      	ands	r3, r1
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d101      	bne.n	80029b4 <CO_RPDO_init+0x13c>
        CAN_ID = preDefinedCanId;
 80029b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80029b2:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    ret = CO_CANrxBufferInit(
 80029b4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80029b6:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 80029ba:	4b4d      	ldr	r3, [pc, #308]	; (8002af0 <CO_RPDO_init+0x278>)
 80029bc:	9302      	str	r3, [sp, #8]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	2300      	movs	r3, #0
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80029ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80029cc:	f005 fb72 	bl	80080b4 <CO_CANrxBufferInit>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            CAN_ID,             /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)RPDO,        /* object passed to receive function */
            CO_PDO_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 80029d6:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <CO_RPDO_init+0x16c>
        return ret;
 80029de:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80029e2:	e080      	b.n	8002ae6 <CO_RPDO_init+0x26e>
    }

    PDO->valid = valid;
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e8:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - transmission type */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 80029ea:	23fe      	movs	r3, #254	; 0xfe
 80029ec:	75fb      	strb	r3, [r7, #23]
    odRet = OD_get_u8(OD_14xx_RPDOCommPar, 2, &transmissionType, true);
 80029ee:	f107 0217 	add.w	r2, r7, #23
 80029f2:	2301      	movs	r3, #1
 80029f4:	2102      	movs	r1, #2
 80029f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80029f8:	f7ff fae9 	bl	8001fce <OD_get_u8>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8002a02:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00e      	beq.n	8002a28 <CO_RPDO_init+0x1b0>
        if (errInfo != NULL) {
 8002a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <CO_RPDO_init+0x1aa>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 2;
 8002a10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002a12:	f7ff fab7 	bl	8001f84 <OD_getIndex>
 8002a16:	4603      	mov	r3, r0
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	f043 0202 	orr.w	r2, r3, #2
 8002a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a20:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002a22:	f06f 030b 	mvn.w	r3, #11
 8002a26:	e05e      	b.n	8002ae6 <CO_RPDO_init+0x26e>
    }

    RPDO->SYNC = SYNC;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    RPDO->synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8002a30:	7dfb      	ldrb	r3, [r7, #23]
 8002a32:	2bf0      	cmp	r3, #240	; 0xf0
 8002a34:	bf94      	ite	ls
 8002a36:	2301      	movls	r3, #1
 8002a38:	2300      	movhi	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
#endif


    /* Configure communication parameter - event-timer (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    uint16_t eventTime = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	82bb      	strh	r3, [r7, #20]
    odRet = OD_get_u16(OD_14xx_RPDOCommPar, 5, &eventTime, true);
 8002a48:	f107 0214 	add.w	r2, r7, #20
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	2105      	movs	r1, #5
 8002a50:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002a52:	f7ff fad1 	bl	8001ff8 <OD_get_u16>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    RPDO->timeoutTime_us = (uint32_t)eventTime * 1000;
 8002a5c:	8abb      	ldrh	r3, [r7, #20]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a64:	fb03 f202 	mul.w	r2, r3, r2
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = true;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	2201      	movs	r2, #1
 8002a72:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    PDO->OD = OD;
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    PDO->CANdevIdx = CANdevRxIdx;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002a84:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002a8c:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    PDO->configuredCanId = CAN_ID;
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002a94:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    PDO->OD_communicationParam_ext.object = RPDO;
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <CO_RPDO_init+0x27c>)
 8002aa4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_14xx;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <CO_RPDO_init+0x280>)
 8002aac:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    PDO->OD_mappingParam_extension.object = RPDO;
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	4a10      	ldr	r2, [pc, #64]	; (8002afc <CO_RPDO_init+0x284>)
 8002abc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	4a0f      	ldr	r2, [pc, #60]	; (8002b00 <CO_RPDO_init+0x288>)
 8002ac4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    OD_extension_init(OD_14xx_RPDOCommPar, &PDO->OD_communicationParam_ext);
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ace:	4619      	mov	r1, r3
 8002ad0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002ad2:	f7ff fa68 	bl	8001fa6 <OD_extension_init>
    OD_extension_init(OD_16xx_RPDOMapPar, &PDO->OD_mappingParam_extension);
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002adc:	4619      	mov	r1, r3
 8002ade:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002ae0:	f7ff fa61 	bl	8001fa6 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3730      	adds	r7, #48	; 0x30
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	08002581 	.word	0x08002581
 8002af4:	080024e1 	.word	0x080024e1
 8002af8:	0800263d 	.word	0x0800263d
 8002afc:	08001941 	.word	0x08001941
 8002b00:	0800239f 	.word	0x0800239f

08002b04 <CO_RPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	b097      	sub	sp, #92	; 0x5c
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]
    (void) syncWas;
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	637b      	str	r3, [r7, #52]	; 0x34

    if (PDO->valid && NMTisOperational
 8002b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 8122 	beq.w	8002d64 <CO_RPDO_process+0x260>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 811e 	beq.w	8002d64 <CO_RPDO_process+0x260>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && (syncWas || !RPDO->synchronous)
 8002b28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d105      	bne.n	8002b3a <CO_RPDO_process+0x36>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f040 8115 	bne.w	8002d64 <CO_RPDO_process+0x260>
#endif
    ) {
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK) {
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002b40:	2b0a      	cmp	r3, #10
 8002b42:	d928      	bls.n	8002b96 <CO_RPDO_process+0x92>
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002b4a:	2b0b      	cmp	r3, #11
 8002b4c:	bf14      	ite	ne
 8002b4e:	2301      	movne	r3, #1
 8002b50:	2300      	moveq	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	633b      	str	r3, [r7, #48]	; 0x30
            uint16_t code = RPDO->receiveError == CO_RPDO_RX_SHORT
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002b5c:	2b0c      	cmp	r3, #12
 8002b5e:	d102      	bne.n	8002b66 <CO_RPDO_process+0x62>
 8002b60:	f248 2310 	movw	r3, #33296	; 0x8210
 8002b64:	e001      	b.n	8002b6a <CO_RPDO_process+0x66>
 8002b66:	f248 2320 	movw	r3, #33312	; 0x8220
 8002b6a:	85fb      	strh	r3, [r7, #46]	; 0x2e
                          ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 8002b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6e:	6818      	ldr	r0, [r3, #0]
                     code, PDO->dataLength);
 8002b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b72:	7b1b      	ldrb	r3, [r3, #12]
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 8002b74:	461a      	mov	r2, r3
 8002b76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b78:	9200      	str	r2, [sp, #0]
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b7e:	f7fe f89d 	bl	8000cbc <CO_error>
            RPDO->receiveError = setError
                              ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
 8002b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf14      	ite	ne
 8002b88:	2301      	movne	r3, #1
 8002b8a:	2300      	moveq	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	461a      	mov	r2, r3
            RPDO->receiveError = setError
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
        }

        /* Determine, which of the two rx buffers contains relevant message. */
        uint8_t bufNo = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (RPDO->synchronous && RPDO->SYNC != NULL && !RPDO->SYNC->CANrxToggle)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00d      	beq.n	8002bc2 <CO_RPDO_process+0xbe>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d008      	beq.n	8002bc2 <CO_RPDO_process+0xbe>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d102      	bne.n	8002bc2 <CO_RPDO_process+0xbe>
            bufNo = 1;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	64bb      	str	r3, [r7, #72]	; 0x48
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8002bc6:	e060      	b.n	8002c8a <CO_RPDO_process+0x186>
            rpdoReceived = true;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	64bb      	str	r3, [r7, #72]	; 0x48
            uint8_t *dataRPDO = RPDO->CANrxData[bufNo];
 8002bcc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002bd0:	332a      	adds	r3, #42	; 0x2a
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	647b      	str	r3, [r7, #68]	; 0x44

            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 8002bda:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3252      	adds	r2, #82	; 0x52
 8002be2:	2100      	movs	r1, #0
 8002be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002be8:	2300      	movs	r3, #0
 8002bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002bee:	e046      	b.n	8002c7e <CO_RPDO_process+0x17a>
                OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002bf0:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	3310      	adds	r3, #16
 8002bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c00:	4413      	add	r3, r2
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24

                /* get mappedLength from temporary storage */
                OD_size_t *dataOffset = &OD_IO->stream.dataOffset;
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	330c      	adds	r3, #12
 8002c08:	623b      	str	r3, [r7, #32]
                uint8_t mappedLength = (uint8_t) (*dataOffset);
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	77fb      	strb	r3, [r7, #31]

                /* length of OD variable may be larger than mappedLength */
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (ODdataLength > CO_PDO_MAX_SIZE)
 8002c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d901      	bls.n	8002c20 <CO_RPDO_process+0x11c>
                    ODdataLength = CO_PDO_MAX_SIZE;
 8002c1c:	2308      	movs	r3, #8
 8002c1e:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Prepare data for writing into OD variable. If mappedLength
                 * is smaller than ODdataLength, then use auxiliary buffer */
                uint8_t buf[CO_PDO_MAX_SIZE];
                uint8_t *dataOD;
                if (ODdataLength > mappedLength) {
 8002c20:	7ffb      	ldrb	r3, [r7, #31]
 8002c22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d911      	bls.n	8002c4c <CO_RPDO_process+0x148>
                    memset(buf, 0, sizeof(buf));
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	2208      	movs	r2, #8
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f009 fad1 	bl	800c1d8 <memset>
                    memcpy(buf, dataRPDO, mappedLength);
 8002c36:	7ffa      	ldrb	r2, [r7, #31]
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f009 fb54 	bl	800c2ec <memcpy>
                    dataOD = buf;
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c4a:	e001      	b.n	8002c50 <CO_RPDO_process+0x14c>
                }
                else {
                    dataOD = dataRPDO;
 8002c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c4e:	63bb      	str	r3, [r7, #56]	; 0x38
                }
 #endif

                /* Set stream.dataOffset to zero, perform OD_IO.write()
                 * and store mappedLength back to stream.dataOffset */
                *dataOffset = 0;
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
                OD_size_t countWritten;
                OD_IO->write(&OD_IO->stream, dataOD,
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	699c      	ldr	r4, [r3, #24]
 8002c5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c5c:	f107 0310 	add.w	r3, r7, #16
 8002c60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c64:	47a0      	blx	r4
                             ODdataLength, &countWritten);
                *dataOffset = mappedLength;
 8002c66:	7ffa      	ldrb	r2, [r7, #31]
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	601a      	str	r2, [r3, #0]

                dataRPDO += mappedLength;
 8002c6c:	7ffb      	ldrb	r3, [r7, #31]
 8002c6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c70:	4413      	add	r3, r2
 8002c72:	647b      	str	r3, [r7, #68]	; 0x44
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002c74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c80:	7b5b      	ldrb	r3, [r3, #13]
 8002c82:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d3b2      	bcc.n	8002bf0 <CO_RPDO_process+0xec>
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8002c8a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	3252      	adds	r2, #82	; 0x52
 8002c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d196      	bne.n	8002bc8 <CO_RPDO_process+0xc4>
        } /* while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) */

        /* verify RPDO timeout */
        (void) rpdoReceived;
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        if (RPDO->timeoutTime_us > 0) {
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d073      	beq.n	8002d8c <CO_RPDO_process+0x288>
            if (rpdoReceived) {
 8002ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d017      	beq.n	8002cda <CO_RPDO_process+0x1d6>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d90a      	bls.n	8002cd0 <CO_RPDO_process+0x1cc>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT,
 8002cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	2217      	movs	r2, #23
 8002cca:	2100      	movs	r1, #0
 8002ccc:	f7fd fff6 	bl	8000cbc <CO_error>
                                RPDO->timeoutTimer);
                }
                /* enable monitoring */
                RPDO->timeoutTimer = 1;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 8002cd8:	e028      	b.n	8002d2c <CO_RPDO_process+0x228>
            }
            else if (RPDO->timeoutTimer > 0
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d023      	beq.n	8002d2c <CO_RPDO_process+0x228>
                    && RPDO->timeoutTimer < RPDO->timeoutTime_us
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d21b      	bcs.n	8002d2c <CO_RPDO_process+0x228>
            ) {
                RPDO->timeoutTimer += timeDifference_us;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	441a      	add	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d90b      	bls.n	8002d2c <CO_RPDO_process+0x228>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT,
 8002d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	f248 2350 	movw	r3, #33360	; 0x8250
 8002d24:	2217      	movs	r2, #23
 8002d26:	2101      	movs	r1, #1
 8002d28:	f7fd ffc8 	bl	8000cbc <CO_error>
                                CO_EMC_RPDO_TIMEOUT, RPDO->timeoutTimer);
                }
            }
 #if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_TIMERNEXT
            if (timerNext_us != NULL
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d02c      	beq.n	8002d8c <CO_RPDO_process+0x288>
                && RPDO->timeoutTimer < RPDO->timeoutTime_us
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d224      	bcs.n	8002d8c <CO_RPDO_process+0x288>
            ) {
                uint32_t diff = RPDO->timeoutTime_us - RPDO->timeoutTimer;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	62bb      	str	r3, [r7, #40]	; 0x28
                if (*timerNext_us > diff) {
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d217      	bcs.n	8002d8c <CO_RPDO_process+0x288>
                    *timerNext_us = diff;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d60:	601a      	str	r2, [r3, #0]
    ) {
 8002d62:	e013      	b.n	8002d8c <CO_RPDO_process+0x288>
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
    } /* if (PDO->valid && NMTisOperational) */
    else {
        /* not valid and operational, clear CAN receive flags and timeoutTimer*/
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (!PDO->valid || !NMTisOperational) {
 8002d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <CO_RPDO_process+0x26e>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10d      	bne.n	8002d8e <CO_RPDO_process+0x28a>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
            RPDO->timeoutTimer = 0;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        RPDO->timeoutTimer = 0;
 #endif
#endif
    }
}
 8002d8a:	e000      	b.n	8002d8e <CO_RPDO_process+0x28a>
    ) {
 8002d8c:	bf00      	nop
}
 8002d8e:	bf00      	nop
 8002d90:	3754      	adds	r7, #84	; 0x54
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd90      	pop	{r4, r7, pc}
	...

08002d98 <OD_write_18xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_18xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b093      	sub	sp, #76	; 0x4c
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <OD_write_18xx+0x26>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <OD_write_18xx+0x26>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <OD_write_18xx+0x26>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d901      	bls.n	8002dc2 <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8002dbe:	2309      	movs	r3, #9
 8002dc0:	e136      	b.n	8003030 <OD_write_18xx+0x298>
    }

    CO_TPDO_t *TPDO = stream->object;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	63bb      	str	r3, [r7, #56]	; 0x38
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dca:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 8002dcc:	f107 0314 	add.w	r3, r7, #20
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	68b9      	ldr	r1, [r7, #8]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f009 fa89 	bl	800c2ec <memcpy>

    switch (stream->subIndex) {
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	7c5b      	ldrb	r3, [r3, #17]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	2b05      	cmp	r3, #5
 8002de2:	f200 811d 	bhi.w	8003020 <OD_write_18xx+0x288>
 8002de6:	a201      	add	r2, pc, #4	; (adr r2, 8002dec <OD_write_18xx+0x54>)
 8002de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dec:	08002e05 	.word	0x08002e05
 8002df0:	08002f3b 	.word	0x08002f3b
 8002df4:	08002fa1 	.word	0x08002fa1
 8002df8:	08003021 	.word	0x08003021
 8002dfc:	08002fcf 	.word	0x08002fcf
 8002e00:	08002ff3 	.word	0x08002ff3
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 8002e04:	68b8      	ldr	r0, [r7, #8]
 8002e06:	f7ff f8a0 	bl	8001f4a <CO_getUint32>
 8002e0a:	6238      	str	r0, [r7, #32]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e14:	87fb      	strh	r3, [r7, #62]	; 0x3e
        bool_t valid = (COB_ID & 0x80000000) == 0;
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	0fdb      	lsrs	r3, r3, #31
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	61fb      	str	r3, [r7, #28]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 8002e20:	6a3a      	ldr	r2, [r7, #32]
 8002e22:	4b85      	ldr	r3, [pc, #532]	; (8003038 <OD_write_18xx+0x2a0>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d13d      	bne.n	8002ea6 <OD_write_18xx+0x10e>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d009      	beq.n	8002e44 <OD_write_18xx+0xac>
 8002e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <OD_write_18xx+0xac>
 8002e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3a:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8002e3e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d130      	bne.n	8002ea6 <OD_write_18xx+0x10e>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d026      	beq.n	8002e98 <OD_write_18xx+0x100>
 8002e4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002e4c:	2b7f      	cmp	r3, #127	; 0x7f
 8002e4e:	d92a      	bls.n	8002ea6 <OD_write_18xx+0x10e>
 8002e50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e56:	d903      	bls.n	8002e60 <OD_write_18xx+0xc8>
 8002e58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002e5a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002e5e:	d922      	bls.n	8002ea6 <OD_write_18xx+0x10e>
 8002e60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002e62:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8002e66:	d903      	bls.n	8002e70 <OD_write_18xx+0xd8>
 8002e68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002e6a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e6e:	d31a      	bcc.n	8002ea6 <OD_write_18xx+0x10e>
 8002e70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002e72:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e76:	d903      	bls.n	8002e80 <OD_write_18xx+0xe8>
 8002e78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002e7a:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8002e7e:	d312      	bcc.n	8002ea6 <OD_write_18xx+0x10e>
 8002e80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002e82:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8002e86:	d303      	bcc.n	8002e90 <OD_write_18xx+0xf8>
 8002e88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002e8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e8e:	d30a      	bcc.n	8002ea6 <OD_write_18xx+0x10e>
 8002e90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002e92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e96:	d806      	bhi.n	8002ea6 <OD_write_18xx+0x10e>
            || (valid && PDO->mappedObjectsCount == 0)
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <OD_write_18xx+0x112>
 8002e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea0:	7b5b      	ldrb	r3, [r3, #13]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <OD_write_18xx+0x112>
        ) {
            return ODR_INVALID_VALUE;
 8002ea6:	230f      	movs	r3, #15
 8002ea8:	e0c2      	b.n	8003030 <OD_write_18xx+0x298>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d106      	bne.n	8002ec2 <OD_write_18xx+0x12a>
 8002eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb6:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8002eba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	f000 80ae 	beq.w	800301e <OD_write_18xx+0x286>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 8002ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec4:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 8002ec8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d108      	bne.n	8002ee0 <OD_write_18xx+0x148>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	4611      	mov	r1, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff f843 	bl	8001f66 <CO_setUint32>
            }
            if (!valid) {
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <OD_write_18xx+0x152>
                CAN_ID = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }

            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8002eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eec:	6858      	ldr	r0, [r3, #4]
 8002eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef0:	f8b3 1120 	ldrh.w	r1, [r3, #288]	; 0x120
 8002ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef6:	7b1b      	ldrb	r3, [r3, #12]
                PDO->CANdev,      /* CAN device */
                PDO->CANdevIdx,   /* index of specific buffer inside CAN mod. */
                CAN_ID,           /* CAN identifier */
                0,                /* rtr */
                PDO->dataLength,  /* number of data bytes */
                TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 8002ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002efa:	f892 214c 	ldrb.w	r2, [r2, #332]	; 0x14c
            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8002efe:	2af0      	cmp	r2, #240	; 0xf0
 8002f00:	bf94      	ite	ls
 8002f02:	2201      	movls	r2, #1
 8002f04:	2200      	movhi	r2, #0
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	4614      	mov	r4, r2
 8002f0a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002f0c:	9401      	str	r4, [sp, #4]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	2300      	movs	r3, #0
 8002f12:	f005 f92b 	bl	800816c <CO_CANtxBufferInit>
 8002f16:	61b8      	str	r0, [r7, #24]
                                  /* synchronous message flag */

            if (CANtxBuff == NULL) {
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <OD_write_18xx+0x18a>
                return ODR_DEV_INCOMPAT;
 8002f1e:	2309      	movs	r3, #9
 8002f20:	e086      	b.n	8003030 <OD_write_18xx+0x298>
            }

            TPDO->CANtxBuff = CANtxBuff;
 8002f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            PDO->valid = valid;
 8002f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2c:	69fa      	ldr	r2, [r7, #28]
 8002f2e:	609a      	str	r2, [r3, #8]
            PDO->configuredCanId = CAN_ID;
 8002f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f32:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002f34:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
        }
        break;
 8002f38:	e071      	b.n	800301e <OD_write_18xx+0x286>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 8002f3a:	68b8      	ldr	r0, [r7, #8]
 8002f3c:	f7fe ffe8 	bl	8001f10 <CO_getUint8>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8002f46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f4a:	2bf0      	cmp	r3, #240	; 0xf0
 8002f4c:	d905      	bls.n	8002f5a <OD_write_18xx+0x1c2>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8002f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f52:	2bfd      	cmp	r3, #253	; 0xfd
 8002f54:	d801      	bhi.n	8002f5a <OD_write_18xx+0x1c2>
        ) {
            return ODR_INVALID_VALUE;
 8002f56:	230f      	movs	r3, #15
 8002f58:	e06a      	b.n	8003030 <OD_write_18xx+0x298>
        }
        TPDO->CANtxBuff->syncFlag =
            transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8002f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f5e:	2bf0      	cmp	r3, #240	; 0xf0
 8002f60:	bf94      	ite	ls
 8002f62:	2301      	movls	r3, #1
 8002f64:	2300      	movhi	r3, #0
 8002f66:	b2da      	uxtb	r2, r3
        TPDO->CANtxBuff->syncFlag =
 8002f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002f6e:	615a      	str	r2, [r3, #20]
        TPDO->syncCounter = 255;
 8002f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f72:	22ff      	movs	r2, #255	; 0xff
 8002f74:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        TPDO->transmissionType = transmissionType;
 8002f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002f7e:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
        TPDO->sendRequest = true;
 8002f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f84:	2201      	movs	r2, #1
 8002f86:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 8002f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8002f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f94:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8002f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
        break;
 8002f9e:	e03f      	b.n	8003020 <OD_write_18xx+0x288>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    case 3: { /* inhibit time */
        if (PDO->valid) {
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <OD_write_18xx+0x214>
            return ODR_INVALID_VALUE;
 8002fa8:	230f      	movs	r3, #15
 8002faa:	e041      	b.n	8003030 <OD_write_18xx+0x298>
        }
        uint32_t inhibitTime = CO_getUint16(buf);
 8002fac:	68b8      	ldr	r0, [r7, #8]
 8002fae:	f7fe ffbd 	bl	8001f2c <CO_getUint16>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
        TPDO->inhibitTime_us = inhibitTime * 100;
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	2264      	movs	r2, #100	; 0x64
 8002fba:	fb03 f202 	mul.w	r2, r3, r2
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
        TPDO->inhibitTimer = 0;
 8002fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
        break;
 8002fcc:	e028      	b.n	8003020 <OD_write_18xx+0x288>
    }

    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 8002fce:	68b8      	ldr	r0, [r7, #8]
 8002fd0:	f7fe ffac 	bl	8001f2c <CO_getUint16>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        TPDO->eventTime_us = eventTime * 1000;
 8002fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002fde:	fb03 f202 	mul.w	r2, r3, r2
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        TPDO->eventTimer = 0;
 8002fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fea:	2200      	movs	r2, #0
 8002fec:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        break;
 8002ff0:	e016      	b.n	8003020 <OD_write_18xx+0x288>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    case 6: { /* SYNC start value */
        uint8_t syncStartValue = CO_getUint8(buf);
 8002ff2:	68b8      	ldr	r0, [r7, #8]
 8002ff4:	f7fe ff8c 	bl	8001f10 <CO_getUint8>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if (PDO->valid || syncStartValue > 240) {
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d103      	bne.n	800300e <OD_write_18xx+0x276>
 8003006:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800300a:	2bf0      	cmp	r3, #240	; 0xf0
 800300c:	d901      	bls.n	8003012 <OD_write_18xx+0x27a>
            return ODR_INVALID_VALUE;
 800300e:	230f      	movs	r3, #15
 8003010:	e00e      	b.n	8003030 <OD_write_18xx+0x298>
        }
        TPDO->syncStartValue = syncStartValue;
 8003012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003014:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003018:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
        break;
 800301c:	e000      	b.n	8003020 <OD_write_18xx+0x288>
        break;
 800301e:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8003020:	f107 0114 	add.w	r1, r7, #20
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f7fe fce1 	bl	80019f0 <OD_writeOriginal>
 800302e:	4603      	mov	r3, r0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3744      	adds	r7, #68	; 0x44
 8003034:	46bd      	mov	sp, r7
 8003036:	bd90      	pop	{r4, r7, pc}
 8003038:	3ffff800 	.word	0x3ffff800

0800303c <CO_TPDO_init>:
                              OD_entry_t *OD_18xx_TPDOCommPar,
                              OD_entry_t *OD_1Axx_TPDOMapPar,
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
                              uint32_t *errInfo)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08e      	sub	sp, #56	; 0x38
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
    ODR_t odRet;

    /* verify arguments */
    if (TPDO == NULL || OD == NULL || em == NULL || OD_18xx_TPDOCommPar == NULL
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00e      	beq.n	8003072 <CO_TPDO_init+0x36>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <CO_TPDO_init+0x36>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <CO_TPDO_init+0x36>
 8003060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <CO_TPDO_init+0x36>
        || OD_1Axx_TPDOMapPar == NULL || CANdevTx == NULL
 8003066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <CO_TPDO_init+0x36>
 800306c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <CO_TPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003072:	f04f 33ff 	mov.w	r3, #4294967295
 8003076:	e14f      	b.n	8003318 <CO_TPDO_init+0x2dc>
    }

    /* clear object */
    memset(TPDO, 0, sizeof(CO_TPDO_t));
 8003078:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800307c:	2100      	movs	r1, #0
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f009 f8aa 	bl	800c1d8 <memset>

    /* Configure object variables */
    PDO->em = em;
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800308e:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO,
 8003094:	f107 031c 	add.w	r3, r7, #28
 8003098:	9301      	str	r3, [sp, #4]
 800309a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	2300      	movs	r3, #0
 80030a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030a6:	f7ff f8cd 	bl	8002244 <PDO_initMapping>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                           OD,
                                           OD_1Axx_TPDOMapPar,
                                           false,
                                           errInfo,
                                           &erroneousMap);
    if (ret != CO_ERROR_NO) {
 80030b0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <CO_TPDO_init+0x82>
        return ret;
 80030b8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80030bc:	e12c      	b.n	8003318 <CO_TPDO_init+0x2dc>
    }


    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 80030be:	23fe      	movs	r3, #254	; 0xfe
 80030c0:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 80030c2:	f107 021b 	add.w	r2, r7, #27
 80030c6:	2301      	movs	r3, #1
 80030c8:	2102      	movs	r1, #2
 80030ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80030cc:	f7fe ff7f 	bl	8001fce <OD_get_u8>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 80030d6:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00e      	beq.n	80030fc <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 80030de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2;
 80030e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80030e6:	f7fe ff4d 	bl	8001f84 <OD_getIndex>
 80030ea:	4603      	mov	r3, r0
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	f043 0202 	orr.w	r2, r3, #2
 80030f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f4:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80030f6:	f06f 030b 	mvn.w	r3, #11
 80030fa:	e10d      	b.n	8003318 <CO_TPDO_init+0x2dc>
    }
    if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 80030fc:	7efb      	ldrb	r3, [r7, #27]
 80030fe:	2bfd      	cmp	r3, #253	; 0xfd
 8003100:	d804      	bhi.n	800310c <CO_TPDO_init+0xd0>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8003102:	7efb      	ldrb	r3, [r7, #27]
 8003104:	2bf0      	cmp	r3, #240	; 0xf0
 8003106:	d901      	bls.n	800310c <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8003108:	23fe      	movs	r3, #254	; 0xfe
 800310a:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 800310c:	7efa      	ldrb	r2, [r7, #27]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
    TPDO->sendRequest = true;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2201      	movs	r2, #1
 8003118:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 8003120:	f107 0214 	add.w	r2, r7, #20
 8003124:	2301      	movs	r3, #1
 8003126:	2101      	movs	r1, #1
 8003128:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800312a:	f7fe ff7a 	bl	8002022 <OD_get_u32>
 800312e:	4603      	mov	r3, r0
 8003130:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8003134:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00e      	beq.n	800315a <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 800313c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800313e:	2b00      	cmp	r3, #0
 8003140:	d008      	beq.n	8003154 <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1;
 8003142:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003144:	f7fe ff1e 	bl	8001f84 <OD_getIndex>
 8003148:	4603      	mov	r3, r0
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003152:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8003154:	f06f 030b 	mvn.w	r3, #11
 8003158:	e0de      	b.n	8003318 <CO_TPDO_init+0x2dc>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	43db      	mvns	r3, r3
 800315e:	0fdb      	lsrs	r3, r3, #31
 8003160:	b2db      	uxtb	r3, r3
 8003162:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	b29b      	uxth	r3, r3
 8003168:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800316c:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 800316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00d      	beq.n	8003190 <CO_TPDO_init+0x154>
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	7b5b      	ldrb	r3, [r3, #13]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <CO_TPDO_init+0x146>
 800317c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <CO_TPDO_init+0x154>
        valid = false;
 8003182:	2300      	movs	r3, #0
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <CO_TPDO_init+0x154>
 800318c:	2301      	movs	r3, #1
 800318e:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00e      	beq.n	80031b4 <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em,
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d001      	beq.n	80031a4 <CO_TPDO_init+0x168>
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	e000      	b.n	80031a6 <CO_TPDO_init+0x16a>
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 80031ac:	221a      	movs	r2, #26
 80031ae:	2101      	movs	r1, #1
 80031b0:	f7fd fd84 	bl	8000cbc <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 80031b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <CO_TPDO_init+0x182>
        CAN_ID = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 80031be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <CO_TPDO_init+0x19a>
 80031c4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80031c6:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80031c8:	f64f 7380 	movw	r3, #65408	; 0xff80
 80031cc:	400b      	ands	r3, r1
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d101      	bne.n	80031d6 <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 80031d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80031d4:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	7b1b      	ldrb	r3, [r3, #12]
            CANdevTx,           /* CAN device */
            CANdevTxIdx,        /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            PDO->dataLength,    /* number of data bytes */
            TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	f892 214c 	ldrb.w	r2, [r2, #332]	; 0x14c
    TPDO->CANtxBuff = CO_CANtxBufferInit(
 80031e0:	2af0      	cmp	r2, #240	; 0xf0
 80031e2:	bf94      	ite	ls
 80031e4:	2201      	movls	r2, #1
 80031e6:	2200      	movhi	r2, #0
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	4610      	mov	r0, r2
 80031ec:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80031ee:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 80031f2:	9001      	str	r0, [sp, #4]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	2300      	movs	r3, #0
 80031f8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80031fa:	f004 ffb7 	bl	800816c <CO_CANtxBufferInit>
 80031fe:	4602      	mov	r2, r0
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
                                /* synchronous message flag bit */
    if (TPDO->CANtxBuff == NULL) {
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800320c:	2b00      	cmp	r3, #0
 800320e:	d102      	bne.n	8003216 <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003210:	f04f 33ff 	mov.w	r3, #4294967295
 8003214:	e080      	b.n	8003318 <CO_TPDO_init+0x2dc>
    }

    PDO->valid = valid;
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800321a:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    uint16_t inhibitTime = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	823b      	strh	r3, [r7, #16]
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 8003224:	f107 0212 	add.w	r2, r7, #18
 8003228:	2301      	movs	r3, #1
 800322a:	2103      	movs	r1, #3
 800322c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800322e:	f7fe fee3 	bl	8001ff8 <OD_get_u16>
 8003232:	4603      	mov	r3, r0
 8003234:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 8003238:	f107 0210 	add.w	r2, r7, #16
 800323c:	2301      	movs	r3, #1
 800323e:	2105      	movs	r1, #5
 8003240:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003242:	f7fe fed9 	bl	8001ff8 <OD_get_u16>
 8003246:	4603      	mov	r3, r0
 8003248:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    TPDO->inhibitTime_us = inhibitTime * 100;
 800324c:	8a7b      	ldrh	r3, [r7, #18]
 800324e:	461a      	mov	r2, r3
 8003250:	2364      	movs	r3, #100	; 0x64
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	461a      	mov	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    TPDO->eventTime_us = eventTime * 1000;
 800325e:	8a3b      	ldrh	r3, [r7, #16]
 8003260:	461a      	mov	r2, r3
 8003262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	461a      	mov	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
#endif


    /* Configure communication parameter - SYNC start value (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->syncStartValue = 0;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8003280:	2301      	movs	r3, #1
 8003282:	2106      	movs	r1, #6
 8003284:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003286:	f7fe fea2 	bl	8001fce <OD_get_u8>
 800328a:	4603      	mov	r3, r0
 800328c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    TPDO->SYNC = SYNC;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    TPDO->syncCounter = 255;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	22ff      	movs	r2, #255	; 0xff
 800329c:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = false;
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	2200      	movs	r2, #0
 80032a4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    PDO->OD = OD;
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    PDO->CANdevIdx = CANdevTxIdx;
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80032b6:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80032be:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    PDO->configuredCanId = CAN_ID;
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80032c6:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    PDO->OD_communicationParam_ext.object = TPDO;
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	4a12      	ldr	r2, [pc, #72]	; (8003320 <CO_TPDO_init+0x2e4>)
 80032d6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	4a11      	ldr	r2, [pc, #68]	; (8003324 <CO_TPDO_init+0x2e8>)
 80032de:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    PDO->OD_mappingParam_extension.object = TPDO;
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	4a0e      	ldr	r2, [pc, #56]	; (8003328 <CO_TPDO_init+0x2ec>)
 80032ee:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	4a0d      	ldr	r2, [pc, #52]	; (800332c <CO_TPDO_init+0x2f0>)
 80032f6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003300:	4619      	mov	r1, r3
 8003302:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003304:	f7fe fe4f 	bl	8001fa6 <OD_extension_init>
    OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800330e:	4619      	mov	r1, r3
 8003310:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003312:	f7fe fe48 	bl	8001fa6 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3730      	adds	r7, #48	; 0x30
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	080024e1 	.word	0x080024e1
 8003324:	08002d99 	.word	0x08002d99
 8003328:	08001941 	.word	0x08001941
 800332c:	0800239f 	.word	0x0800239f

08003330 <CO_TPDOsend>:
 *
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t CO_TPDOsend(CO_TPDO_t *TPDO) {
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b091      	sub	sp, #68	; 0x44
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t *dataTPDO = &TPDO->CANtxBuff->data[0];
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003342:	3305      	adds	r3, #5
 8003344:	63fb      	str	r3, [r7, #60]	; 0x3c
#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven =
            (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 800334c:	2b00      	cmp	r3, #0
 800334e:	d004      	beq.n	800335a <CO_TPDOsend+0x2a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003356:	2bfd      	cmp	r3, #253	; 0xfd
 8003358:	d901      	bls.n	800335e <CO_TPDOsend+0x2e>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <CO_TPDOsend+0x30>
 800335e:	2300      	movs	r3, #0
    bool_t eventDriven =
 8003360:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003362:	2300      	movs	r3, #0
 8003364:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003368:	e062      	b.n	8003430 <CO_TPDOsend+0x100>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 800336a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	3310      	adds	r3, #16
 8003378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800337a:	4413      	add	r3, r2
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
        OD_stream_t *stream = &OD_IO->stream;
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	623b      	str	r3, [r7, #32]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t) stream->dataOffset;
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	77fb      	strb	r3, [r7, #31]

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	637b      	str	r3, [r7, #52]	; 0x34
        if (ODdataLength > CO_PDO_MAX_SIZE)
 800338e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003390:	2b08      	cmp	r3, #8
 8003392:	d901      	bls.n	8003398 <CO_TPDOsend+0x68>
            ODdataLength = CO_PDO_MAX_SIZE;
 8003394:	2308      	movs	r3, #8
 8003396:	637b      	str	r3, [r7, #52]	; 0x34

        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t *dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 8003398:	7ffb      	ldrb	r3, [r7, #31]
 800339a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800339c:	429a      	cmp	r2, r3
 800339e:	d90a      	bls.n	80033b6 <CO_TPDOsend+0x86>
            memset(buf, 0, sizeof(buf));
 80033a0:	f107 0310 	add.w	r3, r7, #16
 80033a4:	2208      	movs	r2, #8
 80033a6:	2100      	movs	r1, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f008 ff15 	bl	800c1d8 <memset>
            dataTPDOCopy = buf;
 80033ae:	f107 0310 	add.w	r3, r7, #16
 80033b2:	633b      	str	r3, [r7, #48]	; 0x30
 80033b4:	e001      	b.n	80033ba <CO_TPDOsend+0x8a>
        }
        else {
            dataTPDOCopy = dataTPDO;
 80033b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b8:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read()
         * and store mappedLength back to stream.dataOffset */
        stream->dataOffset= 0;
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	2200      	movs	r2, #0
 80033be:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	695c      	ldr	r4, [r3, #20]
 80033c4:	f107 030c 	add.w	r3, r7, #12
 80033c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033cc:	6a38      	ldr	r0, [r7, #32]
 80033ce:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 80033d0:	7ffa      	ldrb	r2, [r7, #31]
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	60da      	str	r2, [r3, #12]
            }
        }
 #endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 80033d6:	7ffb      	ldrb	r3, [r7, #31]
 80033d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033da:	429a      	cmp	r2, r3
 80033dc:	d906      	bls.n	80033ec <CO_TPDOsend+0xbc>
            memcpy(dataTPDO, buf, mappedLength);
 80033de:	7ffa      	ldrb	r2, [r7, #31]
 80033e0:	f107 0310 	add.w	r3, r7, #16
 80033e4:	4619      	mov	r1, r3
 80033e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80033e8:	f008 ff80 	bl	800c2ec <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
 #if OD_FLAGS_PDO_SIZE > 0
        uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 80033ec:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80033f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f2:	323c      	adds	r2, #60	; 0x3c
 80033f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f8:	61bb      	str	r3, [r7, #24]
        if (flagPDObyte != NULL && eventDriven) {
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00e      	beq.n	800341e <CO_TPDOsend+0xee>
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00b      	beq.n	800341e <CO_TPDOsend+0xee>
           *flagPDObyte |= PDO->flagPDObitmask[i];
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	781a      	ldrb	r2, [r3, #0]
 800340a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800340e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003410:	440b      	add	r3, r1
 8003412:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8003416:	4313      	orrs	r3, r2
 8003418:	b2da      	uxtb	r2, r3
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	701a      	strb	r2, [r3, #0]
        }
 #endif

        dataTPDO += mappedLength;
 800341e:	7ffb      	ldrb	r3, [r7, #31]
 8003420:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003422:	4413      	add	r3, r2
 8003424:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003426:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800342a:	3301      	adds	r3, #1
 800342c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003432:	7b5b      	ldrb	r3, [r3, #13]
 8003434:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003438:	429a      	cmp	r2, r3
 800343a:	d396      	bcc.n	800336a <CO_TPDOsend+0x3a>
        }
 #endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    TPDO->sendRequest = false;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    TPDO->eventTimer = TPDO->eventTime_us;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 800345c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003466:	4619      	mov	r1, r3
 8003468:	4610      	mov	r0, r2
 800346a:	f004 fef9 	bl	8008260 <CO_CANsend>
 800346e:	4603      	mov	r3, r0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3744      	adds	r7, #68	; 0x44
 8003474:	46bd      	mov	sp, r7
 8003476:	bd90      	pop	{r4, r7, pc}

08003478 <CO_TPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	61bb      	str	r3, [r7, #24]
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE)
    (void) timerNext_us;
#endif
    (void) syncWas;

    if (PDO->valid && NMTisOperational) {
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8101 	beq.w	8003696 <CO_TPDO_process+0x21e>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 80fd 	beq.w	8003696 <CO_TPDO_process+0x21e>

        /* check for event timer or application event */
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE) || (OD_FLAGS_PDO_SIZE > 0)
        if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d004      	beq.n	80034b0 <CO_TPDO_process+0x38>
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80034ac:	2bfd      	cmp	r3, #253	; 0xfd
 80034ae:	d955      	bls.n	800355c <CO_TPDO_process+0xe4>
        ) {
            /* event timer */
 #if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            if (TPDO->eventTime_us != 0) {
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d027      	beq.n	800350a <CO_TPDO_process+0x92>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
                                ? (TPDO->eventTimer - timeDifference_us) : 0;
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d205      	bcs.n	80034d2 <CO_TPDO_process+0x5a>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	e000      	b.n	80034d4 <CO_TPDO_process+0x5c>
 80034d2:	2300      	movs	r3, #0
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
                if (TPDO->eventTimer == 0) {
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d103      	bne.n	80034ec <CO_TPDO_process+0x74>
                    TPDO->sendRequest = true;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
                }
   #if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_TIMERNEXT
                if (timerNext_us != NULL && *timerNext_us > TPDO->eventTimer) {
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <CO_TPDO_process+0x92>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d904      	bls.n	800350a <CO_TPDO_process+0x92>
                    /* Schedule for next event time */
                    *timerNext_us = TPDO->eventTimer;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	601a      	str	r2, [r3, #0]
   #endif
            }
 #endif
            /* check for any OD_requestTPDO() */
 #if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003510:	2b00      	cmp	r3, #0
 8003512:	d123      	bne.n	800355c <CO_TPDO_process+0xe4>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003514:	2300      	movs	r3, #0
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	e01b      	b.n	8003552 <CO_TPDO_process+0xda>
                    uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 800351a:	7ffa      	ldrb	r2, [r7, #31]
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	323c      	adds	r2, #60	; 0x3c
 8003520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003524:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00f      	beq.n	800354c <CO_TPDO_process+0xd4>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0) {
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	781a      	ldrb	r2, [r3, #0]
 8003530:	7ffb      	ldrb	r3, [r7, #31]
 8003532:	69b9      	ldr	r1, [r7, #24]
 8003534:	440b      	add	r3, r1
 8003536:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800353a:	4013      	ands	r3, r2
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d104      	bne.n	800354c <CO_TPDO_process+0xd4>
                            TPDO->sendRequest = true;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
                            break;
 800354a:	e007      	b.n	800355c <CO_TPDO_process+0xe4>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 800354c:	7ffb      	ldrb	r3, [r7, #31]
 800354e:	3301      	adds	r3, #1
 8003550:	77fb      	strb	r3, [r7, #31]
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	7b5b      	ldrb	r3, [r3, #13]
 8003556:	7ffa      	ldrb	r2, [r7, #31]
 8003558:	429a      	cmp	r2, r3
 800355a:	d3de      	bcc.n	800351a <CO_TPDO_process+0xa2>
        }
#endif /*((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0)*/


        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003562:	2bfd      	cmp	r3, #253	; 0xfd
 8003564:	d933      	bls.n	80035ce <CO_TPDO_process+0x156>
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
                               ? (TPDO->inhibitTimer - timeDifference_us) : 0;
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	429a      	cmp	r2, r3
 8003570:	d205      	bcs.n	800357e <CO_TPDO_process+0x106>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	e000      	b.n	8003580 <CO_TPDO_process+0x108>
 800357e:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164

            /* send TPDO */
            if (TPDO->sendRequest && TPDO->inhibitTimer == 0) {
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800358c:	2b00      	cmp	r3, #0
 800358e:	d007      	beq.n	80035a0 <CO_TPDO_process+0x128>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8003596:	2b00      	cmp	r3, #0
 8003598:	d102      	bne.n	80035a0 <CO_TPDO_process+0x128>
                CO_TPDOsend(TPDO);
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f7ff fec8 	bl	8003330 <CO_TPDOsend>
            }

 #if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_TIMERNEXT
            if (TPDO->sendRequest
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8088 	beq.w	80036bc <CO_TPDO_process+0x244>
                && timerNext_us != NULL && *timerNext_us > TPDO->inhibitTimer
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 8084 	beq.w	80036bc <CO_TPDO_process+0x244>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80035be:	429a      	cmp	r2, r3
 80035c0:	d97c      	bls.n	80036bc <CO_TPDO_process+0x244>
            ) {
                /* Schedule for just beyond inhibit window */
                *timerNext_us = TPDO->inhibitTimer;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	601a      	str	r2, [r3, #0]
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80035cc:	e076      	b.n	80036bc <CO_TPDO_process+0x244>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        else if (TPDO->SYNC != NULL && syncWas) {
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d071      	beq.n	80036bc <CO_TPDO_process+0x244>
 80035d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d06e      	beq.n	80036bc <CO_TPDO_process+0x244>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d108      	bne.n	80035fa <CO_TPDO_process+0x182>
                if (TPDO->sendRequest) CO_TPDOsend(TPDO);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d064      	beq.n	80036bc <CO_TPDO_process+0x244>
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f7ff fe9c 	bl	8003330 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80035f8:	e060      	b.n	80036bc <CO_TPDO_process+0x244>
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255) {
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8003600:	2bff      	cmp	r3, #255	; 0xff
 8003602:	d119      	bne.n	8003638 <CO_TPDO_process+0x1c0>
                    if (TPDO->SYNC->counterOverflowValue != 0
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800360a:	7c5b      	ldrb	r3, [r3, #17]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d009      	beq.n	8003624 <CO_TPDO_process+0x1ac>
                        && TPDO->syncStartValue != 0
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8003616:	2b00      	cmp	r3, #0
 8003618:	d004      	beq.n	8003624 <CO_TPDO_process+0x1ac>
                    ) {
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	22fe      	movs	r2, #254	; 0xfe
 800361e:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 8003622:	e009      	b.n	8003638 <CO_TPDO_process+0x1c0>
                    }
                    else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = TPDO->transmissionType / 2 + 1;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800362a:	085b      	lsrs	r3, r3, #1
 800362c:	b2db      	uxtb	r3, r3
 800362e:	3301      	adds	r3, #1
 8003630:	b2da      	uxtb	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC
                 * with matched syncStartValue. */
                if (TPDO->syncCounter == 254) {
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800363e:	2bfe      	cmp	r3, #254	; 0xfe
 8003640:	d112      	bne.n	8003668 <CO_TPDO_process+0x1f0>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003648:	7c9a      	ldrb	r2, [r3, #18]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8003650:	429a      	cmp	r2, r3
 8003652:	d133      	bne.n	80036bc <CO_TPDO_process+0x244>
                        TPDO->syncCounter = TPDO->transmissionType;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                        CO_TPDOsend(TPDO);
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f7ff fe65 	bl	8003330 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003666:	e029      	b.n	80036bc <CO_TPDO_process+0x244>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0) {
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800366e:	3b01      	subs	r3, #1
 8003670:	b2da      	uxtb	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800367e:	2b00      	cmp	r3, #0
 8003680:	d11c      	bne.n	80036bc <CO_TPDO_process+0x244>
                    TPDO->syncCounter = TPDO->transmissionType;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                    CO_TPDOsend(TPDO);
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f7ff fe4e 	bl	8003330 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003694:	e012      	b.n	80036bc <CO_TPDO_process+0x244>
#endif

    }
    else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        TPDO->syncCounter = 255;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	22ff      	movs	r2, #255	; 0xff
 80036b6:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#endif
    }
}
 80036ba:	e000      	b.n	80036be <CO_TPDO_process+0x246>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80036bc:	bf00      	nop
}
 80036be:	bf00      	nop
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <OD_getIndex+0x14>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	e000      	b.n	80036dc <OD_getIndex+0x16>
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <OD_get_u8>:
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	460b      	mov	r3, r1
 80036f6:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80036f8:	7af9      	ldrb	r1, [r7, #11]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	2301      	movs	r3, #1
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f7fe fb5a 	bl	8001dbc <OD_get_value>
 8003708:	4603      	mov	r3, r0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <OD_get_u32>:
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b086      	sub	sp, #24
 8003716:	af02      	add	r7, sp, #8
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
 800371e:	460b      	mov	r3, r1
 8003720:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003722:	7af9      	ldrb	r1, [r7, #11]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	2304      	movs	r3, #4
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f7fe fb45 	bl	8001dbc <OD_get_value>
 8003732:	4603      	mov	r3, r0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <CO_fifo_reset>:
/**
 * Reset fifo object, make it empty
 *
 * @param fifo This object
 */
static inline void CO_fifo_reset(CO_fifo_t *fifo) {
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
    if (fifo != NULL) {
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d006      	beq.n	8003758 <CO_fifo_reset+0x1c>
        fifo->readPtr = 0;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	60da      	str	r2, [r3, #12]
        fifo->writePtr = 0;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
#if (CO_CONFIG_FIFO) & CO_CONFIG_FIFO_ASCII_DATATYPES
        fifo->started = false;
#endif
    }

    return;
 8003756:	bf00      	nop
 8003758:	bf00      	nop
}
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <CO_fifo_getOccupied>:
 *
 * @param fifo This object
 *
 * @return number of occupied bytes
 */
static inline size_t CO_fifo_getOccupied(CO_fifo_t *fifo) {
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
    int sizeOccupied = (int)fifo->writePtr - (int)fifo->readPtr;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	461a      	mov	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	60fb      	str	r3, [r7, #12]
    if (sizeOccupied < 0) {
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	da05      	bge.n	800378c <CO_fifo_getOccupied+0x28>
        sizeOccupied += (int)fifo->bufSize;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	461a      	mov	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	4413      	add	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
    }

    return (size_t) sizeOccupied;
 800378c:	68fb      	ldr	r3, [r7, #12]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <CO_SDOclient_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDOclient_receive(void *object, void *msg) {
 800379a:	b580      	push	{r7, lr}
 800379c:	b086      	sub	sp, #24
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]
    CO_SDOclient_t *SDO_C = (CO_SDOclient_t*)object;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	791b      	ldrb	r3, [r3, #4]
 80037ac:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	3305      	adds	r3, #5
 80037b2:	60fb      	str	r3, [r7, #12]

    /* Ignore messages in idle state and messages with wrong length. Ignore
     * message also if previous message was not processed yet and not abort */
    if (SDO_C->state != CO_SDO_ST_IDLE && DLC == 8U
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d014      	beq.n	80037ea <CO_SDOclient_receive+0x50>
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d111      	bne.n	80037ea <CO_SDOclient_receive+0x50>
        && (!CO_FLAG_READ(SDO_C->CANrxNew) || data[0] == 0x80)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <CO_SDOclient_receive+0x3c>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b80      	cmp	r3, #128	; 0x80
 80037d4:	d109      	bne.n	80037ea <CO_SDOclient_receive+0x50>
            || (SDO_C->state != CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ
                && SDO_C->state != CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP)
        ) {
#endif
            /* copy data and set 'new message' flag */
            memcpy((void *)&SDO_C->CANrxData[0], (const void *)&data[0], 8);
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	3370      	adds	r3, #112	; 0x70
 80037da:	2208      	movs	r2, #8
 80037dc:	68f9      	ldr	r1, [r7, #12]
 80037de:	4618      	mov	r0, r3
 80037e0:	f008 fd84 	bl	800c2ec <memcpy>
            CO_FLAG_SET(SDO_C->CANrxNew);
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2201      	movs	r2, #1
 80037e8:	66da      	str	r2, [r3, #108]	; 0x6c
#endif
            }
        }
#endif /* (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_BLOCK */
    }
}
 80037ea:	bf00      	nop
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <CO_SDOclient_init>:
                                   CO_CANmodule_t *CANdevRx,
                                   uint16_t CANdevRxIdx,
                                   CO_CANmodule_t *CANdevTx,
                                   uint16_t CANdevTxIdx,
                                   uint32_t *errInfo)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b088      	sub	sp, #32
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if (SDO_C == NULL || OD_1280_SDOcliPar == NULL
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d016      	beq.n	8003834 <CO_SDOclient_init+0x42>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d013      	beq.n	8003834 <CO_SDOclient_init+0x42>
        || OD_getIndex(OD_1280_SDOcliPar) < OD_H1280_SDO_CLIENT_1_PARAM
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff ff5a 	bl	80036c6 <OD_getIndex>
 8003812:	4603      	mov	r3, r0
 8003814:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8003818:	d30c      	bcc.n	8003834 <CO_SDOclient_init+0x42>
        || OD_getIndex(OD_1280_SDOcliPar) > (OD_H1280_SDO_CLIENT_1_PARAM + 0x7F)
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff ff53 	bl	80036c6 <OD_getIndex>
 8003820:	4603      	mov	r3, r0
 8003822:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 8003826:	d205      	bcs.n	8003834 <CO_SDOclient_init+0x42>
        || CANdevRx==NULL || CANdevTx==NULL
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <CO_SDOclient_init+0x42>
 800382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <CO_SDOclient_init+0x48>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003834:	f04f 33ff 	mov.w	r3, #4294967295
 8003838:	e068      	b.n	800390c <CO_SDOclient_init+0x11a>
    /* Configure object variables */
#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_LOCAL
    SDO_C->OD = OD;
    SDO_C->nodeId = nodeId;
#endif
    SDO_C->CANdevRx = CANdevRx;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800383e:	601a      	str	r2, [r3, #0]
    SDO_C->CANdevRxIdx = CANdevRxIdx;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003844:	809a      	strh	r2, [r3, #4]
    SDO_C->CANdevTx = CANdevTx;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800384a:	609a      	str	r2, [r3, #8]
    SDO_C->CANdevTxIdx = CANdevTxIdx;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003850:	819a      	strh	r2, [r3, #12]
    SDO_C->pFunctSignal = NULL;
    SDO_C->functSignalObject = NULL;
#endif

    /* prepare circular fifo buffer */
    CO_fifo_init(&SDO_C->bufFifo, SDO_C->buf,
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	3348      	adds	r3, #72	; 0x48
 800385c:	2221      	movs	r2, #33	; 0x21
 800385e:	4619      	mov	r1, r3
 8003860:	f002 fbfe 	bl	8006060 <CO_fifo_init>
                 CO_CONFIG_SDO_CLI_BUFFER_SIZE + 1);

    /* Get parameters from Object Dictionary (initial values) */
    uint8_t maxSubIndex, nodeIDOfTheSDOServer;
    uint32_t COB_IDClientToServer, COB_IDServerToClient;
    ODR_t odRet0 = OD_get_u8(OD_1280_SDOcliPar, 0, &maxSubIndex, true);
 8003864:	f107 021a 	add.w	r2, r7, #26
 8003868:	2301      	movs	r3, #1
 800386a:	2100      	movs	r1, #0
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff ff3b 	bl	80036e8 <OD_get_u8>
 8003872:	4603      	mov	r3, r0
 8003874:	77fb      	strb	r3, [r7, #31]
    ODR_t odRet1 = OD_get_u32(OD_1280_SDOcliPar, 1, &COB_IDClientToServer, true);
 8003876:	f107 0214 	add.w	r2, r7, #20
 800387a:	2301      	movs	r3, #1
 800387c:	2101      	movs	r1, #1
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff ff47 	bl	8003712 <OD_get_u32>
 8003884:	4603      	mov	r3, r0
 8003886:	77bb      	strb	r3, [r7, #30]
    ODR_t odRet2 = OD_get_u32(OD_1280_SDOcliPar, 2, &COB_IDServerToClient, true);
 8003888:	f107 0210 	add.w	r2, r7, #16
 800388c:	2301      	movs	r3, #1
 800388e:	2102      	movs	r1, #2
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff3e 	bl	8003712 <OD_get_u32>
 8003896:	4603      	mov	r3, r0
 8003898:	777b      	strb	r3, [r7, #29]
    ODR_t odRet3 = OD_get_u8(OD_1280_SDOcliPar, 3, &nodeIDOfTheSDOServer, true);
 800389a:	f107 0219 	add.w	r2, r7, #25
 800389e:	2301      	movs	r3, #1
 80038a0:	2103      	movs	r1, #3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff ff20 	bl	80036e8 <OD_get_u8>
 80038a8:	4603      	mov	r3, r0
 80038aa:	773b      	strb	r3, [r7, #28]

    if (odRet0 != ODR_OK || maxSubIndex != 3
 80038ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10e      	bne.n	80038d2 <CO_SDOclient_init+0xe0>
 80038b4:	7ebb      	ldrb	r3, [r7, #26]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d10b      	bne.n	80038d2 <CO_SDOclient_init+0xe0>
        || odRet1 != ODR_OK || odRet2 != ODR_OK || odRet3 != ODR_OK
 80038ba:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d107      	bne.n	80038d2 <CO_SDOclient_init+0xe0>
 80038c2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d103      	bne.n	80038d2 <CO_SDOclient_init+0xe0>
 80038ca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00c      	beq.n	80038ec <CO_SDOclient_init+0xfa>
    ) {
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1280_SDOcliPar);
 80038d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d006      	beq.n	80038e6 <CO_SDOclient_init+0xf4>
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff fef4 	bl	80036c6 <OD_getIndex>
 80038de:	4603      	mov	r3, r0
 80038e0:	461a      	mov	r2, r3
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e4:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80038e6:	f06f 030b 	mvn.w	r3, #11
 80038ea:	e00f      	b.n	800390c <CO_SDOclient_init+0x11a>
    /* set to zero to make sure CO_SDOclient_setup() will reconfigure CAN */
    SDO_C->COB_IDClientToServer = 0;
    SDO_C->COB_IDServerToClient = 0;
#endif

    CO_SDO_return_t cliSetupRet = CO_SDOclient_setup(SDO_C,
 80038ec:	6979      	ldr	r1, [r7, #20]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	7e7b      	ldrb	r3, [r7, #25]
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 f80e 	bl	8003914 <CO_SDOclient_setup>
 80038f8:	4603      	mov	r3, r0
 80038fa:	76fb      	strb	r3, [r7, #27]
                                                     COB_IDClientToServer,
                                                     COB_IDServerToClient,
                                                     nodeIDOfTheSDOServer);

    if (cliSetupRet != CO_SDO_RT_ok_communicationEnd) {
 80038fc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <CO_SDOclient_init+0x118>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003904:	f04f 33ff 	mov.w	r3, #4294967295
 8003908:	e000      	b.n	800390c <CO_SDOclient_init+0x11a>
    }

    return CO_ERROR_NO;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3720      	adds	r7, #32
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <CO_SDOclient_setup>:
/******************************************************************************/
CO_SDO_return_t CO_SDOclient_setup(CO_SDOclient_t *SDO_C,
                                   uint32_t COB_IDClientToServer,
                                   uint32_t COB_IDServerToClient,
                                   uint8_t nodeIDOfTheSDOServer)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	; 0x28
 8003918:	af04      	add	r7, sp, #16
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	70fb      	strb	r3, [r7, #3]
    /* verify parameters */
    if (SDO_C == NULL) {
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <CO_SDOclient_setup+0x1a>
        return CO_SDO_RT_wrongArguments;
 8003928:	f06f 0301 	mvn.w	r3, #1
 800392c:	e05f      	b.n	80039ee <CO_SDOclient_setup+0xda>
    }

    /* Configure object variables */
    SDO_C->state = CO_SDO_ST_IDLE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	66da      	str	r2, [r3, #108]	; 0x6c
    SDO_C->nodeIDOfTheSDOServer = nodeIDOfTheSDOServer;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	78fa      	ldrb	r2, [r7, #3]
 8003940:	751a      	strb	r2, [r3, #20]
    SDO_C->COB_IDClientToServer = COB_IDClientToServer;
    SDO_C->COB_IDServerToClient = COB_IDServerToClient;
#endif

    /* verify valid bit */
    uint16_t CanIdC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	db05      	blt.n	8003954 <CO_SDOclient_setup+0x40>
                        (uint16_t)(COB_IDClientToServer & 0x7FF) : 0;
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	b29b      	uxth	r3, r3
    uint16_t CanIdC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 800394c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003950:	b29b      	uxth	r3, r3
 8003952:	e000      	b.n	8003956 <CO_SDOclient_setup+0x42>
 8003954:	2300      	movs	r3, #0
 8003956:	82fb      	strh	r3, [r7, #22]
    uint16_t CanIdS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	db05      	blt.n	800396a <CO_SDOclient_setup+0x56>
                        (uint16_t)(COB_IDServerToClient & 0x7FF) : 0;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	b29b      	uxth	r3, r3
    uint16_t CanIdS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 8003962:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003966:	b29b      	uxth	r3, r3
 8003968:	e000      	b.n	800396c <CO_SDOclient_setup+0x58>
 800396a:	2300      	movs	r3, #0
 800396c:	82bb      	strh	r3, [r7, #20]
    if (CanIdC2S != 0 && CanIdS2C != 0) {
 800396e:	8afb      	ldrh	r3, [r7, #22]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d006      	beq.n	8003982 <CO_SDOclient_setup+0x6e>
 8003974:	8abb      	ldrh	r3, [r7, #20]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <CO_SDOclient_setup+0x6e>
        SDO_C->valid = true;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	619a      	str	r2, [r3, #24]
 8003980:	e006      	b.n	8003990 <CO_SDOclient_setup+0x7c>
    }
    else {
        CanIdC2S = 0;
 8003982:	2300      	movs	r3, #0
 8003984:	82fb      	strh	r3, [r7, #22]
        CanIdS2C = 0;
 8003986:	2300      	movs	r3, #0
 8003988:	82bb      	strh	r3, [r7, #20]
        SDO_C->valid = false;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	619a      	str	r2, [r3, #24]
    }

    /* configure SDO client CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6818      	ldr	r0, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8899      	ldrh	r1, [r3, #4]
 8003998:	8aba      	ldrh	r2, [r7, #20]
 800399a:	4b17      	ldr	r3, [pc, #92]	; (80039f8 <CO_SDOclient_setup+0xe4>)
 800399c:	9302      	str	r3, [sp, #8]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	9301      	str	r3, [sp, #4]
 80039a2:	2300      	movs	r3, #0
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80039aa:	f004 fb83 	bl	80080b4 <CO_CANrxBufferInit>
 80039ae:	4603      	mov	r3, r0
 80039b0:	74fb      	strb	r3, [r7, #19]
            0,                      /* rtr */
            (void*)SDO_C,           /* object passed to receive function */
            CO_SDOclient_receive);  /* this function will process rx msg */

    /* configure SDO client CAN transmission */
    SDO_C->CANtxBuff = CO_CANtxBufferInit(
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6898      	ldr	r0, [r3, #8]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8999      	ldrh	r1, [r3, #12]
 80039ba:	8afa      	ldrh	r2, [r7, #22]
 80039bc:	2300      	movs	r3, #0
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	2308      	movs	r3, #8
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	2300      	movs	r3, #0
 80039c6:	f004 fbd1 	bl	800816c <CO_CANtxBufferInit>
 80039ca:	4602      	mov	r2, r0
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	611a      	str	r2, [r3, #16]
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */


    if (ret != CO_ERROR_NO || SDO_C->CANtxBuff == NULL) {
 80039d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d103      	bne.n	80039e0 <CO_SDOclient_setup+0xcc>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d105      	bne.n	80039ec <CO_SDOclient_setup+0xd8>
        SDO_C->valid = false;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	619a      	str	r2, [r3, #24]
        return CO_SDO_RT_wrongArguments;
 80039e6:	f06f 0301 	mvn.w	r3, #1
 80039ea:	e000      	b.n	80039ee <CO_SDOclient_setup+0xda>
    }

    return CO_SDO_RT_ok_communicationEnd;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	0800379b 	.word	0x0800379b

080039fc <CO_SDOclientDownloadInitiate>:
                                             uint16_t index,
                                             uint8_t subIndex,
                                             size_t sizeIndicated,
                                             uint16_t SDOtimeoutTime_ms,
                                             bool_t blockEnable)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	607b      	str	r3, [r7, #4]
 8003a06:	460b      	mov	r3, r1
 8003a08:	817b      	strh	r3, [r7, #10]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	727b      	strb	r3, [r7, #9]
    /* verify parameters */
    if (SDO_C == NULL || !SDO_C->valid) {
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <CO_SDOclientDownloadInitiate+0x20>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d102      	bne.n	8003a22 <CO_SDOclientDownloadInitiate+0x26>
        return CO_SDO_RT_wrongArguments;
 8003a1c:	f06f 0301 	mvn.w	r3, #1
 8003a20:	e025      	b.n	8003a6e <CO_SDOclientDownloadInitiate+0x72>
    }

    /* save parameters */
    SDO_C->index = index;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	897a      	ldrh	r2, [r7, #10]
 8003a26:	839a      	strh	r2, [r3, #28]
    SDO_C->subIndex = subIndex;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	7a7a      	ldrb	r2, [r7, #9]
 8003a2c:	779a      	strb	r2, [r3, #30]
    SDO_C->sizeInd = sizeIndicated;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	625a      	str	r2, [r3, #36]	; 0x24
    SDO_C->sizeTran = 0;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	629a      	str	r2, [r3, #40]	; 0x28
    SDO_C->finished = false;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	621a      	str	r2, [r3, #32]
    SDO_C->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 8003a40:	8b3b      	ldrh	r3, [r7, #24]
 8003a42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a46:	fb03 f202 	mul.w	r2, r3, r2
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
    SDO_C->timeoutTimer = 0;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	635a      	str	r2, [r3, #52]	; 0x34
    CO_fifo_reset(&SDO_C->bufFifo);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	3338      	adds	r3, #56	; 0x38
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff fe6f 	bl	800373c <CO_fifo_reset>
        SDO_C->state = CO_SDO_ST_DOWNLOAD_BLK_INITIATE_REQ;
    }
    else
#endif
    {
        SDO_C->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2211      	movs	r2, #17
 8003a62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    }

    CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	66da      	str	r2, [r3, #108]	; 0x6c

    return CO_SDO_RT_ok_communicationEnd;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <CO_SDOclientDownloadBufWrite>:

/******************************************************************************/
size_t CO_SDOclientDownloadBufWrite(CO_SDOclient_t *SDO_C,
                                    const uint8_t *buf,
                                    size_t count)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b086      	sub	sp, #24
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	607a      	str	r2, [r7, #4]
    size_t ret = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
    if (SDO_C != NULL && buf != NULL) {
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00b      	beq.n	8003aa4 <CO_SDOclientDownloadBufWrite+0x2e>
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <CO_SDOclientDownloadBufWrite+0x2e>
        ret = CO_fifo_write(&SDO_C->bufFifo, buf, count, NULL);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003a98:	2300      	movs	r3, #0
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	68b9      	ldr	r1, [r7, #8]
 8003a9e:	f002 fb01 	bl	80060a4 <CO_fifo_write>
 8003aa2:	6178      	str	r0, [r7, #20]
    }
    return ret;
 8003aa4:	697b      	ldr	r3, [r7, #20]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <CO_SDOclientDownload>:
                                     bool_t abort,
                                     bool_t bufferPartial,
                                     CO_SDO_abortCode_t *SDOabortCode,
                                     size_t *sizeTransferred,
                                     uint32_t *timerNext_us)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08c      	sub	sp, #48	; 0x30
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; (void) bufferPartial; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (SDO_C == NULL || !SDO_C->valid) {
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <CO_SDOclientDownload+0x26>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d105      	bne.n	8003ae2 <CO_SDOclientDownload+0x32>
        abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8003ad6:	4b8f      	ldr	r3, [pc, #572]	; (8003d14 <CO_SDOclientDownload+0x264>)
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
        ret = CO_SDO_RT_wrongArguments;
 8003ada:	23fe      	movs	r3, #254	; 0xfe
 8003adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003ae0:	e0dc      	b.n	8003c9c <CO_SDOclientDownload+0x1ec>
    }
    else if (SDO_C->state == CO_SDO_ST_IDLE) {
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d103      	bne.n	8003af6 <CO_SDOclientDownload+0x46>
        ret = CO_SDO_RT_ok_communicationEnd;
 8003aee:	2300      	movs	r3, #0
 8003af0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003af4:	e0d2      	b.n	8003c9c <CO_SDOclientDownload+0x1ec>
        }
#endif
    }
#endif /* CO_CONFIG_SDO_CLI_LOCAL */
    /* CAN data received ******************************************************/
    else if (CO_FLAG_READ(SDO_C->CANrxNew)) {
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 80bf 	beq.w	8003c7e <CO_SDOclientDownload+0x1ce>
        /* is SDO abort */
        if (SDO_C->CANrxData[0] == 0x80) {
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003b06:	2b80      	cmp	r3, #128	; 0x80
 8003b08:	d10d      	bne.n	8003b26 <CO_SDOclientDownload+0x76>
            uint32_t code;
            memcpy(&code, &SDO_C->CANrxData[4], sizeof(code));
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3374      	adds	r3, #116	; 0x74
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	61bb      	str	r3, [r7, #24]
            abortCode = (CO_SDO_abortCode_t)CO_SWAP_32(code);
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	62bb      	str	r3, [r7, #40]	; 0x28
            SDO_C->state = CO_SDO_ST_IDLE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            ret = CO_SDO_RT_endedWithServerAbort;
 8003b1e:	23f6      	movs	r3, #246	; 0xf6
 8003b20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003b24:	e0a2      	b.n	8003c6c <CO_SDOclientDownload+0x1bc>
        }
        else if (abort) {
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00c      	beq.n	8003b46 <CO_SDOclientDownload+0x96>
            abortCode = (SDOabortCode != NULL)
                      ? *SDOabortCode : CO_SDO_AB_DEVICE_INCOMPAT;
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <CO_SDOclientDownload+0x88>
 8003b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	e000      	b.n	8003b3a <CO_SDOclientDownload+0x8a>
 8003b38:	4b76      	ldr	r3, [pc, #472]	; (8003d14 <CO_SDOclientDownload+0x264>)
            abortCode = (SDOabortCode != NULL)
 8003b3a:	62bb      	str	r3, [r7, #40]	; 0x28
            SDO_C->state = CO_SDO_ST_ABORT;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003b44:	e092      	b.n	8003c6c <CO_SDOclientDownload+0x1bc>
        }
        else switch (SDO_C->state) {
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b12      	cmp	r3, #18
 8003b50:	d002      	beq.n	8003b58 <CO_SDOclientDownload+0xa8>
 8003b52:	2b14      	cmp	r3, #20
 8003b54:	d045      	beq.n	8003be2 <CO_SDOclientDownload+0x132>
 8003b56:	e082      	b.n	8003c5e <CO_SDOclientDownload+0x1ae>
            case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
                if (SDO_C->CANrxData[0] == 0x60) {
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003b5e:	2b60      	cmp	r3, #96	; 0x60
 8003b60:	d138      	bne.n	8003bd4 <CO_SDOclientDownload+0x124>
                    /* verify index and subindex */
                    uint16_t index;
                    uint8_t subindex;
                    index = ((uint16_t) SDO_C->CANrxData[2]) << 8;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	021b      	lsls	r3, r3, #8
 8003b6c:	84bb      	strh	r3, [r7, #36]	; 0x24
                    index |= SDO_C->CANrxData[1];
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	84bb      	strh	r3, [r7, #36]	; 0x24
                    subindex = SDO_C->CANrxData[3];
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8003b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                    if (index != SDO_C->index || subindex != SDO_C->subIndex) {
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8b9b      	ldrh	r3, [r3, #28]
 8003b8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d105      	bne.n	8003b9c <CO_SDOclientDownload+0xec>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	7f9b      	ldrb	r3, [r3, #30]
 8003b94:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d006      	beq.n	8003baa <CO_SDOclientDownload+0xfa>
                        abortCode = CO_SDO_AB_PRAM_INCOMPAT;
 8003b9c:	4b5e      	ldr	r3, [pc, #376]	; (8003d18 <CO_SDOclientDownload+0x268>)
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28
                        SDO_C->state = CO_SDO_ST_ABORT;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                        break;
 8003ba8:	e060      	b.n	8003c6c <CO_SDOclientDownload+0x1bc>
                    }

#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_SEGMENTED
                    if (SDO_C->finished) {
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d007      	beq.n	8003bc2 <CO_SDOclientDownload+0x112>
                        /* expedited transfer */
                        SDO_C->state = CO_SDO_ST_IDLE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                        ret = CO_SDO_RT_ok_communicationEnd;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                }
                else {
                    abortCode = CO_SDO_AB_CMD;
                    SDO_C->state = CO_SDO_ST_ABORT;
                }
                break;
 8003bc0:	e054      	b.n	8003c6c <CO_SDOclientDownload+0x1bc>
                        SDO_C->toggle = 0x00;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                        SDO_C->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2213      	movs	r2, #19
 8003bce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                break;
 8003bd2:	e04b      	b.n	8003c6c <CO_SDOclientDownload+0x1bc>
                    abortCode = CO_SDO_AB_CMD;
 8003bd4:	4b51      	ldr	r3, [pc, #324]	; (8003d1c <CO_SDOclientDownload+0x26c>)
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO_C->state = CO_SDO_ST_ABORT;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                break;
 8003be0:	e044      	b.n	8003c6c <CO_SDOclientDownload+0x1bc>
            }

#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_SEGMENTED
            case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
                if ((SDO_C->CANrxData[0] & 0xEF) == 0x20) {
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003be8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d12f      	bne.n	8003c50 <CO_SDOclientDownload+0x1a0>
                    /* verify and alternate toggle bit */
                    uint8_t toggle = SDO_C->CANrxData[0] & 0x10;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    if (toggle != SDO_C->toggle) {
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003c04:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d006      	beq.n	8003c1a <CO_SDOclientDownload+0x16a>
                        abortCode = CO_SDO_AB_TOGGLE_BIT;
 8003c0c:	4b44      	ldr	r3, [pc, #272]	; (8003d20 <CO_SDOclientDownload+0x270>)
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28
                        SDO_C->state = CO_SDO_ST_ABORT;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                        break;
 8003c18:	e028      	b.n	8003c6c <CO_SDOclientDownload+0x1bc>
                    }
                    SDO_C->toggle = (toggle == 0x00) ? 0x10 : 0x00;
 8003c1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <CO_SDOclientDownload+0x176>
 8003c22:	2210      	movs	r2, #16
 8003c24:	e000      	b.n	8003c28 <CO_SDOclientDownload+0x178>
 8003c26:	2200      	movs	r2, #0
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                    /* is end of transfer? */
                    if (SDO_C->finished) {
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <CO_SDOclientDownload+0x196>
                        SDO_C->state = CO_SDO_ST_IDLE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                        ret = CO_SDO_RT_ok_communicationEnd;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                }
                else {
                    abortCode = CO_SDO_AB_CMD;
                    SDO_C->state = CO_SDO_ST_ABORT;
                }
                break;
 8003c44:	e012      	b.n	8003c6c <CO_SDOclientDownload+0x1bc>
                        SDO_C->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2213      	movs	r2, #19
 8003c4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                break;
 8003c4e:	e00d      	b.n	8003c6c <CO_SDOclientDownload+0x1bc>
                    abortCode = CO_SDO_AB_CMD;
 8003c50:	4b32      	ldr	r3, [pc, #200]	; (8003d1c <CO_SDOclientDownload+0x26c>)
 8003c52:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO_C->state = CO_SDO_ST_ABORT;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                break;
 8003c5c:	e006      	b.n	8003c6c <CO_SDOclientDownload+0x1bc>
                break;
            }
#endif /* (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_BLOCK */

            default: {
                abortCode = CO_SDO_AB_CMD;
 8003c5e:	4b2f      	ldr	r3, [pc, #188]	; (8003d1c <CO_SDOclientDownload+0x26c>)
 8003c60:	62bb      	str	r3, [r7, #40]	; 0x28
                SDO_C->state = CO_SDO_ST_ABORT;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                break;
 8003c6a:	bf00      	nop
            }
        }
        SDO_C->timeoutTimer = 0;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	635a      	str	r2, [r3, #52]	; 0x34
        timeDifference_us = 0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]
        CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	66da      	str	r2, [r3, #108]	; 0x6c
 8003c7c:	e00e      	b.n	8003c9c <CO_SDOclientDownload+0x1ec>
    }
    else if (abort) {
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00b      	beq.n	8003c9c <CO_SDOclientDownload+0x1ec>
        abortCode = (SDOabortCode != NULL)
                  ? *SDOabortCode : CO_SDO_AB_DEVICE_INCOMPAT;
 8003c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <CO_SDOclientDownload+0x1e0>
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	e000      	b.n	8003c92 <CO_SDOclientDownload+0x1e2>
 8003c90:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <CO_SDOclientDownload+0x264>)
        abortCode = (SDOabortCode != NULL)
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28
        SDO_C->state = CO_SDO_ST_ABORT;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    }

    /* Timeout timers and transmit bufferFull flag ****************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8003c9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d11f      	bne.n	8003ce4 <CO_SDOclientDownload+0x234>
        if (SDO_C->timeoutTimer < SDO_C->SDOtimeoutTime_us) {
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d205      	bcs.n	8003cbc <CO_SDOclientDownload+0x20c>
            SDO_C->timeoutTimer += timeDifference_us;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	441a      	add	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	635a      	str	r2, [r3, #52]	; 0x34
        }
        if (SDO_C->timeoutTimer >= SDO_C->SDOtimeoutTime_us) {
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d305      	bcc.n	8003cd4 <CO_SDOclientDownload+0x224>
            abortCode = CO_SDO_AB_TIMEOUT;
 8003cc8:	4b16      	ldr	r3, [pc, #88]	; (8003d24 <CO_SDOclientDownload+0x274>)
 8003cca:	62bb      	str	r3, [r7, #40]	; 0x28
            SDO_C->state = CO_SDO_ST_ABORT;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            if (*timerNext_us > diff) {
                *timerNext_us = diff;
            }
        }
#endif
        if (SDO_C->CANtxBuff->bufferFull) {
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <CO_SDOclientDownload+0x234>
            ret = CO_SDO_RT_transmittBufferFull;
 8003cde:	2304      	movs	r3, #4
 8003ce0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
    }

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8003ce4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	f040 8124 	bne.w	8003f36 <CO_SDOclientDownload+0x486>
        size_t count;
        memset((void *)&SDO_C->CANtxBuff->data[0], 0, 8);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	3305      	adds	r3, #5
 8003cf4:	2208      	movs	r2, #8
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f008 fa6d 	bl	800c1d8 <memset>

        switch (SDO_C->state) {
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b11      	cmp	r3, #17
 8003d08:	d00e      	beq.n	8003d28 <CO_SDOclientDownload+0x278>
 8003d0a:	2b13      	cmp	r3, #19
 8003d0c:	f000 80a4 	beq.w	8003e58 <CO_SDOclientDownload+0x3a8>
            break;
        }
#endif /* (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_BLOCK */

        default: {
            break;
 8003d10:	e111      	b.n	8003f36 <CO_SDOclientDownload+0x486>
 8003d12:	bf00      	nop
 8003d14:	06040047 	.word	0x06040047
 8003d18:	06040043 	.word	0x06040043
 8003d1c:	05040001 	.word	0x05040001
 8003d20:	05030000 	.word	0x05030000
 8003d24:	05040000 	.word	0x05040000
            SDO_C->CANtxBuff->data[0] = 0x20;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	715a      	strb	r2, [r3, #5]
            SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->index;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8b9a      	ldrh	r2, [r3, #28]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	719a      	strb	r2, [r3, #6]
            SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->index >> 8);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8b9b      	ldrh	r3, [r3, #28]
 8003d40:	0a1b      	lsrs	r3, r3, #8
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	71da      	strb	r2, [r3, #7]
            SDO_C->CANtxBuff->data[3] = SDO_C->subIndex;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	7f92      	ldrb	r2, [r2, #30]
 8003d54:	721a      	strb	r2, [r3, #8]
            count = CO_fifo_getOccupied(&SDO_C->bufFifo);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	3338      	adds	r3, #56	; 0x38
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff fd02 	bl	8003764 <CO_fifo_getOccupied>
 8003d60:	61f8      	str	r0, [r7, #28]
            if ((SDO_C->sizeInd == 0 && count <= 4)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d102      	bne.n	8003d70 <CO_SDOclientDownload+0x2c0>
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d907      	bls.n	8003d80 <CO_SDOclientDownload+0x2d0>
                || (SDO_C->sizeInd > 0 && SDO_C->sizeInd <= 4)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d04a      	beq.n	8003e0e <CO_SDOclientDownload+0x35e>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d846      	bhi.n	8003e0e <CO_SDOclientDownload+0x35e>
                SDO_C->CANtxBuff->data[0] |= 0x02;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	795a      	ldrb	r2, [r3, #5]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f042 0202 	orr.w	r2, r2, #2
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	715a      	strb	r2, [r3, #5]
                if (count == 0 || (SDO_C->sizeInd > 0 &&
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <CO_SDOclientDownload+0x2fa>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00e      	beq.n	8003dbe <CO_SDOclientDownload+0x30e>
                                   SDO_C->sizeInd != count)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                if (count == 0 || (SDO_C->sizeInd > 0 &&
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d009      	beq.n	8003dbe <CO_SDOclientDownload+0x30e>
                    SDO_C->state = CO_SDO_ST_IDLE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                    abortCode = CO_SDO_AB_TYPE_MISMATCH;
 8003db2:	4b86      	ldr	r3, [pc, #536]	; (8003fcc <CO_SDOclientDownload+0x51c>)
 8003db4:	62bb      	str	r3, [r7, #40]	; 0x28
                    ret = CO_SDO_RT_endedWithClientAbort;
 8003db6:	23f7      	movs	r3, #247	; 0xf7
 8003db8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    break;
 8003dbc:	e0bb      	b.n	8003f36 <CO_SDOclientDownload+0x486>
                if (SDO_C->sizeInd > 0) {
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d011      	beq.n	8003dea <CO_SDOclientDownload+0x33a>
                    SDO_C->CANtxBuff->data[0] |= 0x01 | ((4 - count) << 2);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	795a      	ldrb	r2, [r3, #5]
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	f1c3 0304 	rsb	r3, r3, #4
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	715a      	strb	r2, [r3, #5]
                CO_fifo_read(&SDO_C->bufFifo,
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f103 0038 	add.w	r0, r3, #56	; 0x38
                             &SDO_C->CANtxBuff->data[4], count, NULL);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	691b      	ldr	r3, [r3, #16]
                CO_fifo_read(&SDO_C->bufFifo,
 8003df4:	f103 0109 	add.w	r1, r3, #9
 8003df8:	2300      	movs	r3, #0
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	f002 f9aa 	bl	8006154 <CO_fifo_read>
                SDO_C->sizeTran = count;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	69fa      	ldr	r2, [r7, #28]
 8003e04:	629a      	str	r2, [r3, #40]	; 0x28
                SDO_C->finished = true;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	621a      	str	r2, [r3, #32]
 8003e0c:	e014      	b.n	8003e38 <CO_SDOclientDownload+0x388>
                if (SDO_C->sizeInd > 0) {
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d010      	beq.n	8003e38 <CO_SDOclientDownload+0x388>
                    uint32_t size = CO_SWAP_32((uint32_t)SDO_C->sizeInd);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	617b      	str	r3, [r7, #20]
                    SDO_C->CANtxBuff->data[0] |= 0x01;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	795a      	ldrb	r2, [r3, #5]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	715a      	strb	r2, [r3, #5]
                    memcpy(&SDO_C->CANtxBuff->data[4], &size, sizeof(size));
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	3309      	adds	r3, #9
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	601a      	str	r2, [r3, #0]
            SDO_C->timeoutTimer = 0;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	635a      	str	r2, [r3, #52]	; 0x34
            CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	4619      	mov	r1, r3
 8003e48:	4610      	mov	r0, r2
 8003e4a:	f004 fa09 	bl	8008260 <CO_CANsend>
            SDO_C->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2212      	movs	r2, #18
 8003e52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            break;
 8003e56:	e06e      	b.n	8003f36 <CO_SDOclientDownload+0x486>
            count = CO_fifo_read(&SDO_C->bufFifo,
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f103 0038 	add.w	r0, r3, #56	; 0x38
                                 &SDO_C->CANtxBuff->data[1],
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	691b      	ldr	r3, [r3, #16]
            count = CO_fifo_read(&SDO_C->bufFifo,
 8003e62:	1d99      	adds	r1, r3, #6
 8003e64:	2300      	movs	r3, #0
 8003e66:	2207      	movs	r2, #7
 8003e68:	f002 f974 	bl	8006154 <CO_fifo_read>
 8003e6c:	61f8      	str	r0, [r7, #28]
            SDO_C->sizeTran += count;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	441a      	add	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	629a      	str	r2, [r3, #40]	; 0x28
            if (SDO_C->sizeInd > 0 && SDO_C->sizeTran > SDO_C->sizeInd) {
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d012      	beq.n	8003ea8 <CO_SDOclientDownload+0x3f8>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d90c      	bls.n	8003ea8 <CO_SDOclientDownload+0x3f8>
                SDO_C->sizeTran -= count;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	1ad2      	subs	r2, r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	629a      	str	r2, [r3, #40]	; 0x28
                abortCode = CO_SDO_AB_DATA_LONG;
 8003e9a:	4b4d      	ldr	r3, [pc, #308]	; (8003fd0 <CO_SDOclientDownload+0x520>)
 8003e9c:	62bb      	str	r3, [r7, #40]	; 0x28
                SDO_C->state = CO_SDO_ST_ABORT;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                break;
 8003ea6:	e046      	b.n	8003f36 <CO_SDOclientDownload+0x486>
            SDO_C->CANtxBuff->data[0] = (uint8_t)(SDO_C->toggle | ((7 - count) << 1));
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	f1c3 0307 	rsb	r3, r3, #7
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	715a      	strb	r2, [r3, #5]
            if (CO_fifo_getOccupied(&SDO_C->bufFifo) == 0 && !bufferPartial) {
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3338      	adds	r3, #56	; 0x38
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff fc4a 	bl	8003764 <CO_fifo_getOccupied>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d11f      	bne.n	8003f16 <CO_SDOclientDownload+0x466>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d11c      	bne.n	8003f16 <CO_SDOclientDownload+0x466>
                if (SDO_C->sizeInd > 0 && SDO_C->sizeTran < SDO_C->sizeInd) {
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00c      	beq.n	8003efe <CO_SDOclientDownload+0x44e>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d206      	bcs.n	8003efe <CO_SDOclientDownload+0x44e>
                    abortCode = CO_SDO_AB_DATA_SHORT;
 8003ef0:	4b38      	ldr	r3, [pc, #224]	; (8003fd4 <CO_SDOclientDownload+0x524>)
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO_C->state = CO_SDO_ST_ABORT;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                    break;
 8003efc:	e01b      	b.n	8003f36 <CO_SDOclientDownload+0x486>
                SDO_C->CANtxBuff->data[0] |= 0x01;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	795a      	ldrb	r2, [r3, #5]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f042 0201 	orr.w	r2, r2, #1
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	715a      	strb	r2, [r3, #5]
                SDO_C->finished = true;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	621a      	str	r2, [r3, #32]
            SDO_C->timeoutTimer = 0;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	635a      	str	r2, [r3, #52]	; 0x34
            CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f004 f99a 	bl	8008260 <CO_CANsend>
            SDO_C->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2214      	movs	r2, #20
 8003f30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            break;
 8003f34:	bf00      	nop
        }
        }
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 8003f36:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d132      	bne.n	8003fa4 <CO_SDOclientDownload+0x4f4>
        if (SDO_C->state == CO_SDO_ST_ABORT) {
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d12c      	bne.n	8003fa4 <CO_SDOclientDownload+0x4f4>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8003f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4c:	613b      	str	r3, [r7, #16]
            /* Send SDO abort message */
            SDO_C->CANtxBuff->data[0] = 0x80;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2280      	movs	r2, #128	; 0x80
 8003f54:	715a      	strb	r2, [r3, #5]
            SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->index;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8b9a      	ldrh	r2, [r3, #28]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	719a      	strb	r2, [r3, #6]
            SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->index >> 8);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8b9b      	ldrh	r3, [r3, #28]
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	71da      	strb	r2, [r3, #7]
            SDO_C->CANtxBuff->data[3] = SDO_C->subIndex;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	7f92      	ldrb	r2, [r2, #30]
 8003f7a:	721a      	strb	r2, [r3, #8]

            memcpy(&SDO_C->CANtxBuff->data[4], &code, sizeof(code));
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	3309      	adds	r3, #9
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	601a      	str	r2, [r3, #0]
            CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4610      	mov	r0, r2
 8003f92:	f004 f965 	bl	8008260 <CO_CANsend>
            SDO_C->state = CO_SDO_ST_IDLE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            ret = CO_SDO_RT_endedWithClientAbort;
 8003f9e:	23f7      	movs	r3, #247	; 0xf7
 8003fa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ret = CO_SDO_RT_blockDownldInProgress;
        }
#endif
    }

    if (sizeTransferred != NULL) {
 8003fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <CO_SDOclientDownload+0x502>
        *sizeTransferred = SDO_C->sizeTran;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb0:	601a      	str	r2, [r3, #0]
    }
    if (SDOabortCode != NULL) {
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <CO_SDOclientDownload+0x50e>
        *SDOabortCode = abortCode;
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fbc:	601a      	str	r2, [r3, #0]
    }

    return ret;
 8003fbe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3730      	adds	r7, #48	; 0x30
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	06070010 	.word	0x06070010
 8003fd0:	06070012 	.word	0x06070012
 8003fd4:	06070013 	.word	0x06070013

08003fd8 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8003fe4:	73fb      	strb	r3, [r7, #15]
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	68fb      	ldr	r3, [r7, #12]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <OD_getIndex+0x14>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	e000      	b.n	8004026 <OD_getIndex+0x16>
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <OD_mappable>:
static inline bool_t OD_mappable(OD_stream_t *stream) {
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
         ? (stream->attribute & (ODA_TRPDO | ODA_TRSRDO)) != 0 : false;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d007      	beq.n	8004050 <OD_mappable+0x1e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	7c1b      	ldrb	r3, [r3, #16]
 8004044:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <OD_mappable+0x1e>
 800404c:	2301      	movs	r3, #1
 800404e:	e000      	b.n	8004052 <OD_mappable+0x20>
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <OD_extension_init>:
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <OD_extension_init+0x14>
 800406e:	2305      	movs	r3, #5
 8004070:	e003      	b.n	800407a <OD_extension_init+0x1c>
    entry->extension = extension;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <OD_get_u8>:
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b086      	sub	sp, #24
 800408a:	af02      	add	r7, sp, #8
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	603b      	str	r3, [r7, #0]
 8004092:	460b      	mov	r3, r1
 8004094:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004096:	7af9      	ldrb	r1, [r7, #11]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	2301      	movs	r3, #1
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f7fd fe8b 	bl	8001dbc <OD_get_value>
 80040a6:	4603      	mov	r3, r0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <OD_get_u32>:
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	607a      	str	r2, [r7, #4]
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	460b      	mov	r3, r1
 80040be:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80040c0:	7af9      	ldrb	r1, [r7, #11]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	2304      	movs	r3, #4
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f7fd fe76 	bl	8001dbc <OD_get_value>
 80040d0:	4603      	mov	r3, r0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <OD_set_u32>:
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t OD_set_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t val, bool_t odOrig)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b086      	sub	sp, #24
 80040de:	af02      	add	r7, sp, #8
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
 80040e6:	460b      	mov	r3, r1
 80040e8:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 80040ea:	1d3a      	adds	r2, r7, #4
 80040ec:	7af9      	ldrb	r1, [r7, #11]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	2304      	movs	r3, #4
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f7fd fe97 	bl	8001e28 <OD_set_value>
 80040fa:	4603      	mov	r3, r0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, void *msg) {
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t *SDO = (CO_SDOserver_t *)object;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	791b      	ldrb	r3, [r3, #4]
 8004116:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	3305      	adds	r3, #5
 800411c:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8) {
 800411e:	7cfb      	ldrb	r3, [r7, #19]
 8004120:	2b08      	cmp	r3, #8
 8004122:	d115      	bne.n	8004150 <CO_SDO_receive+0x4c>
        if (data[0] == 0x80) {
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b80      	cmp	r3, #128	; 0x80
 800412a:	d103      	bne.n	8004134 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2200      	movs	r2, #0
 8004130:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 8004132:	e00d      	b.n	8004150 <CO_SDO_receive+0x4c>
        else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	2b00      	cmp	r3, #0
 800413a:	d109      	bne.n	8004150 <CO_SDO_receive+0x4c>
            memcpy(SDO->CANrxData, data, DLC);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	333c      	adds	r3, #60	; 0x3c
 8004140:	7cfa      	ldrb	r2, [r7, #19]
 8004142:	68f9      	ldr	r1, [r7, #12]
 8004144:	4618      	mov	r0, r3
 8004146:	f008 f8d1 	bl	800c2ec <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2201      	movs	r2, #1
 800414e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004150:	bf00      	nop
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <CO_SDOserver_init_canRxTx>:
                                                  CO_CANmodule_t *CANdevRx,
                                                  uint16_t CANdevRxIdx,
                                                  uint16_t CANdevTxIdx,
                                                  uint32_t COB_IDClientToServer,
                                                  uint32_t COB_IDServerToClient)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08a      	sub	sp, #40	; 0x28
 800415c:	af04      	add	r7, sp, #16
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	4611      	mov	r1, r2
 8004164:	461a      	mov	r2, r3
 8004166:	460b      	mov	r3, r1
 8004168:	80fb      	strh	r3, [r7, #6]
 800416a:	4613      	mov	r3, r2
 800416c:	80bb      	strh	r3, [r7, #4]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    /* proceed only, if parameters change */
    if (COB_IDClientToServer == SDO->COB_IDClientToServer
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004172:	6a3a      	ldr	r2, [r7, #32]
 8004174:	429a      	cmp	r2, r3
 8004176:	d106      	bne.n	8004186 <CO_SDOserver_init_canRxTx+0x2e>
        && COB_IDServerToClient == SDO->COB_IDServerToClient
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417e:	429a      	cmp	r2, r3
 8004180:	d101      	bne.n	8004186 <CO_SDOserver_init_canRxTx+0x2e>
    ) {
        return CO_ERROR_NO;
 8004182:	2300      	movs	r3, #0
 8004184:	e04e      	b.n	8004224 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a3a      	ldr	r2, [r7, #32]
 800418a:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004190:	651a      	str	r2, [r3, #80]	; 0x50
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	2b00      	cmp	r3, #0
 8004196:	db02      	blt.n	800419e <CO_SDOserver_init_canRxTx+0x46>
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	b29b      	uxth	r3, r3
 800419c:	e000      	b.n	80041a0 <CO_SDOserver_init_canRxTx+0x48>
 800419e:	2300      	movs	r3, #0
 80041a0:	82fb      	strh	r3, [r7, #22]
                     (uint16_t)COB_IDClientToServer : 0;
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	db02      	blt.n	80041ae <CO_SDOserver_init_canRxTx+0x56>
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	e000      	b.n	80041b0 <CO_SDOserver_init_canRxTx+0x58>
 80041ae:	2300      	movs	r3, #0
 80041b0:	82bb      	strh	r3, [r7, #20]
                     (uint16_t)COB_IDServerToClient : 0;
    if (idC2S != 0 && idS2C != 0) {
 80041b2:	8afb      	ldrh	r3, [r7, #22]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d006      	beq.n	80041c6 <CO_SDOserver_init_canRxTx+0x6e>
 80041b8:	8abb      	ldrh	r3, [r7, #20]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	611a      	str	r2, [r3, #16]
 80041c4:	e006      	b.n	80041d4 <CO_SDOserver_init_canRxTx+0x7c>
    }
    else {
        idC2S = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 80041ca:	2300      	movs	r3, #0
 80041cc:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 80041d4:	8afa      	ldrh	r2, [r7, #22]
 80041d6:	88f9      	ldrh	r1, [r7, #6]
 80041d8:	4b14      	ldr	r3, [pc, #80]	; (800422c <CO_SDOserver_init_canRxTx+0xd4>)
 80041da:	9302      	str	r3, [sp, #8]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	2300      	movs	r3, #0
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80041e8:	68b8      	ldr	r0, [r7, #8]
 80041ea:	f003 ff63 	bl	80080b4 <CO_CANrxBufferInit>
 80041ee:	4603      	mov	r3, r0
 80041f0:	74fb      	strb	r3, [r7, #19]
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process rx msg */

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	8aba      	ldrh	r2, [r7, #20]
 80041f8:	88b9      	ldrh	r1, [r7, #4]
 80041fa:	2300      	movs	r3, #0
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	2308      	movs	r3, #8
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	2300      	movs	r3, #0
 8004204:	f003 ffb2 	bl	800816c <CO_CANtxBufferInit>
 8004208:	4602      	mov	r2, r0
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	605a      	str	r2, [r3, #4]
            idS2C,                  /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SDO->CANtxBuff == NULL) {
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d104      	bne.n	8004220 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8004216:	23ff      	movs	r3, #255	; 0xff
 8004218:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8004220:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	08004105 	.word	0x08004105

08004230 <OD_write_1201_additional>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1201_additional(OD_stream_t *stream, const void *buf,
                                      OD_size_t count, OD_size_t *countWritten)
{
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b08f      	sub	sp, #60	; 0x3c
 8004234:	af02      	add	r7, sp, #8
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <OD_write_1201_additional+0x20>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <OD_write_1201_additional+0x20>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8004250:	2309      	movs	r3, #9
 8004252:	e0f9      	b.n	8004448 <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t *SDO = (CO_SDOserver_t *)stream->object;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (stream->subIndex) {
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	7c5b      	ldrb	r3, [r3, #17]
 800425e:	2b03      	cmp	r3, #3
 8004260:	f200 80e8 	bhi.w	8004434 <OD_write_1201_additional+0x204>
 8004264:	a201      	add	r2, pc, #4	; (adr r2, 800426c <OD_write_1201_additional+0x3c>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	0800427d 	.word	0x0800427d
 8004270:	08004281 	.word	0x08004281
 8004274:	08004345 	.word	0x08004345
 8004278:	0800440b 	.word	0x0800440b
        case 0: /* Highest sub-index supported */
            return ODR_READONLY;
 800427c:	2304      	movs	r3, #4
 800427e:	e0e3      	b.n	8004448 <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8004280:	68b8      	ldr	r0, [r7, #8]
 8004282:	f7ff feb7 	bl	8003ff4 <CO_getUint32>
 8004286:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	b29b      	uxth	r3, r3
 800428c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004290:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FF);
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004296:	b29b      	uxth	r3, r3
 8004298:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800429c:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	43db      	mvns	r3, r3
 80042a2:	0fdb      	lsrs	r3, r3, #31
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4b69      	ldr	r3, [pc, #420]	; (8004450 <OD_write_1201_additional+0x220>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d134      	bne.n	800431c <OD_write_1201_additional+0xec>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d007      	beq.n	80042c8 <OD_write_1201_additional+0x98>
 80042b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <OD_write_1201_additional+0x98>
 80042c0:	8afa      	ldrh	r2, [r7, #22]
 80042c2:	8abb      	ldrh	r3, [r7, #20]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d129      	bne.n	800431c <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d028      	beq.n	8004320 <OD_write_1201_additional+0xf0>
 80042ce:	8afb      	ldrh	r3, [r7, #22]
 80042d0:	2b7f      	cmp	r3, #127	; 0x7f
 80042d2:	d923      	bls.n	800431c <OD_write_1201_additional+0xec>
 80042d4:	8afb      	ldrh	r3, [r7, #22]
 80042d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042da:	d903      	bls.n	80042e4 <OD_write_1201_additional+0xb4>
 80042dc:	8afb      	ldrh	r3, [r7, #22]
 80042de:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80042e2:	d91b      	bls.n	800431c <OD_write_1201_additional+0xec>
 80042e4:	8afb      	ldrh	r3, [r7, #22]
 80042e6:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80042ea:	d903      	bls.n	80042f4 <OD_write_1201_additional+0xc4>
 80042ec:	8afb      	ldrh	r3, [r7, #22]
 80042ee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042f2:	d313      	bcc.n	800431c <OD_write_1201_additional+0xec>
 80042f4:	8afb      	ldrh	r3, [r7, #22]
 80042f6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042fa:	d903      	bls.n	8004304 <OD_write_1201_additional+0xd4>
 80042fc:	8afb      	ldrh	r3, [r7, #22]
 80042fe:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8004302:	d30b      	bcc.n	800431c <OD_write_1201_additional+0xec>
 8004304:	8afb      	ldrh	r3, [r7, #22]
 8004306:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 800430a:	d303      	bcc.n	8004314 <OD_write_1201_additional+0xe4>
 800430c:	8afb      	ldrh	r3, [r7, #22]
 800430e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004312:	d303      	bcc.n	800431c <OD_write_1201_additional+0xec>
 8004314:	8afb      	ldrh	r3, [r7, #22]
 8004316:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800431a:	d901      	bls.n	8004320 <OD_write_1201_additional+0xf0>
            ) {
                return ODR_INVALID_VALUE;
 800431c:	230f      	movs	r3, #15
 800431e:	e093      	b.n	8004448 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8004320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004322:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004326:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
 8004330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004334:	9301      	str	r3, [sp, #4]
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	4603      	mov	r3, r0
 800433c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800433e:	f7ff ff0b 	bl	8004158 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      COB_ID,
                                      SDO->COB_IDServerToClient);
            break;
 8004342:	e07a      	b.n	800443a <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8004344:	68b8      	ldr	r0, [r7, #8]
 8004346:	f7ff fe55 	bl	8003ff4 <CO_getUint32>
 800434a:	6278      	str	r0, [r7, #36]	; 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	b29b      	uxth	r3, r3
 8004350:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004354:	847b      	strh	r3, [r7, #34]	; 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FF);
 8004356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435a:	b29b      	uxth	r3, r3
 800435c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004360:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	43db      	mvns	r3, r3
 8004366:	0fdb      	lsrs	r3, r3, #31
 8004368:	b2db      	uxtb	r3, r3
 800436a:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 800436c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436e:	4b38      	ldr	r3, [pc, #224]	; (8004450 <OD_write_1201_additional+0x220>)
 8004370:	4013      	ands	r3, r2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d134      	bne.n	80043e0 <OD_write_1201_additional+0x1b0>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <OD_write_1201_additional+0x15c>
 800437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <OD_write_1201_additional+0x15c>
 8004384:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004386:	8c3b      	ldrh	r3, [r7, #32]
 8004388:	429a      	cmp	r2, r3
 800438a:	d129      	bne.n	80043e0 <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d028      	beq.n	80043e4 <OD_write_1201_additional+0x1b4>
 8004392:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004394:	2b7f      	cmp	r3, #127	; 0x7f
 8004396:	d923      	bls.n	80043e0 <OD_write_1201_additional+0x1b0>
 8004398:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800439a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800439e:	d903      	bls.n	80043a8 <OD_write_1201_additional+0x178>
 80043a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043a2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80043a6:	d91b      	bls.n	80043e0 <OD_write_1201_additional+0x1b0>
 80043a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043aa:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80043ae:	d903      	bls.n	80043b8 <OD_write_1201_additional+0x188>
 80043b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043b6:	d313      	bcc.n	80043e0 <OD_write_1201_additional+0x1b0>
 80043b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043ba:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043be:	d903      	bls.n	80043c8 <OD_write_1201_additional+0x198>
 80043c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043c2:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80043c6:	d30b      	bcc.n	80043e0 <OD_write_1201_additional+0x1b0>
 80043c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043ca:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80043ce:	d303      	bcc.n	80043d8 <OD_write_1201_additional+0x1a8>
 80043d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043d6:	d303      	bcc.n	80043e0 <OD_write_1201_additional+0x1b0>
 80043d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043de:	d901      	bls.n	80043e4 <OD_write_1201_additional+0x1b4>
            ) {
                return ODR_INVALID_VALUE;
 80043e0:	230f      	movs	r3, #15
 80043e2:	e031      	b.n	8004448 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 80043e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80043e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ea:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 80043ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f0:	f8b3 404a 	ldrh.w	r4, [r3, #74]	; 0x4a
 80043f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fa:	9201      	str	r2, [sp, #4]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	4623      	mov	r3, r4
 8004400:	4602      	mov	r2, r0
 8004402:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004404:	f7ff fea8 	bl	8004158 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      SDO->COB_IDClientToServer,
                                      COB_ID);
            break;
 8004408:	e017      	b.n	800443a <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1) {
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d001      	beq.n	8004414 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 8004410:	230b      	movs	r3, #11
 8004412:	e019      	b.n	8004448 <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 8004414:	68b8      	ldr	r0, [r7, #8]
 8004416:	f7ff fddf 	bl	8003fd8 <CO_getUint8>
 800441a:	4603      	mov	r3, r0
 800441c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if (nodeId < 1 || nodeId > 127) {
 8004420:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <OD_write_1201_additional+0x200>
 8004428:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800442c:	2b00      	cmp	r3, #0
 800442e:	da03      	bge.n	8004438 <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 8004430:	230f      	movs	r3, #15
 8004432:	e009      	b.n	8004448 <OD_write_1201_additional+0x218>
            }
            break;
        }

        default:
            return ODR_SUB_NOT_EXIST;
 8004434:	230e      	movs	r3, #14
 8004436:	e007      	b.n	8004448 <OD_write_1201_additional+0x218>
            break;
 8004438:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f7fd fad5 	bl	80019f0 <OD_writeOriginal>
 8004446:	4603      	mov	r3, r0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3734      	adds	r7, #52	; 0x34
 800444c:	46bd      	mov	sp, r7
 800444e:	bd90      	pop	{r4, r7, pc}
 8004450:	3ffff800 	.word	0x3ffff800

08004454 <CO_SDOserver_init>:
                                   CO_CANmodule_t *CANdevRx,
                                   uint16_t CANdevRxIdx,
                                   CO_CANmodule_t *CANdevTx,
                                   uint16_t CANdevTxIdx,
                                   uint32_t *errInfo)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08c      	sub	sp, #48	; 0x30
 8004458:	af02      	add	r7, sp, #8
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if (SDO == NULL || OD == NULL || CANdevRx == NULL || CANdevTx == NULL) {
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <CO_SDOserver_init+0x26>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <CO_SDOserver_init+0x26>
 800446e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <CO_SDOserver_init+0x26>
 8004474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d102      	bne.n	8004480 <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800447a:	f04f 33ff 	mov.w	r3, #4294967295
 800447e:	e0f5      	b.n	800466c <CO_SDOserver_init+0x218>
    }

    /* Configure object variables */
    SDO->OD = OD;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	78fa      	ldrb	r2, [r7, #3]
 800448a:	731a      	strb	r2, [r3, #12]
#if ((CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED)
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 800448c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800448e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004492:	fb03 f202 	mul.w	r2, r3, r2
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	675a      	str	r2, [r3, #116]	; 0x74
#endif
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d117      	bne.n	80044d6 <CO_SDOserver_init+0x82>
        /* configure default SDO channel */
        if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 80044a6:	78fb      	ldrb	r3, [r7, #3]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <CO_SDOserver_init+0x60>
 80044ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	da02      	bge.n	80044ba <CO_SDOserver_init+0x66>
 80044b4:	f04f 33ff 	mov.w	r3, #4294967295
 80044b8:	e0d8      	b.n	800466c <CO_SDOserver_init+0x218>

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 80044ba:	78fb      	ldrb	r3, [r7, #3]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80044c2:	84fb      	strh	r3, [r7, #38]	; 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80044cc:	84bb      	strh	r3, [r7, #36]	; 0x24
        SDO->valid = true;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2201      	movs	r2, #1
 80044d2:	611a      	str	r2, [r3, #16]
 80044d4:	e0a4      	b.n	8004620 <CO_SDOserver_init+0x1cc>
    }
    else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7ff fd9a 	bl	8004010 <OD_getIndex>
 80044dc:	4603      	mov	r3, r0
 80044de:	847b      	strh	r3, [r7, #34]	; 0x22

        if (OD_SDOsrvParIdx == OD_H1200_SDO_SERVER_1_PARAM) {
 80044e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80044e2:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 80044e6:	d123      	bne.n	8004530 <CO_SDOserver_init+0xdc>
            /* configure default SDO channel and SDO server parameters for it */
            if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <CO_SDOserver_init+0xa2>
 80044ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	da02      	bge.n	80044fc <CO_SDOserver_init+0xa8>
 80044f6:	f04f 33ff 	mov.w	r3, #4294967295
 80044fa:	e0b7      	b.n	800466c <CO_SDOserver_init+0x218>

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004504:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8004506:	78fb      	ldrb	r3, [r7, #3]
 8004508:	b29b      	uxth	r3, r3
 800450a:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 800450e:	84bb      	strh	r3, [r7, #36]	; 0x24
            SDO->valid = true;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2201      	movs	r2, #1
 8004514:	611a      	str	r2, [r3, #16]

            OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 8004516:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004518:	2301      	movs	r3, #1
 800451a:	2101      	movs	r1, #1
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff fddc 	bl	80040da <OD_set_u32>
            OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 8004522:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004524:	2301      	movs	r3, #1
 8004526:	2102      	movs	r1, #2
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff fdd6 	bl	80040da <OD_set_u32>
 800452e:	e077      	b.n	8004620 <CO_SDOserver_init+0x1cc>
        }
        else if (OD_SDOsrvParIdx > OD_H1200_SDO_SERVER_1_PARAM
 8004530:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004532:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8004536:	d96f      	bls.n	8004618 <CO_SDOserver_init+0x1c4>
                && OD_SDOsrvParIdx <= (OD_H1200_SDO_SERVER_1_PARAM + 0x7F)
 8004538:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800453a:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 800453e:	d26b      	bcs.n	8004618 <CO_SDOserver_init+0x1c4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8004540:	f107 021d 	add.w	r2, r7, #29
 8004544:	2301      	movs	r3, #1
 8004546:	2100      	movs	r1, #0
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7ff fd9c 	bl	8004086 <OD_get_u8>
 800454e:	4603      	mov	r3, r0
 8004550:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1,
 8004554:	f107 0218 	add.w	r2, r7, #24
 8004558:	2301      	movs	r3, #1
 800455a:	2101      	movs	r1, #1
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff fda7 	bl	80040b0 <OD_get_u32>
 8004562:	4603      	mov	r3, r0
 8004564:	f887 3020 	strb.w	r3, [r7, #32]
                                    &COB_IDClientToServer32, true);
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2,
 8004568:	f107 0214 	add.w	r2, r7, #20
 800456c:	2301      	movs	r3, #1
 800456e:	2102      	movs	r1, #2
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff fd9d 	bl	80040b0 <OD_get_u32>
 8004576:	4603      	mov	r3, r0
 8004578:	77fb      	strb	r3, [r7, #31]
                                    &COB_IDServerToClient32, true);

            if (odRet0 != ODR_OK || (maxSubIndex != 2 && maxSubIndex != 3)
 800457a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10d      	bne.n	800459e <CO_SDOserver_init+0x14a>
 8004582:	7f7b      	ldrb	r3, [r7, #29]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d002      	beq.n	800458e <CO_SDOserver_init+0x13a>
 8004588:	7f7b      	ldrb	r3, [r7, #29]
 800458a:	2b03      	cmp	r3, #3
 800458c:	d107      	bne.n	800459e <CO_SDOserver_init+0x14a>
                || odRet1 != ODR_OK || odRet2 != ODR_OK
 800458e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d103      	bne.n	800459e <CO_SDOserver_init+0x14a>
 8004596:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d008      	beq.n	80045b0 <CO_SDOserver_init+0x15c>
            ) {
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 800459e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <CO_SDOserver_init+0x156>
 80045a4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80045a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045a8:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 80045aa:	f06f 030b 	mvn.w	r3, #11
 80045ae:	e05d      	b.n	800466c <CO_SDOserver_init+0x218>
            }


            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	db05      	blt.n	80045c2 <CO_SDOserver_init+0x16e>
                                ? (uint16_t)(COB_IDClientToServer32 & 0x7FF) : 0;
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 80045ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045be:	b29b      	uxth	r3, r3
 80045c0:	e000      	b.n	80045c4 <CO_SDOserver_init+0x170>
 80045c2:	2300      	movs	r3, #0
 80045c4:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	db05      	blt.n	80045d8 <CO_SDOserver_init+0x184>
                                ? (uint16_t)(COB_IDServerToClient32 & 0x7FF) : 0;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 80045d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	e000      	b.n	80045da <CO_SDOserver_init+0x186>
 80045d8:	2300      	movs	r3, #0
 80045da:	84bb      	strh	r3, [r7, #36]	; 0x24

    #if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
            SDO->OD_1200_extension.object = SDO;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	655a      	str	r2, [r3, #84]	; 0x54
            SDO->OD_1200_extension.read = OD_readOriginal;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4a23      	ldr	r2, [pc, #140]	; (8004674 <CO_SDOserver_init+0x220>)
 80045e6:	659a      	str	r2, [r3, #88]	; 0x58
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4a23      	ldr	r2, [pc, #140]	; (8004678 <CO_SDOserver_init+0x224>)
 80045ec:	65da      	str	r2, [r3, #92]	; 0x5c
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar,
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3354      	adds	r3, #84	; 0x54
 80045f2:	4619      	mov	r1, r3
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff fd32 	bl	800405e <OD_extension_init>
 80045fa:	4603      	mov	r3, r0
 80045fc:	77bb      	strb	r3, [r7, #30]
                                            &SDO->OD_1200_extension);
            if (odRetE != ODR_OK) {
 80045fe:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00b      	beq.n	800461e <CO_SDOserver_init+0x1ca>
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 8004606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <CO_SDOserver_init+0x1be>
 800460c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800460e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004610:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 8004612:	f06f 030b 	mvn.w	r3, #11
 8004616:	e029      	b.n	800466c <CO_SDOserver_init+0x218>
            }
    #endif
        }
        else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8004618:	f04f 33ff 	mov.w	r3, #4294967295
 800461c:	e026      	b.n	800466c <CO_SDOserver_init+0x218>
        ) {
 800461e:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	639a      	str	r2, [r3, #56]	; 0x38

    /* store the parameters and configure CANrx and CANtx */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    SDO->CANdevRx = CANdevRx;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800462a:	645a      	str	r2, [r3, #68]	; 0x44
    SDO->CANdevRxIdx = CANdevRxIdx;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8004630:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SDO->CANdevTxIdx = CANdevTxIdx;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800463a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = 0;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    SDO->CANdevTx = CANdevTx;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800464e:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO,
 8004650:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004652:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004654:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 8004658:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800465a:	9201      	str	r2, [sp, #4]
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	4603      	mov	r3, r0
 8004660:	460a      	mov	r2, r1
 8004662:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f7ff fd77 	bl	8004158 <CO_SDOserver_init_canRxTx>
 800466a:	4603      	mov	r3, r0
                                     CANdevRx,
                                     CANdevRxIdx,
                                     CANdevTxIdx,
                                     CanId_ClientToServer,
                                     CanId_ServerToClient);
}
 800466c:	4618      	mov	r0, r3
 800466e:	3728      	adds	r7, #40	; 0x28
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	08001941 	.word	0x08001941
 8004678:	08004231 	.word	0x08004231

0800467c <validateAndWriteToOD>:
 * CO_SDO_ST_ABORT */
static bool_t validateAndWriteToOD(CO_SDOserver_t *SDO,
                                   CO_SDO_abortCode_t *abortCode,
                                   uint8_t crcOperation,
                                   uint16_t crcClient)
{
 800467c:	b590      	push	{r4, r7, lr}
 800467e:	b08d      	sub	sp, #52	; 0x34
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	4611      	mov	r1, r2
 8004688:	461a      	mov	r2, r3
 800468a:	460b      	mov	r3, r1
 800468c:	71fb      	strb	r3, [r7, #7]
 800468e:	4613      	mov	r3, r2
 8004690:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (SDO->finished) {
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d07b      	beq.n	800479a <validateAndWriteToOD+0x11e>
        /* Verify if size of data downloaded matches size indicated. */
        if (SDO->sizeInd > 0 && SDO->sizeTran != SDO->sizeInd) {
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d015      	beq.n	80046d6 <validateAndWriteToOD+0x5a>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d00f      	beq.n	80046d6 <validateAndWriteToOD+0x5a>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 80046be:	429a      	cmp	r2, r3
 80046c0:	d901      	bls.n	80046c6 <validateAndWriteToOD+0x4a>
 80046c2:	4a77      	ldr	r2, [pc, #476]	; (80048a0 <validateAndWriteToOD+0x224>)
 80046c4:	e000      	b.n	80046c8 <validateAndWriteToOD+0x4c>
 80046c6:	4a77      	ldr	r2, [pc, #476]	; (80048a4 <validateAndWriteToOD+0x228>)
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2201      	movs	r2, #1
 80046d0:	751a      	strb	r2, [r3, #20]
            return false;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e0df      	b.n	8004896 <validateAndWriteToOD+0x21a>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	62bb      	str	r3, [r7, #40]	; 0x28

        /* If dataType is string, then size of data downloaded may be
         * shorter than size of OD data buffer. If so, add two zero bytes
         * to terminate (unicode) string. Shorten also OD data size,
         * (temporary, send information about EOF into OD_IO.write) */
        if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046e2:	b25b      	sxtb	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	da3c      	bge.n	8004762 <validateAndWriteToOD+0xe6>
            && (sizeInOd == 0 || SDO->sizeTran < sizeInOd)
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d004      	beq.n	80046f8 <validateAndWriteToOD+0x7c>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d934      	bls.n	8004762 <validateAndWriteToOD+0xe6>
            && (SDO->bufOffsetWr + 2) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046fe:	3302      	adds	r3, #2
 8004700:	2b20      	cmp	r3, #32
 8004702:	d82e      	bhi.n	8004762 <validateAndWriteToOD+0xe6>
        ) {
            SDO->buf[SDO->bufOffsetWr++] = 0;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800470a:	1c59      	adds	r1, r3, #1
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	2200      	movs	r2, #0
 8004718:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            SDO->sizeTran++;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	669a      	str	r2, [r3, #104]	; 0x68
            if (sizeInOd == 0 || SDO->sizeTran < sizeInOd) {
 8004726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004728:	2b00      	cmp	r3, #0
 800472a:	d004      	beq.n	8004736 <validateAndWriteToOD+0xba>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004732:	429a      	cmp	r2, r3
 8004734:	d910      	bls.n	8004758 <validateAndWriteToOD+0xdc>
                SDO->buf[SDO->bufOffsetWr++] = 0;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800473c:	1c59      	adds	r1, r3, #1
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	2200      	movs	r2, #0
 800474a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                SDO->sizeTran++;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	669a      	str	r2, [r3, #104]	; 0x68
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	621a      	str	r2, [r3, #32]
 8004760:	e02d      	b.n	80047be <validateAndWriteToOD+0x142>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check.*/
        else if (sizeInOd == 0) {
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	2b00      	cmp	r3, #0
 8004766:	d104      	bne.n	8004772 <validateAndWriteToOD+0xf6>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	621a      	str	r2, [r3, #32]
 8004770:	e025      	b.n	80047be <validateAndWriteToOD+0x142>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004778:	429a      	cmp	r2, r3
 800477a:	d020      	beq.n	80047be <validateAndWriteToOD+0x142>
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8004780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004782:	429a      	cmp	r2, r3
 8004784:	d201      	bcs.n	800478a <validateAndWriteToOD+0x10e>
 8004786:	4a46      	ldr	r2, [pc, #280]	; (80048a0 <validateAndWriteToOD+0x224>)
 8004788:	e000      	b.n	800478c <validateAndWriteToOD+0x110>
 800478a:	4a46      	ldr	r2, [pc, #280]	; (80048a4 <validateAndWriteToOD+0x228>)
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	751a      	strb	r2, [r3, #20]
            return false;
 8004796:	2300      	movs	r3, #0
 8004798:	e07d      	b.n	8004896 <validateAndWriteToOD+0x21a>
        }
    }
    else {
        /* Verify if size of data downloaded is not too large. */
        if (SDO->sizeInd > 0 && SDO->sizeTran > SDO->sizeInd) {
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00d      	beq.n	80047be <validateAndWriteToOD+0x142>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d907      	bls.n	80047be <validateAndWriteToOD+0x142>
            *abortCode = CO_SDO_AB_DATA_LONG;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	4a3b      	ldr	r2, [pc, #236]	; (80048a0 <validateAndWriteToOD+0x224>)
 80047b2:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2201      	movs	r2, #1
 80047b8:	751a      	strb	r2, [r3, #20]
            return false;
 80047ba:	2300      	movs	r3, #0
 80047bc:	e06b      	b.n	8004896 <validateAndWriteToOD+0x21a>
#endif
    /* may be unused */
    (void) crcOperation; (void) crcClient; (void) bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
    bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3318      	adds	r3, #24
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff fc33 	bl	8004032 <OD_mappable>
 80047cc:	6278      	str	r0, [r7, #36]	; 0x24

    if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d008      	beq.n	80047e6 <validateAndWriteToOD+0x16a>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d8:	f3ef 8210 	mrs	r2, PRIMASK
 80047dc:	61fa      	str	r2, [r7, #28]
  return(result);
 80047de:	69fa      	ldr	r2, [r7, #28]
 80047e0:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80047e2:	b672      	cpsid	i
}
 80047e4:	bf00      	nop
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf,
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f103 0018 	add.w	r0, r3, #24
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80047fc:	f107 0314 	add.w	r3, r7, #20
 8004800:	47a0      	blx	r4
 8004802:	4603      	mov	r3, r0
 8004804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                   SDO->bufOffsetWr, &countWritten);
    if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	2b00      	cmp	r3, #0
 800480c:	d007      	beq.n	800481e <validateAndWriteToOD+0x1a2>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004814:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	f383 8810 	msr	PRIMASK, r3
}
 800481c:	bf00      	nop

    SDO->bufOffsetWr = 0;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    /* verify write error value */
    if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8004826:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800482a:	2b00      	cmp	r3, #0
 800482c:	d011      	beq.n	8004852 <validateAndWriteToOD+0x1d6>
 800482e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8004832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004836:	d00c      	beq.n	8004852 <validateAndWriteToOD+0x1d6>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004838:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800483c:	4618      	mov	r0, r3
 800483e:	f7fd fa9f 	bl	8001d80 <OD_getSDOabCode>
 8004842:	4602      	mov	r2, r0
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2201      	movs	r2, #1
 800484c:	751a      	strb	r2, [r3, #20]
        return false;
 800484e:	2300      	movs	r3, #0
 8004850:	e021      	b.n	8004896 <validateAndWriteToOD+0x21a>
    }
    else if (SDO->finished && odRet == ODR_PARTIAL) {
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00c      	beq.n	8004874 <validateAndWriteToOD+0x1f8>
 800485a:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800485e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004862:	d107      	bne.n	8004874 <validateAndWriteToOD+0x1f8>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4a0f      	ldr	r2, [pc, #60]	; (80048a4 <validateAndWriteToOD+0x228>)
 8004868:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	751a      	strb	r2, [r3, #20]
        return false;
 8004870:	2300      	movs	r3, #0
 8004872:	e010      	b.n	8004896 <validateAndWriteToOD+0x21a>
    }
    else if (!SDO->finished && odRet == ODR_OK) {
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10b      	bne.n	8004894 <validateAndWriteToOD+0x218>
 800487c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8004880:	2b00      	cmp	r3, #0
 8004882:	d107      	bne.n	8004894 <validateAndWriteToOD+0x218>
        /* OD variable was written completely, but SDO download still has data*/
        *abortCode = CO_SDO_AB_DATA_LONG;
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4a06      	ldr	r2, [pc, #24]	; (80048a0 <validateAndWriteToOD+0x224>)
 8004888:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	751a      	strb	r2, [r3, #20]
        return false;
 8004890:	2300      	movs	r3, #0
 8004892:	e000      	b.n	8004896 <validateAndWriteToOD+0x21a>
    }

    return true;
 8004894:	2301      	movs	r3, #1
}
 8004896:	4618      	mov	r0, r3
 8004898:	3734      	adds	r7, #52	; 0x34
 800489a:	46bd      	mov	sp, r7
 800489c:	bd90      	pop	{r4, r7, pc}
 800489e:	bf00      	nop
 80048a0:	06070012 	.word	0x06070012
 80048a4:	06070013 	.word	0x06070013

080048a8 <readFromOd>:
 * CO_SDO_ST_ABORT */
static bool_t readFromOd(CO_SDOserver_t *SDO,
                         CO_SDO_abortCode_t *abortCode,
                         OD_size_t countMinimum,
                         bool_t calculateCrc)
{
 80048a8:	b590      	push	{r4, r7, lr}
 80048aa:	b08f      	sub	sp, #60	; 0x3c
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (!SDO->finished && countRemain < countMinimum) {
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f040 80b1 	bne.w	8004a32 <readFromOd+0x18a>
 80048d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	f080 80ac 	bcs.w	8004a32 <readFromOd+0x18a>
        /* first move remaining data to the start of the buffer */
        memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048ec:	4413      	add	r3, r2
 80048ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048f0:	4619      	mov	r1, r3
 80048f2:	f007 fc57 	bl	800c1a4 <memmove>
        SDO->bufOffsetRd = 0;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        SDO->bufOffsetWr = countRemain;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004902:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 8004906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004908:	f1c3 0320 	rsb	r3, r3, #32
 800490c:	62bb      	str	r3, [r7, #40]	; 0x28

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
        uint8_t *bufShifted = SDO->buf + countRemain;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8004918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491a:	4413      	add	r3, r2
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
        bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3318      	adds	r3, #24
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff fb85 	bl	8004032 <OD_mappable>
 8004928:	6238      	str	r0, [r7, #32]

        if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d008      	beq.n	8004942 <readFromOd+0x9a>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004934:	f3ef 8210 	mrs	r2, PRIMASK
 8004938:	61fa      	str	r2, [r7, #28]
  return(result);
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800493e:	b672      	cpsid	i
}
 8004940:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, bufShifted,
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f103 0018 	add.w	r0, r3, #24
 800494c:	f107 0314 	add.w	r3, r7, #20
 8004950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004952:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004954:	47a0      	blx	r4
 8004956:	4603      	mov	r3, r0
 8004958:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                      countRdRequest, &countRd);
        if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <readFromOd+0xca>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004968:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	f383 8810 	msr	PRIMASK, r3
}
 8004970:	bf00      	nop

        if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8004972:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8004976:	2b00      	cmp	r3, #0
 8004978:	d011      	beq.n	800499e <readFromOd+0xf6>
 800497a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004982:	d00c      	beq.n	800499e <readFromOd+0xf6>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004984:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8004988:	4618      	mov	r0, r3
 800498a:	f7fd f9f9 	bl	8001d80 <OD_getSDOabCode>
 800498e:	4602      	mov	r2, r0
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2201      	movs	r2, #1
 8004998:	751a      	strb	r2, [r3, #20]
            return false;
 800499a:	2300      	movs	r3, #0
 800499c:	e04a      	b.n	8004a34 <readFromOd+0x18c>
        }

        /* if data is string, send only data up to null termination */
        if (countRd > 0 && (SDO->OD_IO.stream.attribute & ODA_STR) != 0) {
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d022      	beq.n	80049ea <readFromOd+0x142>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049aa:	b25b      	sxtb	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	da1c      	bge.n	80049ea <readFromOd+0x142>
            bufShifted[countRd] = 0; /* (SDO->buf is one byte larger) */
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b4:	4413      	add	r3, r2
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char *)bufShifted);
 80049ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049bc:	f7fb fc40 	bl	8000240 <strlen>
 80049c0:	6338      	str	r0, [r7, #48]	; 0x30
            if (countStr == 0) countStr = 1; /* zero length is not allowed */
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <readFromOd+0x124>
 80049c8:	2301      	movs	r3, #1
 80049ca:	633b      	str	r3, [r7, #48]	; 0x30
            if (countStr < countRd) {
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d20a      	bcs.n	80049ea <readFromOd+0x142>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 80049d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d6:	617b      	str	r3, [r7, #20]
                odRet = ODR_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	441a      	add	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ee:	441a      	add	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        if (SDO->bufOffsetWr == 0 || odRet == ODR_PARTIAL) {
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d004      	beq.n	8004a0a <readFromOd+0x162>
 8004a00:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a08:	d110      	bne.n	8004a2c <readFromOd+0x184>
            SDO->finished = false;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	671a      	str	r2, [r3, #112]	; 0x70
            if (SDO->bufOffsetWr < countMinimum) {
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d90a      	bls.n	8004a32 <readFromOd+0x18a>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4a07      	ldr	r2, [pc, #28]	; (8004a3c <readFromOd+0x194>)
 8004a20:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	751a      	strb	r2, [r3, #20]
                return false;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	e003      	b.n	8004a34 <readFromOd+0x18c>
            }
        }
        else {
            SDO->finished = true;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	671a      	str	r2, [r3, #112]	; 0x70
            SDO->block_crc = crc16_ccitt(bufShifted, countRd, SDO->block_crc);
        }
#endif

    }
    return true;
 8004a32:	2301      	movs	r3, #1
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	373c      	adds	r7, #60	; 0x3c
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd90      	pop	{r4, r7, pc}
 8004a3c:	06040047 	.word	0x06040047

08004a40 <CO_SDOserver_process>:
/******************************************************************************/
CO_SDO_return_t CO_SDOserver_process(CO_SDOserver_t *SDO,
                                     bool_t NMTisPreOrOperational,
                                     uint32_t timeDifference_us,
                                     uint32_t *timerNext_us)
{
 8004a40:	b590      	push	{r4, r7, lr}
 8004a42:	b09d      	sub	sp, #116	; 0x74
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d103      	bne.n	8004a5c <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 8004a54:	f06f 0301 	mvn.w	r3, #1
 8004a58:	f000 bd0c 	b.w	8005474 <CO_SDOserver_process+0xa34>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	bf14      	ite	ne
 8004a6e:	2301      	movne	r3, #1
 8004a70:	2300      	moveq	r3, #0
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	65fb      	str	r3, [r7, #92]	; 0x5c


    if (SDO->valid && SDO->state == CO_SDO_ST_IDLE && !isNew) {
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00b      	beq.n	8004a96 <CO_SDOserver_process+0x56>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	7d1b      	ldrb	r3, [r3, #20]
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d106      	bne.n	8004a96 <CO_SDOserver_process+0x56>
 8004a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d103      	bne.n	8004a96 <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004a94:	e2d1      	b.n	800503a <CO_SDOserver_process+0x5fa>
    }
    else if (!NMTisPreOrOperational || !SDO->valid) {
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <CO_SDOserver_process+0x64>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d109      	bne.n	8004ab8 <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state
         * and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	639a      	str	r2, [r3, #56]	; 0x38
        ret = CO_SDO_RT_ok_communicationEnd;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004ab6:	e2c0      	b.n	800503a <CO_SDOserver_process+0x5fa>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 8004ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 82bd 	beq.w	800503a <CO_SDOserver_process+0x5fa>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	7d1b      	ldrb	r3, [r3, #20]
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f040 80ce 	bne.w	8004c68 <CO_SDOserver_process+0x228>
            bool_t upload = false;
 8004acc:	2300      	movs	r3, #0
 8004ace:	66bb      	str	r3, [r7, #104]	; 0x68

            if ((SDO->CANrxData[0] & 0xF0) == 0x20) {
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ada:	2b20      	cmp	r3, #32
 8004adc:	d103      	bne.n	8004ae6 <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2211      	movs	r2, #17
 8004ae2:	751a      	strb	r2, [r3, #20]
 8004ae4:	e00f      	b.n	8004b06 <CO_SDOserver_process+0xc6>
            }
            else if (SDO->CANrxData[0] == 0x40) {
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aec:	2b40      	cmp	r3, #64	; 0x40
 8004aee:	d105      	bne.n	8004afc <CO_SDOserver_process+0xbc>
                upload = true;
 8004af0:	2301      	movs	r3, #1
 8004af2:	66bb      	str	r3, [r7, #104]	; 0x68
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2221      	movs	r2, #33	; 0x21
 8004af8:	751a      	strb	r2, [r3, #20]
 8004afa:	e004      	b.n	8004b06 <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 8004afc:	4ba5      	ldr	r3, [pc, #660]	; (8004d94 <CO_SDOserver_process+0x354>)
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2201      	movs	r2, #1
 8004b04:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 8004b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d162      	bne.n	8004bd2 <CO_SDOserver_process+0x192>
                ODR_t odRet;
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b12:	021b      	lsls	r3, r3, #8
                             | SDO->CANrxData[1];
 8004b14:	b21a      	sxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1c:	b21b      	sxth	r3, r3
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	b21b      	sxth	r3, r3
 8004b22:	b29a      	uxth	r2, r3
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	869a      	strh	r2, [r3, #52]	; 0x34
                SDO->subIndex = SDO->CANrxData[3];
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex,
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	f7fc ffd0 	bl	8001ae4 <OD_find>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f103 0218 	add.w	r2, r3, #24
 8004b50:	2300      	movs	r3, #0
 8004b52:	f7fd f823 	bl	8001b9c <OD_getSub>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
                                  &SDO->OD_IO, false);
                if (odRet != ODR_OK) {
 8004b5c:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <CO_SDOserver_process+0x13a>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004b64:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fd f909 	bl	8001d80 <OD_getSDOabCode>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2201      	movs	r2, #1
 8004b76:	751a      	strb	r2, [r3, #20]
 8004b78:	e02b      	b.n	8004bd2 <CO_SDOserver_process+0x192>
                }
                else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & ODA_SDO_RW) == 0) {
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d105      	bne.n	8004b94 <CO_SDOserver_process+0x154>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 8004b88:	4b83      	ldr	r3, [pc, #524]	; (8004d98 <CO_SDOserver_process+0x358>)
 8004b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	751a      	strb	r2, [r3, #20]
 8004b92:	e01e      	b.n	8004bd2 <CO_SDOserver_process+0x192>
                    }
                    else if (upload
 8004b94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00c      	beq.n	8004bb4 <CO_SDOserver_process+0x174>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_R) == 0
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d105      	bne.n	8004bb4 <CO_SDOserver_process+0x174>
                    ) {
                        abortCode = CO_SDO_AB_WRITEONLY;
 8004ba8:	4b7c      	ldr	r3, [pc, #496]	; (8004d9c <CO_SDOserver_process+0x35c>)
 8004baa:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	751a      	strb	r2, [r3, #20]
 8004bb2:	e00e      	b.n	8004bd2 <CO_SDOserver_process+0x192>
                    }
                    else if (!upload
 8004bb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10b      	bne.n	8004bd2 <CO_SDOserver_process+0x192>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_W) == 0
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d104      	bne.n	8004bd2 <CO_SDOserver_process+0x192>
                    ) {
                        abortCode = CO_SDO_AB_READONLY;
 8004bc8:	4b75      	ldr	r3, [pc, #468]	; (8004da0 <CO_SDOserver_process+0x360>)
 8004bca:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	751a      	strb	r2, [r3, #20]
                }
            }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* load data from object dictionary, if upload and no error */
            if (upload && abortCode == CO_SDO_AB_NONE) {
 8004bd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d047      	beq.n	8004c68 <CO_SDOserver_process+0x228>
 8004bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d144      	bne.n	8004c68 <CO_SDOserver_process+0x228>
                SDO->bufOffsetRd = SDO->bufOffsetWr = 0;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran = 0;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->finished = false;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	671a      	str	r2, [r3, #112]	; 0x70

                if (readFromOd(SDO, &abortCode, 7, false)) {
 8004bfe:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8004c02:	2300      	movs	r3, #0
 8004c04:	2207      	movs	r2, #7
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f7ff fe4e 	bl	80048a8 <readFromOd>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d02a      	beq.n	8004c68 <CO_SDOserver_process+0x228>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d01a      	beq.n	8004c50 <CO_SDOserver_process+0x210>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a1a      	ldr	r2, [r3, #32]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	665a      	str	r2, [r3, #100]	; 0x64

                        if (SDO->sizeInd == 0) {
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d105      	bne.n	8004c36 <CO_SDOserver_process+0x1f6>
                            SDO->sizeInd = SDO->bufOffsetWr;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	665a      	str	r2, [r3, #100]	; 0x64
 8004c34:	e018      	b.n	8004c68 <CO_SDOserver_process+0x228>
                        }
                        else if (SDO->sizeInd != SDO->bufOffsetWr) {
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d011      	beq.n	8004c68 <CO_SDOserver_process+0x228>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8004c44:	4b57      	ldr	r3, [pc, #348]	; (8004da4 <CO_SDOserver_process+0x364>)
 8004c46:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	751a      	strb	r2, [r3, #20]
 8004c4e:	e00b      	b.n	8004c68 <CO_SDOserver_process+0x228>
                        }
                    }
                    else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c56:	b25b      	sxtb	r3, r3
                                     ? SDO->OD_IO.stream.dataLength
                                     : 0;
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	db02      	blt.n	8004c62 <CO_SDOserver_process+0x222>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	e000      	b.n	8004c64 <CO_SDOserver_process+0x224>
 8004c62:	2300      	movs	r3, #0
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	6653      	str	r3, [r2, #100]	; 0x64
                }
            }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	7d1b      	ldrb	r3, [r3, #20]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 81db 	beq.w	800502a <CO_SDOserver_process+0x5ea>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	7d1b      	ldrb	r3, [r3, #20]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	f000 81d5 	beq.w	800502a <CO_SDOserver_process+0x5ea>
        switch (SDO->state) {
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	7d1b      	ldrb	r3, [r3, #20]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	3b11      	subs	r3, #17
 8004c88:	2b12      	cmp	r3, #18
 8004c8a:	f200 81be 	bhi.w	800500a <CO_SDOserver_process+0x5ca>
 8004c8e:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <CO_SDOserver_process+0x254>)
 8004c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c94:	08004ce1 	.word	0x08004ce1
 8004c98:	0800500b 	.word	0x0800500b
 8004c9c:	08004ec3 	.word	0x08004ec3
 8004ca0:	0800500b 	.word	0x0800500b
 8004ca4:	0800500b 	.word	0x0800500b
 8004ca8:	0800500b 	.word	0x0800500b
 8004cac:	0800500b 	.word	0x0800500b
 8004cb0:	0800500b 	.word	0x0800500b
 8004cb4:	0800500b 	.word	0x0800500b
 8004cb8:	0800500b 	.word	0x0800500b
 8004cbc:	0800500b 	.word	0x0800500b
 8004cc0:	0800500b 	.word	0x0800500b
 8004cc4:	0800500b 	.word	0x0800500b
 8004cc8:	0800500b 	.word	0x0800500b
 8004ccc:	0800500b 	.word	0x0800500b
 8004cd0:	0800500b 	.word	0x0800500b
 8004cd4:	08004fb9 	.word	0x08004fb9
 8004cd8:	0800500b 	.word	0x0800500b
 8004cdc:	08004fc1 	.word	0x08004fc1
        case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
            if (SDO->CANrxData[0] & 0x02) {
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 80af 	beq.w	8004e4e <CO_SDOserver_process+0x40e>
                /* Expedited transfer, max 4 bytes of data */

                /* Size of OD variable (>0 if indicated) */
                OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Get SDO data size (indicated by SDO client or get from OD) */
                OD_size_t dataSizeToWrite = 4;
 8004cf6:	2304      	movs	r3, #4
 8004cf8:	667b      	str	r3, [r7, #100]	; 0x64
                if (SDO->CANrxData[0] & 0x01)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <CO_SDOserver_process+0x2de>
                    dataSizeToWrite -= (SDO->CANrxData[0] >> 2) & 0x03;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0e:	089b      	lsrs	r3, r3, #2
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	667b      	str	r3, [r7, #100]	; 0x64
 8004d1c:	e007      	b.n	8004d2e <CO_SDOserver_process+0x2ee>
                else if (sizeInOd > 0 && sizeInOd < 4)
 8004d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d004      	beq.n	8004d2e <CO_SDOserver_process+0x2ee>
 8004d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d26:	2b03      	cmp	r3, #3
 8004d28:	d801      	bhi.n	8004d2e <CO_SDOserver_process+0x2ee>
                    dataSizeToWrite = sizeInOd;
 8004d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d2c:	667b      	str	r3, [r7, #100]	; 0x64

                /* copy data to the temp buffer, swap data if necessary */
                uint8_t buf[6] = {0};
 8004d2e:	2300      	movs	r3, #0
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
 8004d32:	2300      	movs	r3, #0
 8004d34:	853b      	strh	r3, [r7, #40]	; 0x28
                memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8004d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d42:	4618      	mov	r0, r3
 8004d44:	f007 fad2 	bl	800c2ec <memcpy>

                /* If dataType is string, then size of data downloaded may be
                 * shorter as size of OD data buffer. If so, add two zero bytes
                 * to terminate (unicode) string. Shorten also OD data size,
                 * (temporary, send information about EOF into OD_IO.write) */
                if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d4e:	b25b      	sxtb	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	da17      	bge.n	8004d84 <CO_SDOserver_process+0x344>
                    && (sizeInOd == 0 || dataSizeToWrite < sizeInOd)
 8004d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <CO_SDOserver_process+0x322>
 8004d5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d210      	bcs.n	8004d84 <CO_SDOserver_process+0x344>
                ) {
                    OD_size_t delta = sizeInOd - dataSizeToWrite;
 8004d62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	64bb      	str	r3, [r7, #72]	; 0x48
                    dataSizeToWrite += delta == 1 ? 1 : 2;
 8004d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d101      	bne.n	8004d74 <CO_SDOserver_process+0x334>
 8004d70:	2301      	movs	r3, #1
 8004d72:	e000      	b.n	8004d76 <CO_SDOserver_process+0x336>
 8004d74:	2302      	movs	r3, #2
 8004d76:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d78:	4413      	add	r3, r2
 8004d7a:	667b      	str	r3, [r7, #100]	; 0x64
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d80:	621a      	str	r2, [r3, #32]
                ) {
 8004d82:	e021      	b.n	8004dc8 <CO_SDOserver_process+0x388>
                }
                else if (sizeInOd == 0) {
 8004d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10e      	bne.n	8004da8 <CO_SDOserver_process+0x368>
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d8e:	621a      	str	r2, [r3, #32]
 8004d90:	e01a      	b.n	8004dc8 <CO_SDOserver_process+0x388>
 8004d92:	bf00      	nop
 8004d94:	05040001 	.word	0x05040001
 8004d98:	06010000 	.word	0x06010000
 8004d9c:	06010001 	.word	0x06010001
 8004da0:	06010002 	.word	0x06010002
 8004da4:	06040047 	.word	0x06040047
                }
                /* Verify if size of data downloaded matches data size in OD. */
                else if (dataSizeToWrite != sizeInOd) {
 8004da8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d00b      	beq.n	8004dc8 <CO_SDOserver_process+0x388>
                    abortCode = (dataSizeToWrite > sizeInOd) ?
                                CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8004db0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d901      	bls.n	8004dbc <CO_SDOserver_process+0x37c>
 8004db8:	4b97      	ldr	r3, [pc, #604]	; (8005018 <CO_SDOserver_process+0x5d8>)
 8004dba:	e000      	b.n	8004dbe <CO_SDOserver_process+0x37e>
 8004dbc:	4b97      	ldr	r3, [pc, #604]	; (800501c <CO_SDOserver_process+0x5dc>)
                    abortCode = (dataSizeToWrite > sizeInOd) ?
 8004dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	751a      	strb	r2, [r3, #20]
                    break;
 8004dc6:	e130      	b.n	800502a <CO_SDOserver_process+0x5ea>
                }

                /* Copy data */
                OD_size_t countWritten = 0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	623b      	str	r3, [r7, #32]
                bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3318      	adds	r3, #24
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7ff f92e 	bl	8004032 <OD_mappable>
 8004dd6:	6478      	str	r0, [r7, #68]	; 0x44

                if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
 8004dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d008      	beq.n	8004df0 <CO_SDOserver_process+0x3b0>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004de2:	f3ef 8210 	mrs	r2, PRIMASK
 8004de6:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8004de8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dea:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8004dec:	b672      	cpsid	i
}
 8004dee:	bf00      	nop
                ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf,
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f103 0018 	add.w	r0, r3, #24
 8004dfa:	f107 0320 	add.w	r3, r7, #32
 8004dfe:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004e02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e04:	47a0      	blx	r4
 8004e06:	4603      	mov	r3, r0
 8004e08:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                                               dataSizeToWrite, &countWritten);
                if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }
 8004e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d007      	beq.n	8004e22 <CO_SDOserver_process+0x3e2>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e18:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1c:	f383 8810 	msr	PRIMASK, r3
}
 8004e20:	bf00      	nop

                if (odRet != ODR_OK) {
 8004e22:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <CO_SDOserver_process+0x400>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004e2a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fc ffa6 	bl	8001d80 <OD_getSDOabCode>
 8004e34:	4603      	mov	r3, r0
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	751a      	strb	r2, [r3, #20]
                    break;
 8004e3e:	e0f4      	b.n	800502a <CO_SDOserver_process+0x5ea>
                }
                else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2212      	movs	r2, #18
 8004e44:	751a      	strb	r2, [r3, #20]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
                    SDO->finished = true;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	671a      	str	r2, [r3, #112]	; 0x70
#else
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                SDO->state = CO_SDO_ST_ABORT;
#endif
            }
            break;
 8004e4c:	e0ed      	b.n	800502a <CO_SDOserver_process+0x5ea>
                if (SDO->CANrxData[0] & 0x01) {
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d028      	beq.n	8004eae <CO_SDOserver_process+0x46e>
                    OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	653b      	str	r3, [r7, #80]	; 0x50
                    memcpy(&size, &SDO->CANrxData[4], sizeof(size));
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3340      	adds	r3, #64	; 0x40
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	61fb      	str	r3, [r7, #28]
                    SDO->sizeInd = CO_SWAP_32(size);
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	665a      	str	r2, [r3, #100]	; 0x64
                    if (sizeInOd > 0) {
 8004e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d01e      	beq.n	8004eb4 <CO_SDOserver_process+0x474>
                        if (SDO->sizeInd > sizeInOd) {
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d205      	bcs.n	8004e8c <CO_SDOserver_process+0x44c>
                            abortCode = CO_SDO_AB_DATA_LONG;
 8004e80:	4b65      	ldr	r3, [pc, #404]	; (8005018 <CO_SDOserver_process+0x5d8>)
 8004e82:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2201      	movs	r2, #1
 8004e88:	751a      	strb	r2, [r3, #20]
                            break;
 8004e8a:	e0ce      	b.n	800502a <CO_SDOserver_process+0x5ea>
                        else if (SDO->sizeInd < sizeInOd
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d90e      	bls.n	8004eb4 <CO_SDOserver_process+0x474>
                                 && (SDO->OD_IO.stream.attribute & ODA_STR) == 0
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e9c:	b25b      	sxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	db08      	blt.n	8004eb4 <CO_SDOserver_process+0x474>
                            abortCode = CO_SDO_AB_DATA_SHORT;
 8004ea2:	4b5e      	ldr	r3, [pc, #376]	; (800501c <CO_SDOserver_process+0x5dc>)
 8004ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	751a      	strb	r2, [r3, #20]
                            break;
 8004eac:	e0bd      	b.n	800502a <CO_SDOserver_process+0x5ea>
                    SDO->sizeInd = 0;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	665a      	str	r2, [r3, #100]	; 0x64
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2212      	movs	r2, #18
 8004eb8:	751a      	strb	r2, [r3, #20]
                SDO->finished = false;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	671a      	str	r2, [r3, #112]	; 0x70
            break;
 8004ec0:	e0b3      	b.n	800502a <CO_SDOserver_process+0x5ea>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xE0) == 0x00) {
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d16d      	bne.n	8004fac <CO_SDOserver_process+0x56c>
                SDO->finished = (SDO->CANrxData[0] & 0x01) != 0;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	bf14      	ite	ne
 8004ede:	2301      	movne	r3, #1
 8004ee0:	2300      	moveq	r3, #0
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	671a      	str	r2, [r3, #112]	; 0x70

                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef0:	f003 0310 	and.w	r3, r3, #16
 8004ef4:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
                if (toggle != SDO->toggle) {
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004efe:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d005      	beq.n	8004f12 <CO_SDOserver_process+0x4d2>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004f06:	4b46      	ldr	r3, [pc, #280]	; (8005020 <CO_SDOserver_process+0x5e0>)
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	751a      	strb	r2, [r3, #20]
                    break;
 8004f10:	e08b      	b.n	800502a <CO_SDOserver_process+0x5ea>
                }

                /* get data size and write data to the buffer */
                OD_size_t count = 7 - ((SDO->CANrxData[0] >> 1) & 0x07);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f18:	085b      	lsrs	r3, r3, #1
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	43db      	mvns	r3, r3
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	657b      	str	r3, [r7, #84]	; 0x54
                memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f30:	18d0      	adds	r0, r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	333d      	adds	r3, #61	; 0x3d
 8004f36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f38:	4619      	mov	r1, r3
 8004f3a:	f007 f9d7 	bl	800c2ec <memcpy>
                SDO->bufOffsetWr += count;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f46:	441a      	add	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                SDO->sizeTran += count;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f54:	441a      	add	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	669a      	str	r2, [r3, #104]	; 0x68

                /* if data size exceeds variable size, abort */
                if (SDO->OD_IO.stream.dataLength > 0
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <CO_SDOserver_process+0x53a>
                    && SDO->sizeTran > SDO->OD_IO.stream.dataLength
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d905      	bls.n	8004f7a <CO_SDOserver_process+0x53a>
                ) {
                    abortCode = CO_SDO_AB_DATA_LONG;
 8004f6e:	4b2a      	ldr	r3, [pc, #168]	; (8005018 <CO_SDOserver_process+0x5d8>)
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2201      	movs	r2, #1
 8004f76:	751a      	strb	r2, [r3, #20]
                    break;
 8004f78:	e057      	b.n	800502a <CO_SDOserver_process+0x5ea>
                }

                /* if necessary, empty the buffer */
                if (SDO->finished
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <CO_SDOserver_process+0x550>
                    || (CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr)<(7+2)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f88:	f1c3 0320 	rsb	r3, r3, #32
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d809      	bhi.n	8004fa4 <CO_SDOserver_process+0x564>
                ) {
                    if (!validateAndWriteToOD(SDO, &abortCode, 0, 0))
 8004f90:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8004f94:	2300      	movs	r3, #0
 8004f96:	2200      	movs	r2, #0
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f7ff fb6f 	bl	800467c <validateAndWriteToOD>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d041      	beq.n	8005028 <CO_SDOserver_process+0x5e8>
                        break;
                }

                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2214      	movs	r2, #20
 8004fa8:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 8004faa:	e03e      	b.n	800502a <CO_SDOserver_process+0x5ea>
                abortCode = CO_SDO_AB_CMD;
 8004fac:	4b1d      	ldr	r3, [pc, #116]	; (8005024 <CO_SDOserver_process+0x5e4>)
 8004fae:	62fb      	str	r3, [r7, #44]	; 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	751a      	strb	r2, [r3, #20]
            break;
 8004fb6:	e038      	b.n	800502a <CO_SDOserver_process+0x5ea>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

        case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
            SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2222      	movs	r2, #34	; 0x22
 8004fbc:	751a      	strb	r2, [r3, #20]
            break;
 8004fbe:	e034      	b.n	800502a <CO_SDOserver_process+0x5ea>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xEF) == 0x60) {
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8004fca:	2b60      	cmp	r3, #96	; 0x60
 8004fcc:	d117      	bne.n	8004ffe <CO_SDOserver_process+0x5be>
                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
                if (toggle != SDO->toggle) {
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004fe2:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d005      	beq.n	8004ff6 <CO_SDOserver_process+0x5b6>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004fea:	4b0d      	ldr	r3, [pc, #52]	; (8005020 <CO_SDOserver_process+0x5e0>)
 8004fec:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	751a      	strb	r2, [r3, #20]
                    break;
 8004ff4:	e019      	b.n	800502a <CO_SDOserver_process+0x5ea>
                }
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2224      	movs	r2, #36	; 0x24
 8004ffa:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 8004ffc:	e015      	b.n	800502a <CO_SDOserver_process+0x5ea>
                abortCode = CO_SDO_AB_CMD;
 8004ffe:	4b09      	ldr	r3, [pc, #36]	; (8005024 <CO_SDOserver_process+0x5e4>)
 8005000:	62fb      	str	r3, [r7, #44]	; 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2201      	movs	r2, #1
 8005006:	751a      	strb	r2, [r3, #20]
            break;
 8005008:	e00f      	b.n	800502a <CO_SDOserver_process+0x5ea>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            /* unknown message received */
            abortCode = CO_SDO_AB_CMD;
 800500a:	4b06      	ldr	r3, [pc, #24]	; (8005024 <CO_SDOserver_process+0x5e4>)
 800500c:	62fb      	str	r3, [r7, #44]	; 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2201      	movs	r2, #1
 8005012:	751a      	strb	r2, [r3, #20]
 8005014:	e009      	b.n	800502a <CO_SDOserver_process+0x5ea>
 8005016:	bf00      	nop
 8005018:	06070012 	.word	0x06070012
 800501c:	06070013 	.word	0x06070013
 8005020:	05030000 	.word	0x05030000
 8005024:	05040001 	.word	0x05040001
                        break;
 8005028:	bf00      	nop
        }
        } /* switch (SDO->state) */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        SDO->timeoutTimer = 0;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	679a      	str	r2, [r3, #120]	; 0x78
#endif
        timeDifference_us = 0;
 8005030:	2300      	movs	r3, #0
 8005032:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	639a      	str	r2, [r3, #56]	; 0x38
    } /* if (isNew) */

    /* Timeout timers and transmit bufferFull flag ****************************/
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
    if (ret == CO_SDO_RT_waitingResponse) {
 800503a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800503e:	2b01      	cmp	r3, #1
 8005040:	d130      	bne.n	80050a4 <CO_SDOserver_process+0x664>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800504a:	429a      	cmp	r2, r3
 800504c:	d205      	bcs.n	800505a <CO_SDOserver_process+0x61a>
            SDO->timeoutTimer += timeDifference_us;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	441a      	add	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	679a      	str	r2, [r3, #120]	; 0x78
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005062:	429a      	cmp	r2, r3
 8005064:	d305      	bcc.n	8005072 <CO_SDOserver_process+0x632>
            abortCode = CO_SDO_AB_TIMEOUT;
 8005066:	4ba5      	ldr	r3, [pc, #660]	; (80052fc <CO_SDOserver_process+0x8bc>)
 8005068:	62fb      	str	r3, [r7, #44]	; 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2201      	movs	r2, #1
 800506e:	751a      	strb	r2, [r3, #20]
 8005070:	e010      	b.n	8005094 <CO_SDOserver_process+0x654>
        }
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_TIMERNEXT
        else if (timerNext_us != NULL) {
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00d      	beq.n	8005094 <CO_SDOserver_process+0x654>
            /* check again after timeout time elapsed */
            uint32_t diff = SDO->SDOtimeoutTime_us - SDO->timeoutTimer;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	63fb      	str	r3, [r7, #60]	; 0x3c
            if (*timerNext_us > diff) {
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800508a:	429a      	cmp	r2, r3
 800508c:	d202      	bcs.n	8005094 <CO_SDOserver_process+0x654>
                *timerNext_us = diff;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005092:	601a      	str	r2, [r3, #0]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <CO_SDOserver_process+0x664>
            ret = CO_SDO_RT_transmittBufferFull;
 800509e:	2304      	movs	r3, #4
 80050a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 80050a4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	f040 81ab 	bne.w	8005404 <CO_SDOserver_process+0x9c4>
        /* clear response buffer */
        memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	3305      	adds	r3, #5
 80050b4:	2208      	movs	r2, #8
 80050b6:	2100      	movs	r1, #0
 80050b8:	4618      	mov	r0, r3
 80050ba:	f007 f88d 	bl	800c1d8 <memset>

        switch (SDO->state) {
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	7d1b      	ldrb	r3, [r3, #20]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	3b12      	subs	r3, #18
 80050c6:	2b12      	cmp	r3, #18
 80050c8:	f200 8199 	bhi.w	80053fe <CO_SDOserver_process+0x9be>
 80050cc:	a201      	add	r2, pc, #4	; (adr r2, 80050d4 <CO_SDOserver_process+0x694>)
 80050ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d2:	bf00      	nop
 80050d4:	08005121 	.word	0x08005121
 80050d8:	080053ff 	.word	0x080053ff
 80050dc:	080051a3 	.word	0x080051a3
 80050e0:	080053ff 	.word	0x080053ff
 80050e4:	080053ff 	.word	0x080053ff
 80050e8:	080053ff 	.word	0x080053ff
 80050ec:	080053ff 	.word	0x080053ff
 80050f0:	080053ff 	.word	0x080053ff
 80050f4:	080053ff 	.word	0x080053ff
 80050f8:	080053ff 	.word	0x080053ff
 80050fc:	080053ff 	.word	0x080053ff
 8005100:	080053ff 	.word	0x080053ff
 8005104:	080053ff 	.word	0x080053ff
 8005108:	080053ff 	.word	0x080053ff
 800510c:	080053ff 	.word	0x080053ff
 8005110:	080053ff 	.word	0x080053ff
 8005114:	080051ff 	.word	0x080051ff
 8005118:	080053ff 	.word	0x080053ff
 800511c:	080052cd 	.word	0x080052cd
        case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
            SDO->CANtxBuff->data[0] = 0x60;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2260      	movs	r2, #96	; 0x60
 8005126:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005138:	0a1b      	lsrs	r3, r3, #8
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800514e:	721a      	strb	r2, [r3, #8]

            /* reset timeout timer and send message */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            SDO->timeoutTimer = 0;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	679a      	str	r2, [r3, #120]	; 0x78
#endif
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	4619      	mov	r1, r3
 8005160:	4610      	mov	r0, r2
 8005162:	f003 f87d 	bl	8008260 <CO_CANsend>
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            if (SDO->finished) {
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516a:	2b00      	cmp	r3, #0
 800516c:	d006      	beq.n	800517c <CO_SDOserver_process+0x73c>
                SDO->state = CO_SDO_ST_IDLE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8005174:	2300      	movs	r3, #0
 8005176:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            }
#else
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif
            break;
 800517a:	e143      	b.n	8005404 <CO_SDOserver_process+0x9c4>
                SDO->toggle = 0x00;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                SDO->sizeTran = 0;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->bufOffsetWr = 0;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                SDO->bufOffsetRd = 0;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2213      	movs	r2, #19
 800519e:	751a      	strb	r2, [r3, #20]
            break;
 80051a0:	e130      	b.n	8005404 <CO_SDOserver_process+0x9c4>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
            SDO->CANtxBuff->data[0] = 0x20 | SDO->toggle;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f042 0220 	orr.w	r2, r2, #32
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <CO_SDOserver_process+0x782>
 80051be:	2210      	movs	r2, #16
 80051c0:	e000      	b.n	80051c4 <CO_SDOserver_process+0x784>
 80051c2:	2200      	movs	r2, #0
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

            /* reset timeout timer and send message */
            SDO->timeoutTimer = 0;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	679a      	str	r2, [r3, #120]	; 0x78
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	4619      	mov	r1, r3
 80051da:	4610      	mov	r0, r2
 80051dc:	f003 f840 	bl	8008260 <CO_CANsend>
            if (SDO->finished) {
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d006      	beq.n	80051f6 <CO_SDOserver_process+0x7b6>
                SDO->state = CO_SDO_ST_IDLE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 80051ee:	2300      	movs	r3, #0
 80051f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
            }
            break;
 80051f4:	e106      	b.n	8005404 <CO_SDOserver_process+0x9c4>
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2213      	movs	r2, #19
 80051fa:	751a      	strb	r2, [r3, #20]
            break;
 80051fc:	e102      	b.n	8005404 <CO_SDOserver_process+0x9c4>
#endif

        case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* data were already loaded from OD variable */
            if (SDO->sizeInd > 0 && SDO->sizeInd <= 4) {
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005202:	2b00      	cmp	r3, #0
 8005204:	d024      	beq.n	8005250 <CO_SDOserver_process+0x810>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800520a:	2b04      	cmp	r3, #4
 800520c:	d820      	bhi.n	8005250 <CO_SDOserver_process+0x810>
                /* expedited transfer */
                SDO->CANtxBuff->data[0] = (uint8_t)(0x43|((4-SDO->sizeInd)<<2));
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005212:	b2db      	uxtb	r3, r3
 8005214:	f1c3 0304 	rsb	r3, r3, #4
 8005218:	b2db      	uxtb	r3, r3
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	b2da      	uxtb	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	715a      	strb	r2, [r3, #5]
                memcpy(&SDO->CANtxBuff->data[4], &SDO->buf, SDO->sizeInd);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f103 0009 	add.w	r0, r3, #9
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800523c:	461a      	mov	r2, r3
 800523e:	f007 f855 	bl	800c2ec <memcpy>
                SDO->state = CO_SDO_ST_IDLE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8005248:	2300      	movs	r3, #0
 800524a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800524e:	e020      	b.n	8005292 <CO_SDOserver_process+0x852>
            }
            else {
                /* data will be transferred with segmented transfer */
                if (SDO->sizeInd > 0) {
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00e      	beq.n	8005276 <CO_SDOserver_process+0x836>
                    /* indicate data size, if known */
                    uint32_t sizeInd = SDO->sizeInd;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800525c:	63bb      	str	r3, [r7, #56]	; 0x38
                    uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 800525e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005260:	61bb      	str	r3, [r7, #24]
                    SDO->CANtxBuff->data[0] = 0x41;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2241      	movs	r2, #65	; 0x41
 8005268:	715a      	strb	r2, [r3, #5]
                    memcpy(&SDO->CANtxBuff->data[4],
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	3309      	adds	r3, #9
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	e003      	b.n	800527e <CO_SDOserver_process+0x83e>
                           &sizeIndSw, sizeof(sizeIndSw));
                }
                else {
                    SDO->CANtxBuff->data[0] = 0x40;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2240      	movs	r2, #64	; 0x40
 800527c:	715a      	strb	r2, [r3, #5]
                }
                SDO->toggle = 0x00;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                SDO->timeoutTimer = 0;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2223      	movs	r2, #35	; 0x23
 8005290:	751a      	strb	r2, [r3, #20]
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

            /* send message */
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80052a2:	0a1b      	lsrs	r3, r3, #8
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80052b8:	721a      	strb	r2, [r3, #8]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f002 ffcb 	bl	8008260 <CO_CANsend>
            break;
 80052ca:	e09b      	b.n	8005404 <CO_SDOserver_process+0x9c4>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
            /* refill the data buffer if necessary */
            if (!readFromOd(SDO, &abortCode, 7, false))
 80052cc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80052d0:	2300      	movs	r3, #0
 80052d2:	2207      	movs	r2, #7
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f7ff fae7 	bl	80048a8 <readFromOd>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 8090 	beq.w	8005402 <CO_SDOserver_process+0x9c2>
                break;

            /* SDO command specifier with toggle bit */
            SDO->CANtxBuff->data[0] = SDO->toggle;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 80052ec:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d103      	bne.n	8005300 <CO_SDOserver_process+0x8c0>
 80052f8:	2210      	movs	r2, #16
 80052fa:	e002      	b.n	8005302 <CO_SDOserver_process+0x8c2>
 80052fc:	05040000 	.word	0x05040000
 8005300:	2200      	movs	r2, #0
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

            OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	663b      	str	r3, [r7, #96]	; 0x60
            /* verify, if this is the last segment */
            if (count < 7 || (SDO->finished && count == 7)) {
 8005318:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800531a:	2b06      	cmp	r3, #6
 800531c:	d906      	bls.n	800532c <CO_SDOserver_process+0x8ec>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005322:	2b00      	cmp	r3, #0
 8005324:	d01b      	beq.n	800535e <CO_SDOserver_process+0x91e>
 8005326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005328:	2b07      	cmp	r3, #7
 800532a:	d118      	bne.n	800535e <CO_SDOserver_process+0x91e>
                /* indicate last segment and nnn */
                SDO->CANtxBuff->data[0] |= ((7 - count) << 1) | 0x01;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	795a      	ldrb	r2, [r3, #5]
 8005332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005334:	b2db      	uxtb	r3, r3
 8005336:	f1c3 0307 	rsb	r3, r3, #7
 800533a:	b2db      	uxtb	r3, r3
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	b2db      	uxtb	r3, r3
 8005340:	4313      	orrs	r3, r2
 8005342:	b2da      	uxtb	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f042 0201 	orr.w	r2, r2, #1
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8005356:	2300      	movs	r3, #0
 8005358:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800535c:	e007      	b.n	800536e <CO_SDOserver_process+0x92e>
            }
            else {
                SDO->timeoutTimer = 0;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2223      	movs	r2, #35	; 0x23
 8005368:	751a      	strb	r2, [r3, #20]
                count = 7;
 800536a:	2307      	movs	r3, #7
 800536c:	663b      	str	r3, [r7, #96]	; 0x60
            }

            /* copy data segment to CAN message */
            memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd,
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	1d98      	adds	r0, r3, #6
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005380:	4413      	add	r3, r2
 8005382:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005384:	4619      	mov	r1, r3
 8005386:	f006 ffb1 	bl	800c2ec <memcpy>
                   count);
            SDO->bufOffsetRd += count;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005392:	441a      	add	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            SDO->sizeTran += count;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800539e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053a0:	441a      	add	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	669a      	str	r2, [r3, #104]	; 0x68

            /* verify if sizeTran is too large or too short if last segment */
            if (SDO->sizeInd > 0) {
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01e      	beq.n	80053ec <CO_SDOserver_process+0x9ac>
                if (SDO->sizeTran > SDO->sizeInd) {
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d905      	bls.n	80053c6 <CO_SDOserver_process+0x986>
                    abortCode = CO_SDO_AB_DATA_LONG;
 80053ba:	4b30      	ldr	r3, [pc, #192]	; (800547c <CO_SDOserver_process+0xa3c>)
 80053bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	751a      	strb	r2, [r3, #20]
                    break;
 80053c4:	e01e      	b.n	8005404 <CO_SDOserver_process+0x9c4>
                }
                else if (ret == CO_SDO_RT_ok_communicationEnd
 80053c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10e      	bne.n	80053ec <CO_SDOserver_process+0x9ac>
                         && SDO->sizeTran < SDO->sizeInd
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d208      	bcs.n	80053ec <CO_SDOserver_process+0x9ac>
                ) {
                    abortCode = CO_SDO_AB_DATA_SHORT;
 80053da:	4b29      	ldr	r3, [pc, #164]	; (8005480 <CO_SDOserver_process+0xa40>)
 80053dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                    ret = CO_SDO_RT_waitingResponse;
 80053de:	2301      	movs	r3, #1
 80053e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                    SDO->state = CO_SDO_ST_ABORT;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2201      	movs	r2, #1
 80053e8:	751a      	strb	r2, [r3, #20]
                    break;
 80053ea:	e00b      	b.n	8005404 <CO_SDOserver_process+0x9c4>
                }
            }

            /* send message */
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	4619      	mov	r1, r3
 80053f6:	4610      	mov	r0, r2
 80053f8:	f002 ff32 	bl	8008260 <CO_CANsend>
            break;
 80053fc:	e002      	b.n	8005404 <CO_SDOserver_process+0x9c4>
            break;
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            break;
 80053fe:	bf00      	nop
 8005400:	e000      	b.n	8005404 <CO_SDOserver_process+0x9c4>
                break;
 8005402:	bf00      	nop
        }
        } /* switch (SDO->state) */
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 8005404:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005408:	2b01      	cmp	r3, #1
 800540a:	d131      	bne.n	8005470 <CO_SDOserver_process+0xa30>
        if (SDO->state == CO_SDO_ST_ABORT) {
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	7d1b      	ldrb	r3, [r3, #20]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b01      	cmp	r3, #1
 8005414:	d12c      	bne.n	8005470 <CO_SDOserver_process+0xa30>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8005416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005418:	617b      	str	r3, [r7, #20]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2280      	movs	r2, #128	; 0x80
 8005420:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005432:	0a1b      	lsrs	r3, r3, #8
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005448:	721a      	strb	r2, [r3, #8]

            memcpy(&SDO->CANtxBuff->data[4], &code, sizeof(code));
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	3309      	adds	r3, #9
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	601a      	str	r2, [r3, #0]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	4619      	mov	r1, r3
 800545e:	4610      	mov	r0, r2
 8005460:	f002 fefe 	bl	8008260 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 800546a:	23f6      	movs	r3, #246	; 0xf6
 800546c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 8005470:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8005474:	4618      	mov	r0, r3
 8005476:	3774      	adds	r7, #116	; 0x74
 8005478:	46bd      	mov	sp, r7
 800547a:	bd90      	pop	{r4, r7, pc}
 800547c:	06070012 	.word	0x06070012
 8005480:	06070013 	.word	0x06070013

08005484 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8005490:	73fb      	strb	r3, [r7, #15]
 8005492:	7bfb      	ldrb	r3, [r7, #15]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	68fb      	ldr	r3, [r7, #12]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <OD_getIndex+0x14>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	e000      	b.n	80054d2 <OD_getIndex+0x16>
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <OD_extension_init>:
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <OD_extension_init+0x14>
 80054ee:	2305      	movs	r3, #5
 80054f0:	e003      	b.n	80054fa <OD_extension_init+0x1c>
    entry->extension = extension;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <OD_get_u8>:
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b086      	sub	sp, #24
 800550a:	af02      	add	r7, sp, #8
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
 8005512:	460b      	mov	r3, r1
 8005514:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8005516:	7af9      	ldrb	r1, [r7, #11]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	2301      	movs	r3, #1
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f7fc fc4b 	bl	8001dbc <OD_get_value>
 8005526:	4603      	mov	r3, r0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <OD_get_u32>:
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	607a      	str	r2, [r7, #4]
 800553a:	603b      	str	r3, [r7, #0]
 800553c:	460b      	mov	r3, r1
 800553e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8005540:	7af9      	ldrb	r1, [r7, #11]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	2304      	movs	r3, #4
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f7fc fc36 	bl	8001dbc <OD_get_value>
 8005550:	4603      	mov	r3, r0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <CO_SYNCsend>:
 *
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t CO_SYNCsend(CO_SYNC_t *SYNC) {
 800555a:	b580      	push	{r7, lr}
 800555c:	b082      	sub	sp, #8
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	7c9b      	ldrb	r3, [r3, #18]
 8005566:	3301      	adds	r3, #1
 8005568:	b2da      	uxtb	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	749a      	strb	r2, [r3, #18]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	7c9a      	ldrb	r2, [r3, #18]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	7c5b      	ldrb	r3, [r3, #17]
 8005576:	429a      	cmp	r2, r3
 8005578:	d902      	bls.n	8005580 <CO_SYNCsend+0x26>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	749a      	strb	r2, [r3, #18]
    SYNC->timer = 0;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	bf0c      	ite	eq
 800558e:	2301      	moveq	r3, #1
 8005590:	2300      	movne	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	461a      	mov	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	7c92      	ldrb	r2, [r2, #18]
 80055a2:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ac:	4619      	mov	r1, r3
 80055ae:	4610      	mov	r0, r2
 80055b0:	f002 fe56 	bl	8008260 <CO_CANsend>
 80055b4:	4603      	mov	r3, r0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, void *msg) {
 80055be:	b480      	push	{r7}
 80055c0:	b087      	sub	sp, #28
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC = object;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	791b      	ldrb	r3, [r3, #4]
 80055d0:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0) {
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	7c5b      	ldrb	r3, [r3, #17]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10c      	bne.n	80055f8 <CO_SYNC_receive+0x3a>
        if (DLC == 0) {
 80055de:	7bfb      	ldrb	r3, [r7, #15]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d102      	bne.n	80055ea <CO_SYNC_receive+0x2c>
            syncReceived = true;
 80055e4:	2301      	movs	r3, #1
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	e019      	b.n	800561e <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x40;
 80055ea:	7bfb      	ldrb	r3, [r7, #15]
 80055ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	721a      	strb	r2, [r3, #8]
 80055f6:	e012      	b.n	800561e <CO_SYNC_receive+0x60>
        }
    }
    else {
        if (DLC == 1) {
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d109      	bne.n	8005612 <CO_SYNC_receive+0x54>
            uint8_t *data = CO_CANrxMsg_readData(msg);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	3305      	adds	r3, #5
 8005602:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	781a      	ldrb	r2, [r3, #0]
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 800560c:	2301      	movs	r3, #1
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	e005      	b.n	800561e <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x80;
 8005612:	7bfb      	ldrb	r3, [r7, #15]
 8005614:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005618:	b2da      	uxtb	r2, r3
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00c      	beq.n	800563e <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	bf0c      	ite	eq
 800562c:	2301      	moveq	r3, #1
 800562e:	2300      	movne	r3, #0
 8005630:	b2db      	uxtb	r3, r3
 8005632:	461a      	mov	r2, r3
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2201      	movs	r2, #1
 800563c:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
	...

0800564c <OD_write_1005>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1005(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 800564c:	b590      	push	{r4, r7, lr}
 800564e:	b08f      	sub	sp, #60	; 0x3c
 8005650:	af04      	add	r7, sp, #16
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00c      	beq.n	800567a <OD_write_1005+0x2e>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	7c5b      	ldrb	r3, [r3, #17]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d108      	bne.n	800567a <OD_write_1005+0x2e>
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d005      	beq.n	800567a <OD_write_1005+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b04      	cmp	r3, #4
 8005672:	d102      	bne.n	800567a <OD_write_1005+0x2e>
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <OD_write_1005+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 800567a:	2309      	movs	r3, #9
 800567c:	e0a3      	b.n	80057c6 <OD_write_1005+0x17a>
    }

    CO_SYNC_t *SYNC = stream->object;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 8005684:	68b8      	ldr	r0, [r7, #8]
 8005686:	f7ff ff0b 	bl	80054a0 <CO_getUint32>
 800568a:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FF);
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	b29b      	uxth	r3, r3
 8005690:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005694:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    bool_t isProducer = (cobIdSync & 0x40000000) != 0;
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	bf14      	ite	ne
 80056a0:	2301      	movne	r3, #1
 80056a2:	2300      	moveq	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	61bb      	str	r3, [r7, #24]
    if ((cobIdSync & 0xBFFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 80056a8:	6a3a      	ldr	r2, [r7, #32]
 80056aa:	4b49      	ldr	r3, [pc, #292]	; (80057d0 <OD_write_1005+0x184>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d133      	bne.n	800571a <OD_write_1005+0xce>
 80056b2:	8bfb      	ldrh	r3, [r7, #30]
 80056b4:	2b7f      	cmp	r3, #127	; 0x7f
 80056b6:	d930      	bls.n	800571a <OD_write_1005+0xce>
 80056b8:	8bfb      	ldrh	r3, [r7, #30]
 80056ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056be:	d903      	bls.n	80056c8 <OD_write_1005+0x7c>
 80056c0:	8bfb      	ldrh	r3, [r7, #30]
 80056c2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80056c6:	d928      	bls.n	800571a <OD_write_1005+0xce>
 80056c8:	8bfb      	ldrh	r3, [r7, #30]
 80056ca:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80056ce:	d903      	bls.n	80056d8 <OD_write_1005+0x8c>
 80056d0:	8bfb      	ldrh	r3, [r7, #30]
 80056d2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80056d6:	d320      	bcc.n	800571a <OD_write_1005+0xce>
 80056d8:	8bfb      	ldrh	r3, [r7, #30]
 80056da:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80056de:	d903      	bls.n	80056e8 <OD_write_1005+0x9c>
 80056e0:	8bfb      	ldrh	r3, [r7, #30]
 80056e2:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80056e6:	d318      	bcc.n	800571a <OD_write_1005+0xce>
 80056e8:	8bfb      	ldrh	r3, [r7, #30]
 80056ea:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80056ee:	d303      	bcc.n	80056f8 <OD_write_1005+0xac>
 80056f0:	8bfb      	ldrh	r3, [r7, #30]
 80056f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056f6:	d310      	bcc.n	800571a <OD_write_1005+0xce>
 80056f8:	8bfb      	ldrh	r3, [r7, #30]
 80056fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056fe:	d80c      	bhi.n	800571a <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && CAN_ID != SYNC->CAN_ID)
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <OD_write_1005+0xd2>
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d007      	beq.n	800571e <OD_write_1005+0xd2>
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005714:	8bfa      	ldrh	r2, [r7, #30]
 8005716:	429a      	cmp	r2, r3
 8005718:	d001      	beq.n	800571e <OD_write_1005+0xd2>
    ) {
        return ODR_INVALID_VALUE;
 800571a:	230f      	movs	r3, #15
 800571c:	e053      	b.n	80057c6 <OD_write_1005+0x17a>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005724:	8bfa      	ldrh	r2, [r7, #30]
 8005726:	429a      	cmp	r2, r3
 8005728:	d03a      	beq.n	80057a0 <OD_write_1005+0x154>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 8005732:	8bfa      	ldrh	r2, [r7, #30]
 8005734:	4b27      	ldr	r3, [pc, #156]	; (80057d4 <OD_write_1005+0x188>)
 8005736:	9302      	str	r3, [sp, #8]
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	9301      	str	r3, [sp, #4]
 800573c:	2300      	movs	r3, #0
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005744:	f002 fcb6 	bl	80080b4 <CO_CANrxBufferInit>
 8005748:	4603      	mov	r3, r0
 800574a:	75fb      	strb	r3, [r7, #23]
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/

        if (CANret != CO_ERROR_NO) {
 800574c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 8005754:	2309      	movs	r3, #9
 8005756:	e036      	b.n	80057c6 <OD_write_1005+0x17a>
        }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
            SYNC->CANdevTx,     /* CAN device */
            SYNC->CANdevTxIdx,  /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            SYNC->counterOverflowValue != 0 ? 1 : 0, /* number of data bytes */
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 8005766:	2b00      	cmp	r3, #0
 8005768:	bf14      	ite	ne
 800576a:	2301      	movne	r3, #1
 800576c:	2300      	moveq	r3, #0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	461c      	mov	r4, r3
 8005772:	8bfa      	ldrh	r2, [r7, #30]
 8005774:	2300      	movs	r3, #0
 8005776:	9301      	str	r3, [sp, #4]
 8005778:	9400      	str	r4, [sp, #0]
 800577a:	2300      	movs	r3, #0
 800577c:	f002 fcf6 	bl	800816c <CO_CANtxBufferInit>
 8005780:	4602      	mov	r2, r0
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	629a      	str	r2, [r3, #40]	; 0x28
            0);                 /* synchronous message flag bit */

        if (SYNC->CANtxBuff == NULL) {
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578a:	2b00      	cmp	r3, #0
 800578c:	d104      	bne.n	8005798 <OD_write_1005+0x14c>
            SYNC->isProducer = false;
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	2200      	movs	r2, #0
 8005792:	625a      	str	r2, [r3, #36]	; 0x24
            return ODR_DEV_INCOMPAT;
 8005794:	2309      	movs	r3, #9
 8005796:	e016      	b.n	80057c6 <OD_write_1005+0x17a>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	8bfa      	ldrh	r2, [r7, #30]
 800579c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = isProducer;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (isProducer) {
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d005      	beq.n	80057b8 <OD_write_1005+0x16c>
        SYNC->counter = 0;
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	2200      	movs	r2, #0
 80057b0:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	2200      	movs	r2, #0
 80057b6:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f7fc f916 	bl	80019f0 <OD_writeOriginal>
 80057c4:	4603      	mov	r3, r0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	372c      	adds	r7, #44	; 0x2c
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd90      	pop	{r4, r7, pc}
 80057ce:	bf00      	nop
 80057d0:	bffff800 	.word	0xbffff800
 80057d4:	080055bf 	.word	0x080055bf

080057d8 <OD_write_1019>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1019(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80057d8:	b590      	push	{r4, r7, lr}
 80057da:	b089      	sub	sp, #36	; 0x24
 80057dc:	af02      	add	r7, sp, #8
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00c      	beq.n	8005806 <OD_write_1019+0x2e>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	7c5b      	ldrb	r3, [r3, #17]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d108      	bne.n	8005806 <OD_write_1019+0x2e>
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d005      	beq.n	8005806 <OD_write_1019+0x2e>
        || count != sizeof(uint8_t) || countWritten == NULL
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d102      	bne.n	8005806 <OD_write_1019+0x2e>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <OD_write_1019+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8005806:	2309      	movs	r3, #9
 8005808:	e041      	b.n	800588e <OD_write_1019+0xb6>
    }

    CO_SYNC_t *SYNC = stream->object;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 8005810:	68b8      	ldr	r0, [r7, #8]
 8005812:	f7ff fe37 	bl	8005484 <CO_getUint8>
 8005816:	4603      	mov	r3, r0
 8005818:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if (syncCounterOvf == 1 || syncCounterOvf > 240) {
 800581a:	7cfb      	ldrb	r3, [r7, #19]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d002      	beq.n	8005826 <OD_write_1019+0x4e>
 8005820:	7cfb      	ldrb	r3, [r7, #19]
 8005822:	2bf0      	cmp	r3, #240	; 0xf0
 8005824:	d901      	bls.n	800582a <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 8005826:	230f      	movs	r3, #15
 8005828:	e031      	b.n	800588e <OD_write_1019+0xb6>
    }
    if (*SYNC->OD_1006_period != 0) {
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 8005834:	2317      	movs	r3, #23
 8005836:	e02a      	b.n	800588e <OD_write_1019+0xb6>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8005848:	7cfb      	ldrb	r3, [r7, #19]
 800584a:	2b00      	cmp	r3, #0
 800584c:	bf14      	ite	ne
 800584e:	2301      	movne	r3, #1
 8005850:	2300      	moveq	r3, #0
 8005852:	b2db      	uxtb	r3, r3
 8005854:	461c      	mov	r4, r3
 8005856:	2300      	movs	r3, #0
 8005858:	9301      	str	r3, [sp, #4]
 800585a:	9400      	str	r4, [sp, #0]
 800585c:	2300      	movs	r3, #0
 800585e:	f002 fc85 	bl	800816c <CO_CANtxBufferInit>
 8005862:	4602      	mov	r2, r0
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	629a      	str	r2, [r3, #40]	; 0x28
        SYNC->CAN_ID,       /* CAN identifier */
        0,                  /* rtr */
        syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
        0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586c:	2b00      	cmp	r3, #0
 800586e:	d104      	bne.n	800587a <OD_write_1019+0xa2>
        SYNC->isProducer = false;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	2200      	movs	r2, #0
 8005874:	625a      	str	r2, [r3, #36]	; 0x24
        return ODR_DEV_INCOMPAT;
 8005876:	2309      	movs	r3, #9
 8005878:	e009      	b.n	800588e <OD_write_1019+0xb6>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	7cfa      	ldrb	r2, [r7, #19]
 800587e:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f7fc f8b2 	bl	80019f0 <OD_writeOriginal>
 800588c:	4603      	mov	r3, r0
}
 800588e:	4618      	mov	r0, r3
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	bd90      	pop	{r4, r7, pc}
	...

08005898 <CO_SYNC_init>:
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b08c      	sub	sp, #48	; 0x30
 800589c:	af04      	add	r7, sp, #16
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
 80058a4:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if (SYNC == NULL || em == NULL || OD_1005_cobIdSync == NULL
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00e      	beq.n	80058ca <CO_SYNC_init+0x32>
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00b      	beq.n	80058ca <CO_SYNC_init+0x32>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d008      	beq.n	80058ca <CO_SYNC_init+0x32>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        || OD_1006_commCyclePeriod == NULL || CANdevTx == NULL
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <CO_SYNC_init+0x32>
 80058be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <CO_SYNC_init+0x32>
#endif
        || CANdevRx == NULL
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d102      	bne.n	80058d0 <CO_SYNC_init+0x38>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80058ca:	f04f 33ff 	mov.w	r3, #4294967295
 80058ce:	e0fe      	b.n	8005ace <CO_SYNC_init+0x236>
    }

    /* clear object */
    memset(SYNC, 0, sizeof(CO_SYNC_t));
 80058d0:	2260      	movs	r2, #96	; 0x60
 80058d2:	2100      	movs	r1, #0
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f006 fc7f 	bl	800c1d8 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 80058da:	2380      	movs	r3, #128	; 0x80
 80058dc:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 80058de:	f107 0218 	add.w	r2, r7, #24
 80058e2:	2301      	movs	r3, #1
 80058e4:	2100      	movs	r1, #0
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff fe22 	bl	8005530 <OD_get_u32>
 80058ec:	4603      	mov	r3, r0
 80058ee:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 80058f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00c      	beq.n	8005912 <CO_SYNC_init+0x7a>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1005_cobIdSync);
 80058f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d006      	beq.n	800590c <CO_SYNC_init+0x74>
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff fddc 	bl	80054bc <OD_getIndex>
 8005904:	4603      	mov	r3, r0
 8005906:	461a      	mov	r2, r3
 8005908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800590a:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800590c:	f06f 030b 	mvn.w	r3, #11
 8005910:	e0dd      	b.n	8005ace <CO_SYNC_init+0x236>
    }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->OD_1005_extension.object = SYNC;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	635a      	str	r2, [r3, #52]	; 0x34
    SYNC->OD_1005_extension.read = OD_readOriginal;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4a6f      	ldr	r2, [pc, #444]	; (8005ad8 <CO_SYNC_init+0x240>)
 800591c:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->OD_1005_extension.write = OD_write_1005;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4a6e      	ldr	r2, [pc, #440]	; (8005adc <CO_SYNC_init+0x244>)
 8005922:	63da      	str	r2, [r3, #60]	; 0x3c
    OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3334      	adds	r3, #52	; 0x34
 8005928:	4619      	mov	r1, r3
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff fdd7 	bl	80054de <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0,
 8005930:	2300      	movs	r3, #0
 8005932:	2204      	movs	r2, #4
 8005934:	2100      	movs	r1, #0
 8005936:	6838      	ldr	r0, [r7, #0]
 8005938:	f7fc faa7 	bl	8001e8a <OD_getPtr>
 800593c:	4602      	mov	r2, r0
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	61da      	str	r2, [r3, #28]
                                     sizeof(uint32_t), NULL);
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    if (SYNC->OD_1006_period == NULL) {
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10c      	bne.n	8005964 <CO_SYNC_init+0xcc>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 800594a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800594c:	2b00      	cmp	r3, #0
 800594e:	d006      	beq.n	800595e <CO_SYNC_init+0xc6>
 8005950:	6838      	ldr	r0, [r7, #0]
 8005952:	f7ff fdb3 	bl	80054bc <OD_getIndex>
 8005956:	4603      	mov	r3, r0
 8005958:	461a      	mov	r2, r3
 800595a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800595c:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800595e:	f06f 030b 	mvn.w	r3, #11
 8005962:	e0b4      	b.n	8005ace <CO_SYNC_init+0x236>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0,
 8005964:	2300      	movs	r3, #0
 8005966:	2204      	movs	r2, #4
 8005968:	2100      	movs	r1, #0
 800596a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800596c:	f7fc fa8d 	bl	8001e8a <OD_getPtr>
 8005970:	4602      	mov	r2, r0
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	621a      	str	r2, [r3, #32]
                                     sizeof(uint32_t), NULL);
    if (OD_1007_syncWindowLen != NULL && SYNC->OD_1007_window == NULL) {
 8005976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005978:	2b00      	cmp	r3, #0
 800597a:	d010      	beq.n	800599e <CO_SYNC_init+0x106>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10c      	bne.n	800599e <CO_SYNC_init+0x106>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 8005984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005986:	2b00      	cmp	r3, #0
 8005988:	d006      	beq.n	8005998 <CO_SYNC_init+0x100>
 800598a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800598c:	f7ff fd96 	bl	80054bc <OD_getIndex>
 8005990:	4603      	mov	r3, r0
 8005992:	461a      	mov	r2, r3
 8005994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005996:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8005998:	f06f 030b 	mvn.w	r3, #11
 800599c:	e097      	b.n	8005ace <CO_SYNC_init+0x236>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and
     * configure extension */
    uint8_t syncCounterOvf = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 80059a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d033      	beq.n	8005a10 <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 80059a8:	f107 0217 	add.w	r2, r7, #23
 80059ac:	2301      	movs	r3, #1
 80059ae:	2100      	movs	r1, #0
 80059b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059b2:	f7ff fda8 	bl	8005506 <OD_get_u8>
 80059b6:	4603      	mov	r3, r0
 80059b8:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 80059ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00c      	beq.n	80059dc <CO_SYNC_init+0x144>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 80059c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d006      	beq.n	80059d6 <CO_SYNC_init+0x13e>
 80059c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059ca:	f7ff fd77 	bl	80054bc <OD_getIndex>
 80059ce:	4603      	mov	r3, r0
 80059d0:	461a      	mov	r2, r3
 80059d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059d4:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 80059d6:	f06f 030b 	mvn.w	r3, #11
 80059da:	e078      	b.n	8005ace <CO_SYNC_init+0x236>
        }
        if (syncCounterOvf == 1) syncCounterOvf = 2;
 80059dc:	7dfb      	ldrb	r3, [r7, #23]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d102      	bne.n	80059e8 <CO_SYNC_init+0x150>
 80059e2:	2302      	movs	r3, #2
 80059e4:	75fb      	strb	r3, [r7, #23]
 80059e6:	e004      	b.n	80059f2 <CO_SYNC_init+0x15a>
        else if (syncCounterOvf > 240) syncCounterOvf = 240;
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
 80059ea:	2bf0      	cmp	r3, #240	; 0xf0
 80059ec:	d901      	bls.n	80059f2 <CO_SYNC_init+0x15a>
 80059ee:	23f0      	movs	r3, #240	; 0xf0
 80059f0:	75fb      	strb	r3, [r7, #23]

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->OD_1019_extension.object = SYNC;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	651a      	str	r2, [r3, #80]	; 0x50
        SYNC->OD_1019_extension.read = OD_readOriginal;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4a37      	ldr	r2, [pc, #220]	; (8005ad8 <CO_SYNC_init+0x240>)
 80059fc:	655a      	str	r2, [r3, #84]	; 0x54
        SYNC->OD_1019_extension.write = OD_write_1019;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4a37      	ldr	r2, [pc, #220]	; (8005ae0 <CO_SYNC_init+0x248>)
 8005a02:	659a      	str	r2, [r3, #88]	; 0x58
        OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	3350      	adds	r3, #80	; 0x50
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a0c:	f7ff fd67 	bl	80054de <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8005a10:	7dfa      	ldrb	r2, [r7, #23]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = (cobIdSync & 0x40000000) != 0;
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	bf14      	ite	ne
 8005a26:	2301      	movne	r3, #1
 8005a28:	2300      	moveq	r3, #0
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->CAN_ID = cobIdSync & 0x7FF;
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    SYNC->CANdevRx = CANdevRx;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a46:	62da      	str	r2, [r3, #44]	; 0x2c
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005a4c:	861a      	strh	r2, [r3, #48]	; 0x30
 #if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANdevTx = CANdevTx;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a52:	649a      	str	r2, [r3, #72]	; 0x48
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005a58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 #endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8005a68:	4b1e      	ldr	r3, [pc, #120]	; (8005ae4 <CO_SYNC_init+0x24c>)
 8005a6a:	9302      	str	r3, [sp, #8]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	9301      	str	r3, [sp, #4]
 8005a70:	2300      	movs	r3, #0
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a7a:	f002 fb1b 	bl	80080b4 <CO_CANrxBufferInit>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	77bb      	strb	r3, [r7, #30]
            cobIdSync & 0x7FF,  /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/
    if (ret != CO_ERROR_NO)
 8005a82:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <CO_SYNC_init+0x1f8>
        return ret;
 8005a8a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005a8e:	e01e      	b.n	8005ace <CO_SYNC_init+0x236>

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	7dfb      	ldrb	r3, [r7, #23]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	bf14      	ite	ne
 8005aa0:	2301      	movne	r3, #1
 8005aa2:	2300      	moveq	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8005aaa:	2300      	movs	r3, #0
 8005aac:	9301      	str	r3, [sp, #4]
 8005aae:	9000      	str	r0, [sp, #0]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ab4:	f002 fb5a 	bl	800816c <CO_CANtxBufferInit>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	629a      	str	r2, [r3, #40]	; 0x28
            cobIdSync & 0x7FF,  /* CAN identifier */
            0,                  /* rtr */
            syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d102      	bne.n	8005acc <CO_SYNC_init+0x234>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aca:	e000      	b.n	8005ace <CO_SYNC_init+0x236>
#endif

    return CO_ERROR_NO;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3720      	adds	r7, #32
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	08001941 	.word	0x08001941
 8005adc:	0800564d 	.word	0x0800564d
 8005ae0:	080057d9 	.word	0x080057d9
 8005ae4:	080055bf 	.word	0x080055bf

08005ae8 <CO_SYNC_process>:
/******************************************************************************/
CO_SYNC_status_t CO_SYNC_process(CO_SYNC_t *SYNC,
                                 bool_t NMTisPreOrOperational,
                                 uint32_t timeDifference_us,
                                 uint32_t *timerNext_us)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08c      	sub	sp, #48	; 0x30
 8005aec:	af02      	add	r7, sp, #8
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 8005af6:	2300      	movs	r3, #0
 8005af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (NMTisPreOrOperational) {
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 80ac 	beq.w	8005c5c <CO_SYNC_process+0x174>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	61fb      	str	r3, [r7, #28]
        if (timerNew > SYNC->timer) SYNC->timer = timerNew;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d902      	bls.n	8005b1e <CO_SYNC_process+0x36>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	69fa      	ldr	r2, [r7, #28]
 8005b1c:	619a      	str	r2, [r3, #24]

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d008      	beq.n	8005b38 <CO_SYNC_process+0x50>
            SYNC->timer = 0;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	69db      	ldr	r3, [r3, #28]
                                ? *SYNC->OD_1006_period : 0;
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <CO_SYNC_process+0x60>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	e000      	b.n	8005b4a <CO_SYNC_process+0x62>
 8005b48:	2300      	movs	r3, #0
        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 8005b4a:	61bb      	str	r3, [r7, #24]

        if (OD_1006_period > 0) {
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d053      	beq.n	8005bfa <CO_SYNC_process+0x112>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
            if (SYNC->isProducer) {
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d01b      	beq.n	8005b92 <CO_SYNC_process+0xaa>
                if (SYNC->timer >= OD_1006_period) {
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d805      	bhi.n	8005b70 <CO_SYNC_process+0x88>
                    syncStatus = CO_SYNC_RX_TX;
 8005b64:	2301      	movs	r3, #1
 8005b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    CO_SYNCsend(SYNC);
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f7ff fcf5 	bl	800555a <CO_SYNCsend>
                }
 #if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_TIMERNEXT
                /* Calculate when next SYNC needs to be sent */
                if (timerNext_us != NULL) {
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d041      	beq.n	8005bfa <CO_SYNC_process+0x112>
                    uint32_t diff = OD_1006_period - SYNC->timer;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	613b      	str	r3, [r7, #16]
                    if (*timerNext_us > diff) {
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d237      	bcs.n	8005bfa <CO_SYNC_process+0x112>
                        *timerNext_us = diff;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	e033      	b.n	8005bfa <CO_SYNC_process+0x112>
            }
            else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

            /* Verify timeout of SYNC */
            if (SYNC->timeoutError == 1) {
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	7c1b      	ldrb	r3, [r3, #16]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d12f      	bne.n	8005bfa <CO_SYNC_process+0x112>
                /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	085b      	lsrs	r3, r3, #1
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	623b      	str	r3, [r7, #32]
                if (periodTimeout < OD_1006_period) periodTimeout = 0xFFFFFFFF;
 8005ba4:	6a3a      	ldr	r2, [r7, #32]
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d202      	bcs.n	8005bb2 <CO_SYNC_process+0xca>
 8005bac:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb0:	623b      	str	r3, [r7, #32]

                if (SYNC->timer > periodTimeout) {
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	6a3a      	ldr	r2, [r7, #32]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d20e      	bcs.n	8005bda <CO_SYNC_process+0xf2>
                    CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT,
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8005bca:	2218      	movs	r2, #24
 8005bcc:	2101      	movs	r1, #1
 8005bce:	f7fb f875 	bl	8000cbc <CO_error>
                                   CO_EMC_COMMUNICATION, SYNC->timer);
                    SYNC->timeoutError = 2;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	741a      	strb	r2, [r3, #16]
 8005bd8:	e00f      	b.n	8005bfa <CO_SYNC_process+0x112>
                }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_TIMERNEXT
                else if (timerNext_us != NULL) {
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00c      	beq.n	8005bfa <CO_SYNC_process+0x112>
                    uint32_t diff = periodTimeout - SYNC->timer;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	6a3a      	ldr	r2, [r7, #32]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	617b      	str	r3, [r7, #20]
                    if (*timerNext_us > diff) {
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d202      	bcs.n	8005bfa <CO_SYNC_process+0x112>
                        *timerNext_us = diff;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	601a      	str	r2, [r3, #0]
#endif
            }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if (SYNC->OD_1007_window != NULL && *SYNC->OD_1007_window > 0
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d016      	beq.n	8005c30 <CO_SYNC_process+0x148>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d011      	beq.n	8005c30 <CO_SYNC_process+0x148>
            && SYNC->timer > *SYNC->OD_1007_window
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	699a      	ldr	r2, [r3, #24]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d90a      	bls.n	8005c30 <CO_SYNC_process+0x148>
        ) {
            if (!SYNC->syncIsOutsideWindow) {
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d102      	bne.n	8005c28 <CO_SYNC_process+0x140>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 8005c22:	2302      	movs	r3, #2
 8005c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            SYNC->syncIsOutsideWindow = true;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	615a      	str	r2, [r3, #20]
 8005c2e:	e002      	b.n	8005c36 <CO_SYNC_process+0x14e>
        }
        else {
            SYNC->syncIsOutsideWindow = false;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0) {
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	7a1b      	ldrb	r3, [r3, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d01a      	beq.n	8005c74 <CO_SYNC_process+0x18c>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH,
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6818      	ldr	r0, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	7a1b      	ldrb	r3, [r3, #8]
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	f248 2340 	movw	r3, #33344	; 0x8240
 8005c4c:	2219      	movs	r2, #25
 8005c4e:	2101      	movs	r1, #1
 8005c50:	f7fb f834 	bl	8000cbc <CO_error>
                           CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
            SYNC->receiveError = 0;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	721a      	strb	r2, [r3, #8]
 8005c5a:	e00b      	b.n	8005c74 <CO_SYNC_process+0x18c>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 8005c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d10f      	bne.n	8005c9c <CO_SYNC_process+0x1b4>
        if (SYNC->timeoutError == 2) {
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	7c1b      	ldrb	r3, [r3, #16]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d108      	bne.n	8005c96 <CO_SYNC_process+0x1ae>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6818      	ldr	r0, [r3, #0]
 8005c88:	2300      	movs	r3, #0
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	2218      	movs	r2, #24
 8005c90:	2100      	movs	r1, #0
 8005c92:	f7fb f813 	bl	8000cbc <CO_error>
        }
        SYNC->timeoutError = 1;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 8005c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3728      	adds	r7, #40	; 0x28
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8005cb6:	81fb      	strh	r3, [r7, #14]
 8005cb8:	89fb      	ldrh	r3, [r7, #14]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8005cc6:	b480      	push	{r7}
 8005cc8:	b085      	sub	sp, #20
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8005ce2:	b480      	push	{r7}
 8005ce4:	b083      	sub	sp, #12
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <OD_getIndex+0x14>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	e000      	b.n	8005cf8 <OD_getIndex+0x16>
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <OD_extension_init>:
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <OD_extension_init+0x14>
 8005d14:	2305      	movs	r3, #5
 8005d16:	e003      	b.n	8005d20 <OD_extension_init+0x1c>
    entry->extension = extension;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <OD_get_u32>:
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af02      	add	r7, sp, #8
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	607a      	str	r2, [r7, #4]
 8005d36:	603b      	str	r3, [r7, #0]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8005d3c:	7af9      	ldrb	r1, [r7, #11]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	2304      	movs	r3, #4
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f7fc f838 	bl	8001dbc <OD_get_value>
 8005d4c:	4603      	mov	r3, r0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_TIME_receive(void *object, void *msg) {
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b086      	sub	sp, #24
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6039      	str	r1, [r7, #0]
    CO_TIME_t *TIME = object;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	791b      	ldrb	r3, [r3, #4]
 8005d68:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	3305      	adds	r3, #5
 8005d6e:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 8005d70:	7cfb      	ldrb	r3, [r7, #19]
 8005d72:	2b06      	cmp	r3, #6
 8005d74:	d108      	bne.n	8005d88 <CO_TIME_receive+0x32>
        memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2206      	movs	r2, #6
 8005d7a:	68f9      	ldr	r1, [r7, #12]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f006 fab5 	bl	800c2ec <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2201      	movs	r2, #1
 8005d86:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 8005d88:	bf00      	nop
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <OD_write_1012>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1012(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00c      	beq.n	8005dbe <OD_write_1012+0x2e>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	7c5b      	ldrb	r3, [r3, #17]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d108      	bne.n	8005dbe <OD_write_1012+0x2e>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d005      	beq.n	8005dbe <OD_write_1012+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d102      	bne.n	8005dbe <OD_write_1012+0x2e>
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <OD_write_1012+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8005dbe:	2309      	movs	r3, #9
 8005dc0:	e051      	b.n	8005e66 <OD_write_1012+0xd6>
    }

    CO_TIME_t *TIME = stream->object;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 8005dc8:	68b8      	ldr	r0, [r7, #8]
 8005dca:	f7ff ff7c 	bl	8005cc6 <CO_getUint32>
 8005dce:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = cobIdTimeStamp & 0x7FF;
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dd8:	82fb      	strh	r3, [r7, #22]
    if ((cobIdTimeStamp & 0x3FFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	4b24      	ldr	r3, [pc, #144]	; (8005e70 <OD_write_1012+0xe0>)
 8005dde:	4013      	ands	r3, r2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d126      	bne.n	8005e32 <OD_write_1012+0xa2>
 8005de4:	8afb      	ldrh	r3, [r7, #22]
 8005de6:	2b7f      	cmp	r3, #127	; 0x7f
 8005de8:	d923      	bls.n	8005e32 <OD_write_1012+0xa2>
 8005dea:	8afb      	ldrh	r3, [r7, #22]
 8005dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df0:	d903      	bls.n	8005dfa <OD_write_1012+0x6a>
 8005df2:	8afb      	ldrh	r3, [r7, #22]
 8005df4:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8005df8:	d91b      	bls.n	8005e32 <OD_write_1012+0xa2>
 8005dfa:	8afb      	ldrh	r3, [r7, #22]
 8005dfc:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8005e00:	d903      	bls.n	8005e0a <OD_write_1012+0x7a>
 8005e02:	8afb      	ldrh	r3, [r7, #22]
 8005e04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e08:	d313      	bcc.n	8005e32 <OD_write_1012+0xa2>
 8005e0a:	8afb      	ldrh	r3, [r7, #22]
 8005e0c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e10:	d903      	bls.n	8005e1a <OD_write_1012+0x8a>
 8005e12:	8afb      	ldrh	r3, [r7, #22]
 8005e14:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8005e18:	d30b      	bcc.n	8005e32 <OD_write_1012+0xa2>
 8005e1a:	8afb      	ldrh	r3, [r7, #22]
 8005e1c:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8005e20:	d303      	bcc.n	8005e2a <OD_write_1012+0x9a>
 8005e22:	8afb      	ldrh	r3, [r7, #22]
 8005e24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e28:	d303      	bcc.n	8005e32 <OD_write_1012+0xa2>
 8005e2a:	8afb      	ldrh	r3, [r7, #22]
 8005e2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e30:	d901      	bls.n	8005e36 <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 8005e32:	230f      	movs	r3, #15
 8005e34:	e017      	b.n	8005e66 <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	0fdb      	lsrs	r3, r3, #31
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	bf14      	ite	ne
 8005e4c:	2301      	movne	r3, #1
 8005e4e:	2300      	moveq	r3, #0
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	461a      	mov	r2, r3
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	68b9      	ldr	r1, [r7, #8]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f7fb fdc6 	bl	80019f0 <OD_writeOriginal>
 8005e64:	4603      	mov	r3, r0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3720      	adds	r7, #32
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	3ffff800 	.word	0x3ffff800

08005e74 <CO_TIME_init>:
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08c      	sub	sp, #48	; 0x30
 8005e78:	af04      	add	r7, sp, #16
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
 8005e80:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if (TIME == NULL || OD_1012_cobIdTimeStamp == NULL || CANdevRx == NULL
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d005      	beq.n	8005e94 <CO_TIME_init+0x20>
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d002      	beq.n	8005e94 <CO_TIME_init+0x20>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d102      	bne.n	8005e9a <CO_TIME_init+0x26>
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005e94:	f04f 33ff 	mov.w	r3, #4294967295
 8005e98:	e061      	b.n	8005f5e <CO_TIME_init+0xea>
    }

    memset(TIME, 0, sizeof(CO_TIME_t));
 8005e9a:	222c      	movs	r2, #44	; 0x2c
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f006 f99a 	bl	800c1d8 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 8005ea4:	f107 0214 	add.w	r2, r7, #20
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	2100      	movs	r1, #0
 8005eac:	68b8      	ldr	r0, [r7, #8]
 8005eae:	f7ff ff3d 	bl	8005d2c <OD_get_u32>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8005eb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00c      	beq.n	8005ed8 <CO_TIME_init+0x64>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d006      	beq.n	8005ed2 <CO_TIME_init+0x5e>
 8005ec4:	68b8      	ldr	r0, [r7, #8]
 8005ec6:	f7ff ff0c 	bl	8005ce2 <OD_getIndex>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	461a      	mov	r2, r3
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8005ed2:	f06f 030b 	mvn.w	r3, #11
 8005ed6:	e042      	b.n	8005f5e <CO_TIME_init+0xea>
    }
#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_OD_DYNAMIC
    TIME->OD_1012_extension.object = TIME;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4a21      	ldr	r2, [pc, #132]	; (8005f68 <CO_TIME_init+0xf4>)
 8005ee2:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4a21      	ldr	r2, [pc, #132]	; (8005f6c <CO_TIME_init+0xf8>)
 8005ee8:	625a      	str	r2, [r3, #36]	; 0x24
    OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	331c      	adds	r3, #28
 8005eee:	4619      	mov	r1, r3
 8005ef0:	68b8      	ldr	r0, [r7, #8]
 8005ef2:	f7ff ff07 	bl	8005d04 <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = cobIdTimeStamp & 0x7FF;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005efe:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	0fdb      	lsrs	r3, r3, #31
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	461a      	mov	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	bf14      	ite	ne
 8005f16:	2301      	movne	r3, #1
 8005f18:	2300      	moveq	r3, #0
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
	if (TIME->isConsumer) {
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d015      	beq.n	8005f5c <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(
 8005f30:	8bba      	ldrh	r2, [r7, #28]
 8005f32:	8879      	ldrh	r1, [r7, #2]
 8005f34:	4b0e      	ldr	r3, [pc, #56]	; (8005f70 <CO_TIME_init+0xfc>)
 8005f36:	9302      	str	r3, [sp, #8]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	9301      	str	r3, [sp, #4]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f002 f8b5 	bl	80080b4 <CO_CANrxBufferInit>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	76fb      	strb	r3, [r7, #27]
                cobId,          /* CAN identifier */
                0x7FF,          /* mask */
                0,              /* rtr */
                (void*)TIME,    /* object passed to receive function */
                CO_TIME_receive);/*this function will process received message*/
        if (ret != CO_ERROR_NO)
 8005f4e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <CO_TIME_init+0xe8>
            return ret;
 8005f56:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005f5a:	e000      	b.n	8005f5e <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3720      	adds	r7, #32
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	08001941 	.word	0x08001941
 8005f6c:	08005d91 	.word	0x08005d91
 8005f70:	08005d57 	.word	0x08005d57

08005f74 <CO_TIME_process>:


bool_t CO_TIME_process(CO_TIME_t *TIME,
                       bool_t NMTisPreOrOperational,
                       uint32_t timeDifference_us)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08a      	sub	sp, #40	; 0x28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 8005f80:	2300      	movs	r3, #0
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d024      	beq.n	8005fd4 <CO_TIME_process+0x60>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d020      	beq.n	8005fd4 <CO_TIME_process+0x60>
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d01f      	beq.n	8005fda <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff fe92 	bl	8005cc6 <CO_getUint32>
 8005fa2:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff fe7d 	bl	8005ca8 <CO_getUint16>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFF;
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8bfa      	ldrh	r2, [r7, #30]
 8005fc0:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	627b      	str	r3, [r7, #36]	; 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	619a      	str	r2, [r3, #24]
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8005fd2:	e002      	b.n	8005fda <CO_TIME_process+0x66>
        }
    }
    else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && timeDifference_us > 0) {
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d132      	bne.n	800604a <CO_TIME_process+0xd6>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d02f      	beq.n	800604a <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	89db      	ldrh	r3, [r3, #14]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	617b      	str	r3, [r7, #20]
        ms = us / 1000;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	4a16      	ldr	r2, [pc, #88]	; (8006054 <CO_TIME_process+0xe0>)
 8005ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffe:	099b      	lsrs	r3, r3, #6
 8006000:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = us % 1000;
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4b13      	ldr	r3, [pc, #76]	; (8006054 <CO_TIME_process+0xe0>)
 8006006:	fba3 1302 	umull	r1, r3, r3, r2
 800600a:	099b      	lsrs	r3, r3, #6
 800600c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006010:	fb01 f303 	mul.w	r3, r1, r3
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	441a      	add	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000*60*60*24)) {
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	4a0a      	ldr	r2, [pc, #40]	; (8006058 <CO_TIME_process+0xe4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d90b      	bls.n	800604a <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000*60*60*24);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	689a      	ldr	r2, [r3, #8]
 8006036:	4b09      	ldr	r3, [pc, #36]	; (800605c <CO_TIME_process+0xe8>)
 8006038:	4413      	add	r3, r2
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	6093      	str	r3, [r2, #8]
            TIME->days += 1;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	899b      	ldrh	r3, [r3, #12]
 8006042:	3301      	adds	r3, #1
 8006044:	b29a      	uxth	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	819a      	strh	r2, [r3, #12]
    else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800604c:	4618      	mov	r0, r3
 800604e:	3728      	adds	r7, #40	; 0x28
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	10624dd3 	.word	0x10624dd3
 8006058:	05265bff 	.word	0x05265bff
 800605c:	fad9a400 	.word	0xfad9a400

08006060 <CO_fifo_init>:
  #error CO_CONFIG_CRC16_ENABLE must be enabled.
 #endif
#endif

/******************************************************************************/
void CO_fifo_init(CO_fifo_t *fifo, uint8_t *buf, size_t bufSize) {
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]

    if (fifo == NULL || buf == NULL || bufSize < 2) {
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d012      	beq.n	8006098 <CO_fifo_init+0x38>
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00f      	beq.n	8006098 <CO_fifo_init+0x38>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d90c      	bls.n	8006098 <CO_fifo_init+0x38>
        return;
    }

    fifo->readPtr = 0;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	60da      	str	r2, [r3, #12]
    fifo->writePtr = 0;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	609a      	str	r2, [r3, #8]
    fifo->buf = buf;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	601a      	str	r2, [r3, #0]
    fifo->bufSize = bufSize;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	605a      	str	r2, [r3, #4]

    return;
 8006096:	e000      	b.n	800609a <CO_fifo_init+0x3a>
        return;
 8006098:	bf00      	nop
}
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <CO_fifo_write>:
 ******************************************************************************/
size_t CO_fifo_write(CO_fifo_t *fifo,
                     const uint8_t *buf,
                     size_t count,
                     uint16_t *crc)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b089      	sub	sp, #36	; 0x24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
    size_t i;
    uint8_t *bufDest;

    if (fifo == NULL || fifo->buf == NULL || buf == NULL) {
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d006      	beq.n	80060c6 <CO_fifo_write+0x22>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <CO_fifo_write+0x22>
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <CO_fifo_write+0x26>
        return 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	e03e      	b.n	8006148 <CO_fifo_write+0xa4>
    }

    bufDest = &fifo->buf[fifo->writePtr];
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	4413      	add	r3, r2
 80060d4:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0; i--) {
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	61fb      	str	r3, [r7, #28]
 80060da:	e02f      	b.n	800613c <CO_fifo_write+0x98>
        size_t writePtrNext = fifo->writePtr + 1;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	3301      	adds	r3, #1
 80060e2:	617b      	str	r3, [r7, #20]

        /* is circular buffer full */
        if (writePtrNext == fifo->readPtr ||
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d029      	beq.n	8006142 <CO_fifo_write+0x9e>
            (writePtrNext == fifo->bufSize && fifo->readPtr == 0)) {
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	685b      	ldr	r3, [r3, #4]
        if (writePtrNext == fifo->readPtr ||
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d103      	bne.n	8006100 <CO_fifo_write+0x5c>
            (writePtrNext == fifo->bufSize && fifo->readPtr == 0)) {
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d020      	beq.n	8006142 <CO_fifo_write+0x9e>
            break;
        }

        *bufDest = *buf;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	781a      	ldrb	r2, [r3, #0]
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	701a      	strb	r2, [r3, #0]
            crc16_ccitt_single(crc, *buf);
        }
#endif

        /* increment variables */
        if (writePtrNext == fifo->bufSize) {
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	429a      	cmp	r2, r3
 8006110:	d106      	bne.n	8006120 <CO_fifo_write+0x7c>
            fifo->writePtr = 0;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	609a      	str	r2, [r3, #8]
            bufDest = &fifo->buf[0];
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	61bb      	str	r3, [r7, #24]
 800611e:	e007      	b.n	8006130 <CO_fifo_write+0x8c>
        }
        else {
            fifo->writePtr++;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	609a      	str	r2, [r3, #8]
            bufDest++;
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	3301      	adds	r3, #1
 800612e:	61bb      	str	r3, [r7, #24]
        }
        buf++;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	3301      	adds	r3, #1
 8006134:	60bb      	str	r3, [r7, #8]
    for (i = count; i > 0; i--) {
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	3b01      	subs	r3, #1
 800613a:	61fb      	str	r3, [r7, #28]
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1cc      	bne.n	80060dc <CO_fifo_write+0x38>
    }

    return count - i;
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	1ad3      	subs	r3, r2, r3
}
 8006148:	4618      	mov	r0, r3
 800614a:	3724      	adds	r7, #36	; 0x24
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <CO_fifo_read>:


/******************************************************************************/
size_t CO_fifo_read(CO_fifo_t *fifo, uint8_t *buf, size_t count, bool_t *eof) {
 8006154:	b480      	push	{r7}
 8006156:	b089      	sub	sp, #36	; 0x24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	603b      	str	r3, [r7, #0]
    size_t i;
    const uint8_t *bufSrc;

    if (eof != NULL) {
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <CO_fifo_read+0x1a>
        *eof = false;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]
    }
    if (fifo == NULL || buf == NULL || fifo->readPtr == fifo->writePtr) {
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d008      	beq.n	8006186 <CO_fifo_read+0x32>
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d005      	beq.n	8006186 <CO_fifo_read+0x32>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	429a      	cmp	r2, r3
 8006184:	d101      	bne.n	800618a <CO_fifo_read+0x36>
        return 0;
 8006186:	2300      	movs	r3, #0
 8006188:	e036      	b.n	80061f8 <CO_fifo_read+0xa4>
    }

    bufSrc = &fifo->buf[fifo->readPtr];
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	4413      	add	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0; ) {
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	e025      	b.n	80061e8 <CO_fifo_read+0x94>
        const uint8_t c = *bufSrc;
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	75fb      	strb	r3, [r7, #23]

        /* is circular buffer empty */
        if (fifo->readPtr == fifo->writePtr) {
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d020      	beq.n	80061f0 <CO_fifo_read+0x9c>
            break;
        }

        *(buf++) = c;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	60ba      	str	r2, [r7, #8]
 80061b4:	7dfa      	ldrb	r2, [r7, #23]
 80061b6:	701a      	strb	r2, [r3, #0]

        /* increment variables */
        if (++fifo->readPtr == fifo->bufSize) {
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	60da      	str	r2, [r3, #12]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d106      	bne.n	80061dc <CO_fifo_read+0x88>
            fifo->readPtr = 0;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	60da      	str	r2, [r3, #12]
            bufSrc = &fifo->buf[0];
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	61bb      	str	r3, [r7, #24]
 80061da:	e002      	b.n	80061e2 <CO_fifo_read+0x8e>
        }
        else {
            bufSrc++;
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	3301      	adds	r3, #1
 80061e0:	61bb      	str	r3, [r7, #24]
        }
        i--;
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	61fb      	str	r3, [r7, #28]
    for (i = count; i > 0; ) {
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1d6      	bne.n	800619c <CO_fifo_read+0x48>
 80061ee:	e000      	b.n	80061f2 <CO_fifo_read+0x9e>
            break;
 80061f0:	bf00      	nop
            break;
        }
#endif
    }

    return count - i;
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	1ad3      	subs	r3, r2, r3
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3724      	adds	r7, #36	; 0x24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE

/******************************************************************************/
CO_ReturnError_t CO_LEDs_init(CO_LEDs_t *LEDs) {
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800620c:	2300      	movs	r3, #0
 800620e:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d102      	bne.n	800621c <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006216:	f04f 33ff 	mov.w	r3, #4294967295
 800621a:	e006      	b.n	800622a <CO_LEDs_init+0x26>
    }

    /* clear the object */
    memset(LEDs, 0, sizeof(CO_LEDs_t));
 800621c:	220c      	movs	r2, #12
 800621e:	2100      	movs	r1, #0
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f005 ffd9 	bl	800c1d8 <memset>

    return ret;
 8006226:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
	...

08006234 <CO_LEDs_process>:
                     bool_t ErrSync,
                     bool_t ErrHbCons,
                     bool_t ErrOther,
                     bool_t firmwareDownload,
                     uint32_t *timerNext_us)
{
 8006234:	b480      	push	{r7}
 8006236:	b08b      	sub	sp, #44	; 0x2c
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	4613      	mov	r3, r2
 8006242:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 8006244:	2300      	movs	r3, #0
 8006246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t gr = 0;
 800624a:	2300      	movs	r3, #0
 800624c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    bool_t tick = false;
 8006250:	2300      	movs	r3, #0
 8006252:	623b      	str	r3, [r7, #32]

    LEDs->LEDtmr50ms += timeDifference_us;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	441a      	add	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000) {
 8006260:	e12e      	b.n	80064c0 <CO_LEDs_process+0x28c>
        bool_t rdFlickerNext = (LEDs->LEDred & CO_LED_flicker) == 0;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	7a5b      	ldrb	r3, [r3, #9]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	bf0c      	ite	eq
 800626e:	2301      	moveq	r3, #1
 8006270:	2300      	movne	r3, #0
 8006272:	b2db      	uxtb	r3, r3
 8006274:	617b      	str	r3, [r7, #20]

        tick = true;
 8006276:	2301      	movs	r3, #1
 8006278:	623b      	str	r3, [r7, #32]
        LEDs->LEDtmr50ms -= 50000;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	4bb0      	ldr	r3, [pc, #704]	; (8006540 <CO_LEDs_process+0x30c>)
 8006280:	4413      	add	r3, r2
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3) {
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	791b      	ldrb	r3, [r3, #4]
 800628a:	3301      	adds	r3, #1
 800628c:	b2da      	uxtb	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	711a      	strb	r2, [r3, #4]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	791b      	ldrb	r3, [r3, #4]
 8006296:	2b03      	cmp	r3, #3
 8006298:	f240 80f4 	bls.w	8006484 <CO_LEDs_process+0x250>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	711a      	strb	r2, [r3, #4]
            rd = gr = 0;
 80062a2:	2300      	movs	r3, #0
 80062a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80062a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if ((LEDs->LEDred & CO_LED_blink) == 0) rd |= CO_LED_blink;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	7a5b      	ldrb	r3, [r3, #9]
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d106      	bne.n	80062ca <CO_LEDs_process+0x96>
 80062bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062c0:	f043 0302 	orr.w	r3, r3, #2
 80062c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80062c8:	e005      	b.n	80062d6 <CO_LEDs_process+0xa2>
            else                                    gr |= CO_LED_blink;
 80062ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062ce:	f043 0302 	orr.w	r3, r3, #2
 80062d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

            switch (++LEDs->LEDtmrflash_1) {
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	795b      	ldrb	r3, [r3, #5]
 80062da:	3301      	adds	r3, #1
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	715a      	strb	r2, [r3, #5]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	795b      	ldrb	r3, [r3, #5]
 80062e6:	2b06      	cmp	r3, #6
 80062e8:	d014      	beq.n	8006314 <CO_LEDs_process+0xe0>
 80062ea:	2b06      	cmp	r3, #6
 80062ec:	dc16      	bgt.n	800631c <CO_LEDs_process+0xe8>
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d002      	beq.n	80062f8 <CO_LEDs_process+0xc4>
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d007      	beq.n	8006306 <CO_LEDs_process+0xd2>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: break;
 80062f6:	e011      	b.n	800631c <CO_LEDs_process+0xe8>
                case 1: rd |= CO_LED_flash_1; break;
 80062f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062fc:	f043 0304 	orr.w	r3, r3, #4
 8006300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006304:	e00b      	b.n	800631e <CO_LEDs_process+0xea>
                case 2: gr |= CO_LED_flash_1; break;
 8006306:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800630a:	f043 0304 	orr.w	r3, r3, #4
 800630e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006312:	e004      	b.n	800631e <CO_LEDs_process+0xea>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	715a      	strb	r2, [r3, #5]
 800631a:	e000      	b.n	800631e <CO_LEDs_process+0xea>
                default: break;
 800631c:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_2) {
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	799b      	ldrb	r3, [r3, #6]
 8006322:	3301      	adds	r3, #1
 8006324:	b2da      	uxtb	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	719a      	strb	r2, [r3, #6]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	799b      	ldrb	r3, [r3, #6]
 800632e:	3b01      	subs	r3, #1
 8006330:	2b07      	cmp	r3, #7
 8006332:	d825      	bhi.n	8006380 <CO_LEDs_process+0x14c>
 8006334:	a201      	add	r2, pc, #4	; (adr r2, 800633c <CO_LEDs_process+0x108>)
 8006336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633a:	bf00      	nop
 800633c:	0800635d 	.word	0x0800635d
 8006340:	0800636b 	.word	0x0800636b
 8006344:	0800635d 	.word	0x0800635d
 8006348:	0800636b 	.word	0x0800636b
 800634c:	08006381 	.word	0x08006381
 8006350:	08006381 	.word	0x08006381
 8006354:	08006381 	.word	0x08006381
 8006358:	08006379 	.word	0x08006379
                case 1: case 3: rd |= CO_LED_flash_2; break;
 800635c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006360:	f043 0308 	orr.w	r3, r3, #8
 8006364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006368:	e00b      	b.n	8006382 <CO_LEDs_process+0x14e>
                case 2: case 4: gr |= CO_LED_flash_2; break;
 800636a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800636e:	f043 0308 	orr.w	r3, r3, #8
 8006372:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006376:	e004      	b.n	8006382 <CO_LEDs_process+0x14e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	719a      	strb	r2, [r3, #6]
 800637e:	e000      	b.n	8006382 <CO_LEDs_process+0x14e>
                default: break;
 8006380:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_3) {
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	79db      	ldrb	r3, [r3, #7]
 8006386:	3301      	adds	r3, #1
 8006388:	b2da      	uxtb	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	71da      	strb	r2, [r3, #7]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	79db      	ldrb	r3, [r3, #7]
 8006392:	2b0a      	cmp	r3, #10
 8006394:	bf8c      	ite	hi
 8006396:	2201      	movhi	r2, #1
 8006398:	2200      	movls	r2, #0
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	2a00      	cmp	r2, #0
 800639e:	d130      	bne.n	8006402 <CO_LEDs_process+0x1ce>
 80063a0:	2201      	movs	r2, #1
 80063a2:	fa02 f303 	lsl.w	r3, r2, r3
 80063a6:	f003 0254 	and.w	r2, r3, #84	; 0x54
 80063aa:	2a00      	cmp	r2, #0
 80063ac:	bf14      	ite	ne
 80063ae:	2201      	movne	r2, #1
 80063b0:	2200      	moveq	r2, #0
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	2a00      	cmp	r2, #0
 80063b6:	d119      	bne.n	80063ec <CO_LEDs_process+0x1b8>
 80063b8:	f003 022a 	and.w	r2, r3, #42	; 0x2a
 80063bc:	2a00      	cmp	r2, #0
 80063be:	bf14      	ite	ne
 80063c0:	2201      	movne	r2, #1
 80063c2:	2200      	moveq	r2, #0
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	2a00      	cmp	r2, #0
 80063c8:	d109      	bne.n	80063de <CO_LEDs_process+0x1aa>
 80063ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	bf14      	ite	ne
 80063d2:	2301      	movne	r3, #1
 80063d4:	2300      	moveq	r3, #0
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10e      	bne.n	80063fa <CO_LEDs_process+0x1c6>
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
                case 10: LEDs->LEDtmrflash_3 = 0; break;
                default: break;
 80063dc:	e011      	b.n	8006402 <CO_LEDs_process+0x1ce>
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
 80063de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063e2:	f043 0310 	orr.w	r3, r3, #16
 80063e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80063ea:	e00b      	b.n	8006404 <CO_LEDs_process+0x1d0>
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
 80063ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063f0:	f043 0310 	orr.w	r3, r3, #16
 80063f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80063f8:	e004      	b.n	8006404 <CO_LEDs_process+0x1d0>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	71da      	strb	r2, [r3, #7]
 8006400:	e000      	b.n	8006404 <CO_LEDs_process+0x1d0>
                default: break;
 8006402:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_4) {
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	7a1b      	ldrb	r3, [r3, #8]
 8006408:	3301      	adds	r3, #1
 800640a:	b2da      	uxtb	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	721a      	strb	r2, [r3, #8]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	7a1b      	ldrb	r3, [r3, #8]
 8006414:	2b0c      	cmp	r3, #12
 8006416:	bf8c      	ite	hi
 8006418:	2201      	movhi	r2, #1
 800641a:	2200      	movls	r2, #0
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	2a00      	cmp	r2, #0
 8006420:	d13d      	bne.n	800649e <CO_LEDs_process+0x26a>
 8006422:	2201      	movs	r2, #1
 8006424:	fa02 f303 	lsl.w	r3, r2, r3
 8006428:	f403 72aa 	and.w	r2, r3, #340	; 0x154
 800642c:	2a00      	cmp	r2, #0
 800642e:	bf14      	ite	ne
 8006430:	2201      	movne	r2, #1
 8006432:	2200      	moveq	r2, #0
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	2a00      	cmp	r2, #0
 8006438:	d119      	bne.n	800646e <CO_LEDs_process+0x23a>
 800643a:	f003 02aa 	and.w	r2, r3, #170	; 0xaa
 800643e:	2a00      	cmp	r2, #0
 8006440:	bf14      	ite	ne
 8006442:	2201      	movne	r2, #1
 8006444:	2200      	moveq	r2, #0
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	2a00      	cmp	r2, #0
 800644a:	d109      	bne.n	8006460 <CO_LEDs_process+0x22c>
 800644c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006450:	2b00      	cmp	r3, #0
 8006452:	bf14      	ite	ne
 8006454:	2301      	movne	r3, #1
 8006456:	2300      	moveq	r3, #0
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10e      	bne.n	800647c <CO_LEDs_process+0x248>
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
                case 12: LEDs->LEDtmrflash_4 = 0; break;
                default: break;
 800645e:	e01e      	b.n	800649e <CO_LEDs_process+0x26a>
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
 8006460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006464:	f043 0320 	orr.w	r3, r3, #32
 8006468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800646c:	e018      	b.n	80064a0 <CO_LEDs_process+0x26c>
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
 800646e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006472:	f043 0320 	orr.w	r3, r3, #32
 8006476:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800647a:	e011      	b.n	80064a0 <CO_LEDs_process+0x26c>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	721a      	strb	r2, [r3, #8]
 8006482:	e00d      	b.n	80064a0 <CO_LEDs_process+0x26c>
            }
        }
        else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	7a5b      	ldrb	r3, [r3, #9]
 8006488:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800648c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            gr = LEDs->LEDgreen & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	7a9b      	ldrb	r3, [r3, #10]
 8006494:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006498:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800649c:	e000      	b.n	80064a0 <CO_LEDs_process+0x26c>
                default: break;
 800649e:	bf00      	nop
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) rd |= CO_LED_flicker;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d006      	beq.n	80064b4 <CO_LEDs_process+0x280>
 80064a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064aa:	f043 0301 	orr.w	r3, r3, #1
 80064ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80064b2:	e005      	b.n	80064c0 <CO_LEDs_process+0x28c>
        else               gr |= CO_LED_flicker;
 80064b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80064b8:	f043 0301 	orr.w	r3, r3, #1
 80064bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (LEDs->LEDtmr50ms >= 50000) {
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80064c8:	4293      	cmp	r3, r2
 80064ca:	f63f aeca 	bhi.w	8006262 <CO_LEDs_process+0x2e>

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 808b 	beq.w	80065ec <CO_LEDs_process+0x3b8>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if      (ErrCANbusOff)                      rd_co = 1;
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <CO_LEDs_process+0x2ae>
 80064dc:	2301      	movs	r3, #1
 80064de:	77fb      	strb	r3, [r7, #31]
 80064e0:	e03b      	b.n	800655a <CO_LEDs_process+0x326>
        else if (NMTstate == CO_NMT_INITIALIZING)   rd_co = rd & CO_LED_flicker;
 80064e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d105      	bne.n	80064f6 <CO_LEDs_process+0x2c2>
 80064ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	77fb      	strb	r3, [r7, #31]
 80064f4:	e031      	b.n	800655a <CO_LEDs_process+0x326>
        else if (ErrRpdo)                           rd_co = rd & CO_LED_flash_4;
 80064f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d005      	beq.n	8006508 <CO_LEDs_process+0x2d4>
 80064fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006500:	f003 0320 	and.w	r3, r3, #32
 8006504:	77fb      	strb	r3, [r7, #31]
 8006506:	e028      	b.n	800655a <CO_LEDs_process+0x326>
        else if (ErrSync)                           rd_co = rd & CO_LED_flash_3;
 8006508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800650a:	2b00      	cmp	r3, #0
 800650c:	d005      	beq.n	800651a <CO_LEDs_process+0x2e6>
 800650e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006512:	f003 0310 	and.w	r3, r3, #16
 8006516:	77fb      	strb	r3, [r7, #31]
 8006518:	e01f      	b.n	800655a <CO_LEDs_process+0x326>
        else if (ErrHbCons)                         rd_co = rd & CO_LED_flash_2;
 800651a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <CO_LEDs_process+0x2f8>
 8006520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	77fb      	strb	r3, [r7, #31]
 800652a:	e016      	b.n	800655a <CO_LEDs_process+0x326>
        else if (ErrCANbusWarn)                     rd_co = rd & CO_LED_flash_1;
 800652c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800652e:	2b00      	cmp	r3, #0
 8006530:	d008      	beq.n	8006544 <CO_LEDs_process+0x310>
 8006532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006536:	f003 0304 	and.w	r3, r3, #4
 800653a:	77fb      	strb	r3, [r7, #31]
 800653c:	e00d      	b.n	800655a <CO_LEDs_process+0x326>
 800653e:	bf00      	nop
 8006540:	ffff3cb0 	.word	0xffff3cb0
        else if (ErrOther)                          rd_co = rd & CO_LED_blink;
 8006544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006546:	2b00      	cmp	r3, #0
 8006548:	d005      	beq.n	8006556 <CO_LEDs_process+0x322>
 800654a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	77fb      	strb	r3, [r7, #31]
 8006554:	e001      	b.n	800655a <CO_LEDs_process+0x326>
        else                                        rd_co = 0;
 8006556:	2300      	movs	r3, #0
 8006558:	77fb      	strb	r3, [r7, #31]

        /* CANopen green RUN LED */
        if      (LSSconfig)                         gr_co = gr & CO_LED_flicker;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d005      	beq.n	800656c <CO_LEDs_process+0x338>
 8006560:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	77bb      	strb	r3, [r7, #30]
 800656a:	e025      	b.n	80065b8 <CO_LEDs_process+0x384>
        else if (firmwareDownload)                  gr_co = gr & CO_LED_flash_3;
 800656c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800656e:	2b00      	cmp	r3, #0
 8006570:	d005      	beq.n	800657e <CO_LEDs_process+0x34a>
 8006572:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006576:	f003 0310 	and.w	r3, r3, #16
 800657a:	77bb      	strb	r3, [r7, #30]
 800657c:	e01c      	b.n	80065b8 <CO_LEDs_process+0x384>
        else if (NMTstate == CO_NMT_STOPPED)        gr_co = gr & CO_LED_flash_1;
 800657e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006582:	2b04      	cmp	r3, #4
 8006584:	d105      	bne.n	8006592 <CO_LEDs_process+0x35e>
 8006586:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800658a:	f003 0304 	and.w	r3, r3, #4
 800658e:	77bb      	strb	r3, [r7, #30]
 8006590:	e012      	b.n	80065b8 <CO_LEDs_process+0x384>
        else if (NMTstate == CO_NMT_PRE_OPERATIONAL)gr_co = gr & CO_LED_blink;
 8006592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006596:	2b7f      	cmp	r3, #127	; 0x7f
 8006598:	d105      	bne.n	80065a6 <CO_LEDs_process+0x372>
 800659a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	77bb      	strb	r3, [r7, #30]
 80065a4:	e008      	b.n	80065b8 <CO_LEDs_process+0x384>
        else if (NMTstate == CO_NMT_OPERATIONAL)    gr_co = 1;
 80065a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065aa:	2b05      	cmp	r3, #5
 80065ac:	d102      	bne.n	80065b4 <CO_LEDs_process+0x380>
 80065ae:	2301      	movs	r3, #1
 80065b0:	77bb      	strb	r3, [r7, #30]
 80065b2:	e001      	b.n	80065b8 <CO_LEDs_process+0x384>
        else                                        gr_co = 0;
 80065b4:	2300      	movs	r3, #0
 80065b6:	77bb      	strb	r3, [r7, #30]

        if (rd_co != 0) rd |= CO_LED_CANopen;
 80065b8:	7ffb      	ldrb	r3, [r7, #31]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d005      	beq.n	80065ca <CO_LEDs_process+0x396>
 80065be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (gr_co != 0) gr |= CO_LED_CANopen;
 80065ca:	7fbb      	ldrb	r3, [r7, #30]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <CO_LEDs_process+0x3a8>
 80065d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80065d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LEDs->LEDred = rd;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80065e2:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80065ea:	729a      	strb	r2, [r3, #10]
    } /* if (tick) */

#if (CO_CONFIG_LEDS) & CO_CONFIG_FLAG_TIMERNEXT
    if (timerNext_us != NULL) {
 80065ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00d      	beq.n	800660e <CO_LEDs_process+0x3da>
        uint32_t diff = 50000 - LEDs->LEDtmr50ms;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80065fa:	1a9b      	subs	r3, r3, r2
 80065fc:	61bb      	str	r3, [r7, #24]
        if (*timerNext_us > diff) {
 80065fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	429a      	cmp	r2, r3
 8006606:	d202      	bcs.n	800660e <CO_LEDs_process+0x3da>
            *timerNext_us = diff;
 8006608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	601a      	str	r2, [r3, #0]
        }
    }
#endif
}
 800660e:	bf00      	nop
 8006610:	372c      	adds	r7, #44	; 0x2c
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop

0800661c <CO_LSSslave_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_LSSslave_receive(void *object, void *msg)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b090      	sub	sp, #64	; 0x40
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t *LSSslave = (CO_LSSslave_t*)object;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	791b      	ldrb	r3, [r3, #4]
 800662e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(DLC == 8U && !CO_FLAG_READ(LSSslave->sendResponse)) {
 8006632:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006636:	2b08      	cmp	r3, #8
 8006638:	f040 814c 	bne.w	80068d4 <CO_LSSslave_receive+0x2b8>
 800663c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006640:	2b00      	cmp	r3, #0
 8006642:	f040 8147 	bne.w	80068d4 <CO_LSSslave_receive+0x2b8>
        bool_t request_LSSslave_process = false;
 8006646:	2300      	movs	r3, #0
 8006648:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t *data = CO_CANrxMsg_readData(msg);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	3305      	adds	r3, #5
 800664e:	62fb      	str	r3, [r7, #44]	; 0x2c
        CO_LSS_cs_t cs = (CO_LSS_cs_t) data[0];
 8006650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 8006658:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800665c:	2b04      	cmp	r3, #4
 800665e:	d12c      	bne.n	80066ba <CO_LSSslave_receive+0x9e>
            uint8_t mode = data[1];
 8006660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006662:	785b      	ldrb	r3, [r3, #1]
 8006664:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 8006666:	7ffb      	ldrb	r3, [r7, #31]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <CO_LSSslave_receive+0x56>
 800666c:	2b01      	cmp	r3, #1
 800666e:	d020      	beq.n	80066b2 <CO_LSSslave_receive+0x96>
                    break;
                case CO_LSS_STATE_CONFIGURATION:
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
                    break;
                default:
                    break;
 8006670:	e12a      	b.n	80068c8 <CO_LSSslave_receive+0x2ac>
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 8006672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006674:	7c1b      	ldrb	r3, [r3, #16]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d110      	bne.n	800669c <CO_LSSslave_receive+0x80>
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 800667a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 8006680:	2bff      	cmp	r3, #255	; 0xff
 8006682:	d10b      	bne.n	800669c <CO_LSSslave_receive+0x80>
                        *LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)
 8006684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006688:	781b      	ldrb	r3, [r3, #0]
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 800668a:	2bff      	cmp	r3, #255	; 0xff
 800668c:	d006      	beq.n	800669c <CO_LSSslave_receive+0x80>
                        LSSslave->service = cs;
 800668e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006690:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006694:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 8006698:	2301      	movs	r3, #1
 800669a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 800669c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669e:	2200      	movs	r2, #0
 80066a0:	741a      	strb	r2, [r3, #16]
                    memset(&LSSslave->lssSelect, 0,
 80066a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a4:	3314      	adds	r3, #20
 80066a6:	2210      	movs	r2, #16
 80066a8:	2100      	movs	r1, #0
 80066aa:	4618      	mov	r0, r3
 80066ac:	f005 fd94 	bl	800c1d8 <memset>
                    break;
 80066b0:	e10a      	b.n	80068c8 <CO_LSSslave_receive+0x2ac>
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80066b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b4:	2201      	movs	r2, #1
 80066b6:	741a      	strb	r2, [r3, #16]
                    break;
 80066b8:	e106      	b.n	80068c8 <CO_LSSslave_receive+0x2ac>
            }
        }
        else if(LSSslave->lssState == CO_LSS_STATE_WAITING) {
 80066ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066bc:	7c1b      	ldrb	r3, [r3, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f040 80ee 	bne.w	80068a0 <CO_LSSslave_receive+0x284>
            switch (cs) {
 80066c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066c8:	3b40      	subs	r3, #64	; 0x40
 80066ca:	2b11      	cmp	r3, #17
 80066cc:	f200 80f7 	bhi.w	80068be <CO_LSSslave_receive+0x2a2>
 80066d0:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <CO_LSSslave_receive+0xbc>)
 80066d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d6:	bf00      	nop
 80066d8:	08006721 	.word	0x08006721
 80066dc:	08006731 	.word	0x08006731
 80066e0:	08006741 	.word	0x08006741
 80066e4:	08006751 	.word	0x08006751
 80066e8:	080068bf 	.word	0x080068bf
 80066ec:	080068bf 	.word	0x080068bf
 80066f0:	080068bf 	.word	0x080068bf
 80066f4:	080068bf 	.word	0x080068bf
 80066f8:	080068bf 	.word	0x080068bf
 80066fc:	080068bf 	.word	0x080068bf
 8006700:	080068bf 	.word	0x080068bf
 8006704:	080068bf 	.word	0x080068bf
 8006708:	080068bf 	.word	0x080068bf
 800670c:	080068bf 	.word	0x080068bf
 8006710:	080068bf 	.word	0x080068bf
 8006714:	080068bf 	.word	0x080068bf
 8006718:	080068bf 	.word	0x080068bf
 800671c:	080067ad 	.word	0x080067ad
            case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006722:	3301      	adds	r3, #1
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	61bb      	str	r3, [r7, #24]
                LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672c:	615a      	str	r2, [r3, #20]
                break;
 800672e:	e0cb      	b.n	80068c8 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006732:	3301      	adds	r3, #1
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	617b      	str	r3, [r7, #20]
                LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673c:	619a      	str	r2, [r3, #24]
                break;
 800673e:	e0c3      	b.n	80068c8 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_REV: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006742:	3301      	adds	r3, #1
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	613b      	str	r3, [r7, #16]
                LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800674c:	61da      	str	r2, [r3, #28]
                break;
 800674e:	e0bb      	b.n	80068c8 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	3301      	adds	r3, #1
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	60fb      	str	r3, [r7, #12]
                LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675c:	621a      	str	r2, [r3, #32]

                if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress,
 800675e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	429a      	cmp	r2, r3
 8006768:	f040 80ab 	bne.w	80068c2 <CO_LSSslave_receive+0x2a6>
 800676c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	429a      	cmp	r2, r3
 8006776:	f040 80a4 	bne.w	80068c2 <CO_LSSslave_receive+0x2a6>
 800677a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	429a      	cmp	r2, r3
 8006784:	f040 809d 	bne.w	80068c2 <CO_LSSslave_receive+0x2a6>
 8006788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	429a      	cmp	r2, r3
 8006792:	f040 8096 	bne.w	80068c2 <CO_LSSslave_receive+0x2a6>
                                         LSSslave->lssSelect)
                ) {
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8006796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006798:	2201      	movs	r2, #1
 800679a:	741a      	strb	r2, [r3, #16]
                    LSSslave->service = cs;
 800679c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80067a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                    request_LSSslave_process = true;
 80067a6:	2301      	movs	r3, #1
 80067a8:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                break;
 80067aa:	e08a      	b.n	80068c2 <CO_LSSslave_receive+0x2a6>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                /* fastscan is only active on unconfigured nodes */
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80067ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2bff      	cmp	r3, #255	; 0xff
 80067b4:	f040 8087 	bne.w	80068c6 <CO_LSSslave_receive+0x2aa>
                    LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 80067b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80067be:	2bff      	cmp	r3, #255	; 0xff
 80067c0:	f040 8081 	bne.w	80068c6 <CO_LSSslave_receive+0x2aa>
                {
                    uint8_t bitCheck = data[5];
 80067c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c6:	795b      	ldrb	r3, [r3, #5]
 80067c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    uint8_t lssSub = data[6];
 80067cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ce:	799b      	ldrb	r3, [r3, #6]
 80067d0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                    uint8_t lssNext = data[7];
 80067d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d6:	79db      	ldrb	r3, [r3, #7]
 80067d8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                    uint32_t valSw;
                    uint32_t idNumber;
                    bool_t ack;

                    if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) ||
 80067dc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80067e0:	2b1f      	cmp	r3, #31
 80067e2:	d903      	bls.n	80067ec <CO_LSSslave_receive+0x1d0>
 80067e4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80067e8:	2b80      	cmp	r3, #128	; 0x80
 80067ea:	d16d      	bne.n	80068c8 <CO_LSSslave_receive+0x2ac>
 80067ec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	d869      	bhi.n	80068c8 <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub) ||
 80067f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d865      	bhi.n	80068c8 <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
                        /* Invalid request */
                        break;
                    }

                    memcpy(&valSw, &data[1], sizeof(valSw));
 80067fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fe:	3301      	adds	r3, #1
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	60bb      	str	r3, [r7, #8]
                    idNumber = CO_SWAP_32(valSw);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	627b      	str	r3, [r7, #36]	; 0x24
                    ack = false;
 8006808:	2300      	movs	r3, #0
 800680a:	63bb      	str	r3, [r7, #56]	; 0x38

                    if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 800680c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006810:	2b80      	cmp	r3, #128	; 0x80
 8006812:	d10d      	bne.n	8006830 <CO_LSSslave_receive+0x214>
                        /* Confirm, Reset */
                        ack = true;
 8006814:	2301      	movs	r3, #1
 8006816:	63bb      	str	r3, [r7, #56]	; 0x38
                        LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8006818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        memset(&LSSslave->lssFastscan, 0,
 8006820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006822:	3324      	adds	r3, #36	; 0x24
 8006824:	2210      	movs	r2, #16
 8006826:	2100      	movs	r1, #0
 8006828:	4618      	mov	r0, r3
 800682a:	f005 fcd5 	bl	800c1d8 <memset>
 800682e:	e02c      	b.n	800688a <CO_LSSslave_receive+0x26e>
                                sizeof(LSSslave->lssFastscan));
                    }
                    else if (LSSslave->fastscanPos == lssSub) {
 8006830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006832:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006836:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800683a:	429a      	cmp	r2, r3
 800683c:	d125      	bne.n	800688a <CO_LSSslave_receive+0x26e>
                        uint32_t mask = 0xFFFFFFFF << bitCheck;
 800683e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006842:	f04f 32ff 	mov.w	r2, #4294967295
 8006846:	fa02 f303 	lsl.w	r3, r2, r3
 800684a:	623b      	str	r3, [r7, #32]

                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 800684c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8006850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006852:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                            == (idNumber & mask))
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	405a      	eors	r2, r3
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	4013      	ands	r3, r2
                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 800685e:	2b00      	cmp	r3, #0
 8006860:	d113      	bne.n	800688a <CO_LSSslave_receive+0x26e>
                        {
                            /* all requested bits match */
                            ack = true;
 8006862:	2301      	movs	r3, #1
 8006864:	63bb      	str	r3, [r7, #56]	; 0x38
                            LSSslave->fastscanPos = lssNext;
 8006866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006868:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800686c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

                            if (bitCheck == 0 && lssNext < lssSub) {
 8006870:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006874:	2b00      	cmp	r3, #0
 8006876:	d108      	bne.n	800688a <CO_LSSslave_receive+0x26e>
 8006878:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800687c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006880:	429a      	cmp	r2, r3
 8006882:	d202      	bcs.n	800688a <CO_LSSslave_receive+0x26e>
                                /* complete match, enter configuration state */
                                LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8006884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006886:	2201      	movs	r2, #1
 8006888:	741a      	strb	r2, [r3, #16]
                            }
                        }
                    }
                    if (ack) {
 800688a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01a      	beq.n	80068c6 <CO_LSSslave_receive+0x2aa>
                        LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                        memset(&LSSslave->TXbuff->data[1], 0,
                               sizeof(LSSslave->TXbuff->data) - 1);
                        CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                        LSSslave->service = cs;
 8006890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006892:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006896:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 800689a:	2301      	movs	r3, #1
 800689c:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
                    }
                }
                break;
 800689e:	e012      	b.n	80068c6 <CO_LSSslave_receive+0x2aa>
                break;
            }
            }
        }
        else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            memcpy(&LSSslave->CANdata, &data[0], sizeof(LSSslave->CANdata));
 80068a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a2:	3349      	adds	r3, #73	; 0x49
 80068a4:	2208      	movs	r2, #8
 80068a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068a8:	4618      	mov	r0, r3
 80068aa:	f005 fd1f 	bl	800c2ec <memcpy>
            LSSslave->service = cs;
 80068ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80068b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            request_LSSslave_process = true;
 80068b8:	2301      	movs	r3, #1
 80068ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068bc:	e004      	b.n	80068c8 <CO_LSSslave_receive+0x2ac>
                break;
 80068be:	bf00      	nop
 80068c0:	e002      	b.n	80068c8 <CO_LSSslave_receive+0x2ac>
                break;
 80068c2:	bf00      	nop
 80068c4:	e000      	b.n	80068c8 <CO_LSSslave_receive+0x2ac>
                break;
 80068c6:	bf00      	nop
        }

        if (request_LSSslave_process) {
 80068c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <CO_LSSslave_receive+0x2b8>
            CO_FLAG_SET(LSSslave->sendResponse);
 80068ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d0:	2201      	movs	r2, #1
 80068d2:	645a      	str	r2, [r3, #68]	; 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 80068d4:	bf00      	nop
 80068d6:	3740      	adds	r7, #64	; 0x40
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <CO_LSSslave_init>:
        uint16_t                CANdevRxIdx,
        uint16_t                CANidLssMaster,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidLssSlave)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08a      	sub	sp, #40	; 0x28
 80068e0:	af04      	add	r7, sp, #16
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80068ea:	2300      	movs	r3, #0
 80068ec:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (LSSslave==NULL || pendingBitRate == NULL || pendingNodeID == NULL ||
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d018      	beq.n	8006926 <CO_LSSslave_init+0x4a>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d015      	beq.n	8006926 <CO_LSSslave_init+0x4a>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d012      	beq.n	8006926 <CO_LSSslave_init+0x4a>
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00f      	beq.n	8006926 <CO_LSSslave_init+0x4a>
        CANdevRx==NULL || CANdevTx==NULL ||
 8006906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00c      	beq.n	8006926 <CO_LSSslave_init+0x4a>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
        CANdevRx==NULL || CANdevTx==NULL ||
 8006910:	2b00      	cmp	r3, #0
 8006912:	d004      	beq.n	800691e <CO_LSSslave_init+0x42>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	b25b      	sxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	da06      	bge.n	800692c <CO_LSSslave_init+0x50>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2bff      	cmp	r3, #255	; 0xff
 8006924:	d002      	beq.n	800692c <CO_LSSslave_init+0x50>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006926:	f04f 33ff 	mov.w	r3, #4294967295
 800692a:	e046      	b.n	80069ba <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 800692c:	2274      	movs	r2, #116	; 0x74
 800692e:	2100      	movs	r1, #0
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f005 fc51 	bl	800c1d8 <memset>

    /* Configure object variables */
    memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2210      	movs	r2, #16
 800693a:	68b9      	ldr	r1, [r7, #8]
 800693c:	4618      	mov	r0, r3
 800693e:	f005 fcd5 	bl	800c2ec <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	639a      	str	r2, [r3, #56]	; 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	63da      	str	r2, [r3, #60]	; 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781a      	ldrb	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	645a      	str	r2, [r3, #68]	; 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(
 800696c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800696e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8006970:	4b14      	ldr	r3, [pc, #80]	; (80069c4 <CO_LSSslave_init+0xe8>)
 8006972:	9302      	str	r3, [sp, #8]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	2300      	movs	r3, #0
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006980:	6a38      	ldr	r0, [r7, #32]
 8006982:	f001 fb97 	bl	80080b4 <CO_CANrxBufferInit>
 8006986:	4603      	mov	r3, r0
 8006988:	75fb      	strb	r3, [r7, #23]
            0,                    /* rtr */
            (void*)LSSslave,      /* object passed to receive function */
            CO_LSSslave_receive); /* this function will process received message */

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800698e:	66da      	str	r2, [r3, #108]	; 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(
 8006990:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006992:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8006994:	2300      	movs	r3, #0
 8006996:	9301      	str	r3, [sp, #4]
 8006998:	2308      	movs	r3, #8
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	2300      	movs	r3, #0
 800699e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069a0:	f001 fbe4 	bl	800816c <CO_CANtxBufferInit>
 80069a4:	4602      	mov	r2, r0
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	671a      	str	r2, [r3, #112]	; 0x70
            CANidLssSlave,        /* CAN identifier */
            0,                    /* rtr */
            8,                    /* number of data bytes */
            0);                   /* synchronous message flag bit */

    if (LSSslave->TXbuff == NULL) {
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80069b2:	23ff      	movs	r3, #255	; 0xff
 80069b4:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 80069b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	0800661d 	.word	0x0800661d

080069c8 <CO_LSSslave_process>:
    }
}


/******************************************************************************/
bool_t CO_LSSslave_process(CO_LSSslave_t *LSSslave) {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08c      	sub	sp, #48	; 0x30
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 80069d0:	2300      	movs	r3, #0
 80069d2:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 8203 	beq.w	8006de4 <CO_LSSslave_process+0x41c>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 80069de:	2300      	movs	r3, #0
 80069e0:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t valSw;

        memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e6:	3305      	adds	r3, #5
 80069e8:	2208      	movs	r2, #8
 80069ea:	2100      	movs	r1, #0
 80069ec:	4618      	mov	r0, r3
 80069ee:	f005 fbf3 	bl	800c1d8 <memset>

        switch (LSSslave->service) {
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80069f8:	3b04      	subs	r3, #4
 80069fa:	2b5a      	cmp	r3, #90	; 0x5a
 80069fc:	f200 81dd 	bhi.w	8006dba <CO_LSSslave_process+0x3f2>
 8006a00:	a201      	add	r2, pc, #4	; (adr r2, 8006a08 <CO_LSSslave_process+0x40>)
 8006a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a06:	bf00      	nop
 8006a08:	08006b75 	.word	0x08006b75
 8006a0c:	08006dbb 	.word	0x08006dbb
 8006a10:	08006dbb 	.word	0x08006dbb
 8006a14:	08006dbb 	.word	0x08006dbb
 8006a18:	08006dbb 	.word	0x08006dbb
 8006a1c:	08006dbb 	.word	0x08006dbb
 8006a20:	08006dbb 	.word	0x08006dbb
 8006a24:	08006dbb 	.word	0x08006dbb
 8006a28:	08006dbb 	.word	0x08006dbb
 8006a2c:	08006dbb 	.word	0x08006dbb
 8006a30:	08006dbb 	.word	0x08006dbb
 8006a34:	08006dbb 	.word	0x08006dbb
 8006a38:	08006dbb 	.word	0x08006dbb
 8006a3c:	08006b89 	.word	0x08006b89
 8006a40:	08006dbb 	.word	0x08006dbb
 8006a44:	08006bd7 	.word	0x08006bd7
 8006a48:	08006dbb 	.word	0x08006dbb
 8006a4c:	08006c73 	.word	0x08006c73
 8006a50:	08006dbb 	.word	0x08006dbb
 8006a54:	08006cb1 	.word	0x08006cb1
 8006a58:	08006dbb 	.word	0x08006dbb
 8006a5c:	08006dbb 	.word	0x08006dbb
 8006a60:	08006dbb 	.word	0x08006dbb
 8006a64:	08006dbb 	.word	0x08006dbb
 8006a68:	08006dbb 	.word	0x08006dbb
 8006a6c:	08006dbb 	.word	0x08006dbb
 8006a70:	08006dbb 	.word	0x08006dbb
 8006a74:	08006dbb 	.word	0x08006dbb
 8006a78:	08006dbb 	.word	0x08006dbb
 8006a7c:	08006dbb 	.word	0x08006dbb
 8006a80:	08006dbb 	.word	0x08006dbb
 8006a84:	08006dbb 	.word	0x08006dbb
 8006a88:	08006dbb 	.word	0x08006dbb
 8006a8c:	08006dbb 	.word	0x08006dbb
 8006a90:	08006dbb 	.word	0x08006dbb
 8006a94:	08006dbb 	.word	0x08006dbb
 8006a98:	08006dbb 	.word	0x08006dbb
 8006a9c:	08006dbb 	.word	0x08006dbb
 8006aa0:	08006dbb 	.word	0x08006dbb
 8006aa4:	08006dbb 	.word	0x08006dbb
 8006aa8:	08006dbb 	.word	0x08006dbb
 8006aac:	08006dbb 	.word	0x08006dbb
 8006ab0:	08006dbb 	.word	0x08006dbb
 8006ab4:	08006dbb 	.word	0x08006dbb
 8006ab8:	08006dbb 	.word	0x08006dbb
 8006abc:	08006dbb 	.word	0x08006dbb
 8006ac0:	08006dbb 	.word	0x08006dbb
 8006ac4:	08006dbb 	.word	0x08006dbb
 8006ac8:	08006dbb 	.word	0x08006dbb
 8006acc:	08006dbb 	.word	0x08006dbb
 8006ad0:	08006dbb 	.word	0x08006dbb
 8006ad4:	08006dbb 	.word	0x08006dbb
 8006ad8:	08006dbb 	.word	0x08006dbb
 8006adc:	08006dbb 	.word	0x08006dbb
 8006ae0:	08006dbb 	.word	0x08006dbb
 8006ae4:	08006dbb 	.word	0x08006dbb
 8006ae8:	08006dbb 	.word	0x08006dbb
 8006aec:	08006dbb 	.word	0x08006dbb
 8006af0:	08006dbb 	.word	0x08006dbb
 8006af4:	08006dbb 	.word	0x08006dbb
 8006af8:	08006dbb 	.word	0x08006dbb
 8006afc:	08006dbb 	.word	0x08006dbb
 8006b00:	08006dbb 	.word	0x08006dbb
 8006b04:	08006b7b 	.word	0x08006b7b
 8006b08:	08006dbb 	.word	0x08006dbb
 8006b0c:	08006dbb 	.word	0x08006dbb
 8006b10:	08006dbb 	.word	0x08006dbb
 8006b14:	08006dbb 	.word	0x08006dbb
 8006b18:	08006dbb 	.word	0x08006dbb
 8006b1c:	08006dbb 	.word	0x08006dbb
 8006b20:	08006dbb 	.word	0x08006dbb
 8006b24:	08006dbb 	.word	0x08006dbb
 8006b28:	08006dbb 	.word	0x08006dbb
 8006b2c:	08006dbb 	.word	0x08006dbb
 8006b30:	08006dbb 	.word	0x08006dbb
 8006b34:	08006dbb 	.word	0x08006dbb
 8006b38:	08006dbb 	.word	0x08006dbb
 8006b3c:	08006dad 	.word	0x08006dad
 8006b40:	08006dbb 	.word	0x08006dbb
 8006b44:	08006dbb 	.word	0x08006dbb
 8006b48:	08006dbb 	.word	0x08006dbb
 8006b4c:	08006dbb 	.word	0x08006dbb
 8006b50:	08006dbb 	.word	0x08006dbb
 8006b54:	08006dbb 	.word	0x08006dbb
 8006b58:	08006dbb 	.word	0x08006dbb
 8006b5c:	08006dbb 	.word	0x08006dbb
 8006b60:	08006d07 	.word	0x08006d07
 8006b64:	08006d29 	.word	0x08006d29
 8006b68:	08006d4b 	.word	0x08006d4b
 8006b6c:	08006d6d 	.word	0x08006d6d
 8006b70:	08006d8f 	.word	0x08006d8f
        case CO_LSS_SWITCH_STATE_GLOBAL: {
            /* Node-Id was unconfigured before, now it is configured,
             * enter the NMT Reset communication autonomously. */
            resetCommunication = true;
 8006b74:	2301      	movs	r3, #1
 8006b76:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8006b78:	e126      	b.n	8006dc8 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
            LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7e:	2244      	movs	r2, #68	; 0x44
 8006b80:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 8006b82:	2301      	movs	r3, #1
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006b86:	e11f      	b.n	8006dc8 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_NODE_ID: {
            nid = LSSslave->CANdata[1];
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8006b8e:	74fb      	strb	r3, [r7, #19]
            errorCode = CO_LSS_CFG_NODE_ID_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            if (CO_LSS_NODE_ID_VALID(nid)) {
 8006b96:	7cfb      	ldrb	r3, [r7, #19]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <CO_LSSslave_process+0x1dc>
 8006b9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	da02      	bge.n	8006baa <CO_LSSslave_process+0x1e2>
 8006ba4:	7cfb      	ldrb	r3, [r7, #19]
 8006ba6:	2bff      	cmp	r3, #255	; 0xff
 8006ba8:	d104      	bne.n	8006bb4 <CO_LSSslave_process+0x1ec>
                *LSSslave->pendingNodeID = nid;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bae:	7cfa      	ldrb	r2, [r7, #19]
 8006bb0:	701a      	strb	r2, [r3, #0]
 8006bb2:	e002      	b.n	8006bba <CO_LSSslave_process+0x1f2>
            }
            else {
                errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006bc4:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bca:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006bce:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006bd4:	e0f8      	b.n	8006dc8 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 80ef 	beq.w	8006dbe <CO_LSSslave_process+0x3f6>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            tableSelector = LSSslave->CANdata[1];
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8006be6:	777b      	strb	r3, [r7, #29]
            tableIndex = LSSslave->CANdata[2];
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8006bee:	773b      	strb	r3, [r7, #28]
            errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8006bfc:	7f7b      	ldrb	r3, [r7, #29]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d121      	bne.n	8006c46 <CO_LSSslave_process+0x27e>
 8006c02:	7f3b      	ldrb	r3, [r7, #28]
 8006c04:	2b05      	cmp	r3, #5
 8006c06:	d01e      	beq.n	8006c46 <CO_LSSslave_process+0x27e>
 8006c08:	7f3b      	ldrb	r3, [r7, #28]
 8006c0a:	2b09      	cmp	r3, #9
 8006c0c:	d81b      	bhi.n	8006c46 <CO_LSSslave_process+0x27e>
                uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 8006c0e:	7f3b      	ldrb	r3, [r7, #28]
 8006c10:	4a77      	ldr	r2, [pc, #476]	; (8006df0 <CO_LSSslave_process+0x428>)
 8006c12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c16:	837b      	strh	r3, [r7, #26]
                bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006c20:	8b79      	ldrh	r1, [r7, #26]
 8006c22:	4610      	mov	r0, r2
 8006c24:	4798      	blx	r3
 8006c26:	6178      	str	r0, [r7, #20]
                    LSSslave->functLSScheckBitRateObject, bit);

                if (bit_rate_supported) {
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d004      	beq.n	8006c38 <CO_LSSslave_process+0x270>
                    *LSSslave->pendingBitRate = bit;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c32:	8b7a      	ldrh	r2, [r7, #26]
 8006c34:	801a      	strh	r2, [r3, #0]
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8006c36:	e009      	b.n	8006c4c <CO_LSSslave_process+0x284>
                }
                else {
                    errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 8006c38:	23ff      	movs	r3, #255	; 0xff
 8006c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8006c44:	e002      	b.n	8006c4c <CO_LSSslave_process+0x284>
                }
            }
            else {
                /* we currently only support CiA301 bit timing table */
                errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8006c46:	2301      	movs	r3, #1
 8006c48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006c56:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006c60:	719a      	strb	r2, [r3, #6]
            LSSslave->TXbuff->data[2] = errorCodeManuf;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c66:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8006c6a:	71da      	strb	r2, [r3, #7]
            CANsend = true;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006c70:	e0aa      	b.n	8006dc8 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 80a3 	beq.w	8006dc2 <CO_LSSslave_process+0x3fa>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            /* notify application */
            if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 80a0 	beq.w	8006dc6 <CO_LSSslave_process+0x3fe>
                uint16_t delay = ((uint16_t) LSSslave->CANdata[2]) << 8;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	021b      	lsls	r3, r3, #8
 8006c90:	83fb      	strh	r3, [r7, #30]
                delay |= LSSslave->CANdata[1];
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	8bfb      	ldrh	r3, [r7, #30]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	83fb      	strh	r3, [r7, #30]
                LSSslave->pFunctLSSactivateBitRate(
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8006ca8:	8bf9      	ldrh	r1, [r7, #30]
 8006caa:	4610      	mov	r0, r2
 8006cac:	4798      	blx	r3
                    LSSslave->functLSSactivateBitRateObject, delay);
            }
            break;
 8006cae:	e08a      	b.n	8006dc6 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_CFG_STORE: {
            errorCode = CO_LSS_CFG_STORE_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            if (LSSslave->pFunctLSScfgStore == NULL) {
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d103      	bne.n	8006cc6 <CO_LSSslave_process+0x2fe>
                /* storing is not supported. Reply error */
                errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cc4:	e011      	b.n	8006cea <CO_LSSslave_process+0x322>
            }
            else {
                bool_t result;
                /* Store "pending" to "persistent" */
                result =
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	6e90      	ldr	r0, [r2, #104]	; 0x68
                                               *LSSslave->pendingNodeID,
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8006cd2:	7811      	ldrb	r1, [r2, #0]
                                               *LSSslave->pendingBitRate);
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8006cd8:	8812      	ldrh	r2, [r2, #0]
 8006cda:	4798      	blx	r3
 8006cdc:	6238      	str	r0, [r7, #32]
                if (!result) {
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d102      	bne.n	8006cea <CO_LSSslave_process+0x322>
                    errorCode = CO_LSS_CFG_STORE_FAILED;
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006cf4:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006cfe:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 8006d00:	2301      	movs	r3, #1
 8006d02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006d04:	e060      	b.n	8006dc8 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_VENDOR: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006d10:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1c:	3306      	adds	r3, #6
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8006d22:	2301      	movs	r3, #1
 8006d24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006d26:	e04f      	b.n	8006dc8 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_PRODUCT: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006d32:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3e:	3306      	adds	r3, #6
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8006d44:	2301      	movs	r3, #1
 8006d46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006d48:	e03e      	b.n	8006dc8 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_REV: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006d54:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d60:	3306      	adds	r3, #6
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8006d66:	2301      	movs	r3, #1
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006d6a:	e02d      	b.n	8006dc8 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_SERIAL: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006d76:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d82:	3306      	adds	r3, #6
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006d8c:	e01c      	b.n	8006dc8 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_NODE_ID: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006d98:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8006da4:	719a      	strb	r2, [r3, #6]
            CANsend = true;
 8006da6:	2301      	movs	r3, #1
 8006da8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006daa:	e00d      	b.n	8006dc8 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_IDENT_FASTSCAN: {
            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db0:	224f      	movs	r2, #79	; 0x4f
 8006db2:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 8006db4:	2301      	movs	r3, #1
 8006db6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006db8:	e006      	b.n	8006dc8 <CO_LSSslave_process+0x400>
        }
        default: {
            break;
 8006dba:	bf00      	nop
 8006dbc:	e004      	b.n	8006dc8 <CO_LSSslave_process+0x400>
                break;
 8006dbe:	bf00      	nop
 8006dc0:	e002      	b.n	8006dc8 <CO_LSSslave_process+0x400>
                break;
 8006dc2:	bf00      	nop
 8006dc4:	e000      	b.n	8006dc8 <CO_LSSslave_process+0x400>
            break;
 8006dc6:	bf00      	nop
        }
        }

        if(CANsend) {
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d007      	beq.n	8006dde <CO_LSSslave_process+0x416>
            CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	4610      	mov	r0, r2
 8006dda:	f001 fa41 	bl	8008260 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    return resetCommunication;
 8006de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3730      	adds	r7, #48	; 0x30
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	0800cc98 	.word	0x0800cc98

08006df4 <CO_isError>:
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	08db      	lsrs	r3, r3, #3
 8006e04:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8006e06:	78fb      	ldrb	r3, [r7, #3]
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e12:	73bb      	strb	r3, [r7, #14]
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00a      	beq.n	8006e30 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	2b09      	cmp	r3, #9
 8006e1e:	d807      	bhi.n	8006e30 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	5cd2      	ldrb	r2, [r2, r3]
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	4013      	ands	r3, r2
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <CO_isError+0x40>
 8006e30:	2301      	movs	r3, #1
 8006e32:	e000      	b.n	8006e36 <CO_isError+0x42>
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <CO_getErrorRegister>:
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d007      	beq.n	8006e60 <CO_getErrorRegister+0x1e>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <CO_getErrorRegister+0x1e>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	e000      	b.n	8006e62 <CO_getErrorRegister+0x20>
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <CO_NMT_getInternalState>:
 *
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t CO_NMT_getInternalState(CO_NMT_t *NMT) {
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <CO_NMT_getInternalState+0x16>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f993 3000 	ldrsb.w	r3, [r3]
 8006e82:	e000      	b.n	8006e86 <CO_NMT_getInternalState+0x18>
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <CO_LSSslave_getState>:
 * Get current LSS state
 *
 * @param LSSslave This object.
 * @return #CO_LSS_state_t
 */
static inline CO_LSS_state_t CO_LSSslave_getState(CO_LSSslave_t *LSSslave) {
 8006e92:	b480      	push	{r7}
 8006e94:	b083      	sub	sp, #12
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <CO_LSSslave_getState+0x14>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	7c1b      	ldrb	r3, [r3, #16]
 8006ea4:	e000      	b.n	8006ea8 <CO_LSSslave_getState+0x16>
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <CO_new>:
#define ON_MULTI_OD(sentence) sentence
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t *CO_new(CO_config_t *config, uint32_t *heapMemoryUsed) {
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
    CO_t *co = NULL;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t *coFinal = NULL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	613b      	str	r3, [r7, #16]
#else
        (void) config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 8006eca:	2144      	movs	r1, #68	; 0x44
 8006ecc:	2001      	movs	r0, #1
 8006ece:	f004 fddf 	bl	800ba90 <calloc>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	60fb      	str	r3, [r7, #12]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 8111 	beq.w	8007100 <CO_new+0x24c>
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	3344      	adds	r3, #68	; 0x44
 8006ee2:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8006ee4:	212c      	movs	r1, #44	; 0x2c
 8006ee6:	2001      	movs	r0, #1
 8006ee8:	f004 fdd2 	bl	800ba90 <calloc>
 8006eec:	4603      	mov	r3, r0
 8006eee:	461a      	mov	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	611a      	str	r2, [r3, #16]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 8101 	beq.w	8007100 <CO_new+0x24c>
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	332c      	adds	r3, #44	; 0x2c
 8006f02:	613b      	str	r3, [r7, #16]
        }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 8006f04:	2308      	movs	r3, #8
 8006f06:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8006f08:	2130      	movs	r1, #48	; 0x30
 8006f0a:	2001      	movs	r0, #1
 8006f0c:	f004 fdc0 	bl	800ba90 <calloc>
 8006f10:	4603      	mov	r3, r0
 8006f12:	461a      	mov	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	615a      	str	r2, [r3, #20]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 80ef 	beq.w	8007100 <CO_new+0x24c>
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	3330      	adds	r3, #48	; 0x30
 8006f26:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8006f28:	7afb      	ldrb	r3, [r7, #11]
 8006f2a:	2110      	movs	r1, #16
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f004 fdaf 	bl	800ba90 <calloc>
 8006f32:	4603      	mov	r3, r0
 8006f34:	461a      	mov	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	619a      	str	r2, [r3, #24]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 80de 	beq.w	8007100 <CO_new+0x24c>
 8006f44:	7afb      	ldrb	r3, [r7, #11]
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8006f4e:	2150      	movs	r1, #80	; 0x50
 8006f50:	2001      	movs	r0, #1
 8006f52:	f004 fd9d 	bl	800ba90 <calloc>
 8006f56:	4603      	mov	r3, r0
 8006f58:	461a      	mov	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	61da      	str	r2, [r3, #28]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f000 80cc 	beq.w	8007100 <CO_new+0x24c>
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	3350      	adds	r3, #80	; 0x50
 8006f6c:	613b      	str	r3, [r7, #16]
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
 #endif
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1;
 8006f6e:	2311      	movs	r3, #17
 8006f70:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2) {
 8006f72:	7abb      	ldrb	r3, [r7, #10]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d912      	bls.n	8006f9e <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8006f78:	7abb      	ldrb	r3, [r7, #10]
 8006f7a:	2108      	movs	r1, #8
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f004 fd87 	bl	800ba90 <calloc>
 8006f82:	4603      	mov	r3, r0
 8006f84:	461a      	mov	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	621a      	str	r2, [r3, #32]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 80b6 	beq.w	8007100 <CO_new+0x24c>
 8006f94:	7abb      	ldrb	r3, [r7, #10]
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8006f9e:	21a8      	movs	r1, #168	; 0xa8
 8006fa0:	2001      	movs	r0, #1
 8006fa2:	f004 fd75 	bl	800ba90 <calloc>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	461a      	mov	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	625a      	str	r2, [r3, #36]	; 0x24
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 80a4 	beq.w	8007100 <CO_new+0x24c>
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	33a8      	adds	r3, #168	; 0xa8
 8006fbc:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SDO_CLI = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_CLI = 0);
        if (CO_GET_CNT(SDO_CLI) > 0) {
            CO_alloc_break_on_fail(co->SDOclient, CO_GET_CNT(SDO_CLI), sizeof(*co->SDOclient));
 8006fbe:	217c      	movs	r1, #124	; 0x7c
 8006fc0:	2001      	movs	r0, #1
 8006fc2:	f004 fd65 	bl	800ba90 <calloc>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	461a      	mov	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	629a      	str	r2, [r3, #40]	; 0x28
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 8094 	beq.w	8007100 <CO_new+0x24c>
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	337c      	adds	r3, #124	; 0x7c
 8006fdc:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8006fde:	212c      	movs	r1, #44	; 0x2c
 8006fe0:	2001      	movs	r0, #1
 8006fe2:	f004 fd55 	bl	800ba90 <calloc>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	461a      	mov	r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	62da      	str	r2, [r3, #44]	; 0x2c
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 8084 	beq.w	8007100 <CO_new+0x24c>
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	332c      	adds	r3, #44	; 0x2c
 8006ffc:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8006ffe:	2160      	movs	r1, #96	; 0x60
 8007000:	2001      	movs	r0, #1
 8007002:	f004 fd45 	bl	800ba90 <calloc>
 8007006:	4603      	mov	r3, r0
 8007008:	461a      	mov	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	631a      	str	r2, [r3, #48]	; 0x30
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007012:	2b00      	cmp	r3, #0
 8007014:	d074      	beq.n	8007100 <CO_new+0x24c>
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	3360      	adds	r3, #96	; 0x60
 800701a:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        ON_MULTI_OD(uint16_t RX_CNT_RPDO = 0);
        if (CO_GET_CNT(RPDO) > 0) {
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 800701c:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8007020:	2001      	movs	r0, #1
 8007022:	f004 fd35 	bl	800ba90 <calloc>
 8007026:	4603      	mov	r3, r0
 8007028:	461a      	mov	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	635a      	str	r2, [r3, #52]	; 0x34
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007032:	2b00      	cmp	r3, #0
 8007034:	d064      	beq.n	8007100 <CO_new+0x24c>
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800703c:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 800703e:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8007042:	2001      	movs	r0, #1
 8007044:	f004 fd24 	bl	800ba90 <calloc>
 8007048:	4603      	mov	r3, r0
 800704a:	461a      	mov	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	639a      	str	r2, [r3, #56]	; 0x38
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007054:	2b00      	cmp	r3, #0
 8007056:	d053      	beq.n	8007100 <CO_new+0x24c>
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800705e:	613b      	str	r3, [r7, #16]
        }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
        if (CO_GET_CNT(LEDS) == 1) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8007060:	210c      	movs	r1, #12
 8007062:	2001      	movs	r0, #1
 8007064:	f004 fd14 	bl	800ba90 <calloc>
 8007068:	4603      	mov	r3, r0
 800706a:	461a      	mov	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d043      	beq.n	8007100 <CO_new+0x24c>
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	330c      	adds	r3, #12
 800707c:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 800707e:	2174      	movs	r1, #116	; 0x74
 8007080:	2001      	movs	r0, #1
 8007082:	f004 fd05 	bl	800ba90 <calloc>
 8007086:	4603      	mov	r3, r0
 8007088:	461a      	mov	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	641a      	str	r2, [r3, #64]	; 0x40
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007092:	2b00      	cmp	r3, #0
 8007094:	d034      	beq.n	8007100 <CO_new+0x24c>
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	3374      	adds	r3, #116	; 0x74
 800709a:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 800709c:	2138      	movs	r1, #56	; 0x38
 800709e:	2001      	movs	r0, #1
 80070a0:	f004 fcf6 	bl	800ba90 <calloc>
 80070a4:	4603      	mov	r3, r0
 80070a6:	461a      	mov	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	605a      	str	r2, [r3, #4]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d025      	beq.n	8007100 <CO_new+0x24c>
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	3338      	adds	r3, #56	; 0x38
 80070b8:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 80070ba:	210c      	movs	r1, #12
 80070bc:	200f      	movs	r0, #15
 80070be:	f004 fce7 	bl	800ba90 <calloc>
 80070c2:	4603      	mov	r3, r0
 80070c4:	461a      	mov	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	609a      	str	r2, [r3, #8]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d016      	beq.n	8007100 <CO_new+0x24c>
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	33b4      	adds	r3, #180	; 0xb4
 80070d6:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 80070d8:	2118      	movs	r1, #24
 80070da:	2007      	movs	r0, #7
 80070dc:	f004 fcd8 	bl	800ba90 <calloc>
 80070e0:	4603      	mov	r3, r0
 80070e2:	461a      	mov	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	60da      	str	r2, [r3, #12]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d007      	beq.n	8007100 <CO_new+0x24c>
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	33a8      	adds	r3, #168	; 0xa8
 80070f4:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2201      	movs	r2, #1
 80070fa:	601a      	str	r2, [r3, #0]
        coFinal = co;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	617b      	str	r3, [r7, #20]
    } while (false);

    if (coFinal == NULL) {
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d102      	bne.n	800710c <CO_new+0x258>
        CO_delete(co);
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 f80b 	bl	8007122 <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d002      	beq.n	8007118 <CO_new+0x264>
        *heapMemoryUsed = mem;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8007118:	697b      	ldr	r3, [r7, #20]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <CO_delete>:

void CO_delete(CO_t *co) {
 8007122:	b580      	push	{r7, lr}
 8007124:	b082      	sub	sp, #8
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d058      	beq.n	80071e2 <CO_delete+0xc0>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	4618      	mov	r0, r3
 8007136:	f000 ffa7 	bl	8008088 <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	4618      	mov	r0, r3
 8007140:	f004 fcc4 	bl	800bacc <free>
    CO_free(co->CANrx);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	4618      	mov	r0, r3
 800714a:	f004 fcbf 	bl	800bacc <free>
    CO_free(co->CANmodule);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	4618      	mov	r0, r3
 8007154:	f004 fcba 	bl	800bacc <free>
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_MASTER
    CO_free(co->LSSmaster);
#endif

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    CO_free(co->LSSslave);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	4618      	mov	r0, r3
 800715e:	f004 fcb5 	bl	800bacc <free>
#if (CO_CONFIG_GFC) & CO_CONFIG_GFC_ENABLE
    CO_free(co->GFC);
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    CO_free(co->LEDs);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007166:	4618      	mov	r0, r3
 8007168:	f004 fcb0 	bl	800bacc <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    CO_free(co->TPDO);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007170:	4618      	mov	r0, r3
 8007172:	f004 fcab 	bl	800bacc <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    CO_free(co->RPDO);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717a:	4618      	mov	r0, r3
 800717c:	f004 fca6 	bl	800bacc <free>
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    CO_free(co->SYNC);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007184:	4618      	mov	r0, r3
 8007186:	f004 fca1 	bl	800bacc <free>
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    CO_free(co->TIME);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	4618      	mov	r0, r3
 8007190:	f004 fc9c 	bl	800bacc <free>
#endif

#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    free(co->SDOclient);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007198:	4618      	mov	r0, r3
 800719a:	f004 fc97 	bl	800bacc <free>
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a2:	4618      	mov	r0, r3
 80071a4:	f004 fc92 	bl	800bacc <free>

    /* Emergency */
    CO_free(co->em);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f004 fc8d 	bl	800bacc <free>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    CO_free(co->em_fifo);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f004 fc88 	bl	800bacc <free>
#endif

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    CO_free(co->HBconsMonitoredNodes);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f004 fc83 	bl	800bacc <free>
    CO_free(co->HBcons);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f004 fc7e 	bl	800bacc <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f004 fc79 	bl	800bacc <free>

    /* CANopen object */
    CO_free(co);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f004 fc76 	bl	800bacc <free>
 80071e0:	e000      	b.n	80071e4 <CO_delete+0xc2>
        return;
 80071e2:	bf00      	nop
}
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <CO_CANinit>:
#endif
    return en;
}

/******************************************************************************/
CO_ReturnError_t CO_CANinit(CO_t *co, void *CANptr, uint16_t bitRate) {
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b08a      	sub	sp, #40	; 0x28
 80071ee:	af04      	add	r7, sp, #16
 80071f0:	60f8      	str	r0, [r7, #12]
 80071f2:	60b9      	str	r1, [r7, #8]
 80071f4:	4613      	mov	r3, r2
 80071f6:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) return CO_ERROR_ILLEGAL_ARGUMENT;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d102      	bne.n	8007204 <CO_CANinit+0x1a>
 80071fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007202:	e01a      	b.n	800723a <CO_CANinit+0x50>

    co->CANmodule->CANnormal = false;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 800720c:	68b8      	ldr	r0, [r7, #8]
 800720e:	f000 fe57 	bl	8007ec0 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule,
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6858      	ldr	r0, [r3, #4]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6899      	ldr	r1, [r3, #8]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	88fa      	ldrh	r2, [r7, #6]
 8007220:	9202      	str	r2, [sp, #8]
 8007222:	2207      	movs	r2, #7
 8007224:	9201      	str	r2, [sp, #4]
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	230f      	movs	r3, #15
 800722a:	460a      	mov	r2, r1
 800722c:	68b9      	ldr	r1, [r7, #8]
 800722e:	f000 fe6f 	bl	8007f10 <CO_CANmodule_init>
 8007232:	4603      	mov	r3, r0
 8007234:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_RX_MSGS),
                            co->CANtx,
                            CO_GET_CO(CNT_ALL_TX_MSGS),
                            bitRate);

    return err;
 8007236:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <CO_LSSinit>:
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
CO_ReturnError_t CO_LSSinit(CO_t *co,
                            CO_LSS_address_t *lssAddress,
                            uint8_t *pendingNodeID,
                            uint16_t *pendingBitRate)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b08c      	sub	sp, #48	; 0x30
 8007246:	af06      	add	r7, sp, #24
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	607a      	str	r2, [r7, #4]
 800724e:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if (co == NULL || CO_GET_CNT(LSS_SLV) != 1) {
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d102      	bne.n	800725c <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007256:	f04f 33ff 	mov.w	r3, #4294967295
 800725a:	e01a      	b.n	8007292 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave,
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	6852      	ldr	r2, [r2, #4]
 8007268:	f240 71e4 	movw	r1, #2020	; 0x7e4
 800726c:	9105      	str	r1, [sp, #20]
 800726e:	2106      	movs	r1, #6
 8007270:	9104      	str	r1, [sp, #16]
 8007272:	9203      	str	r2, [sp, #12]
 8007274:	f240 72e5 	movw	r2, #2021	; 0x7e5
 8007278:	9202      	str	r2, [sp, #8]
 800727a:	220e      	movs	r2, #14
 800727c:	9201      	str	r2, [sp, #4]
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	68b9      	ldr	r1, [r7, #8]
 8007286:	f7ff fb29 	bl	80068dc <CO_LSSslave_init>
 800728a:	4603      	mov	r3, r0
 800728c:	75fb      	strb	r3, [r7, #23]
                           CO_CAN_ID_LSS_MST,
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 800728e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <CO_CANopenInit>:
                                uint16_t SDOserverTimeoutTime_ms,
                                uint16_t SDOclientTimeoutTime_ms,
                                bool_t SDOclientBlockTransfer,
                                uint8_t nodeId,
                                uint32_t *errInfo)
{
 800729c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800729e:	b093      	sub	sp, #76	; 0x4c
 80072a0:	af0a      	add	r7, sp, #40	; 0x28
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	603b      	str	r3, [r7, #0]
    (void)SDOclientTimeoutTime_ms; (void)SDOclientBlockTransfer;
    CO_ReturnError_t err;

    if (co == NULL
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d102      	bne.n	80072b6 <CO_CANopenInit+0x1a>
        || (CO_GET_CNT(NMT) == 0 && NMT == NULL)
        || (CO_GET_CNT(EM) == 0 && em == NULL)
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80072b0:	f04f 33ff 	mov.w	r3, #4294967295
 80072b4:	e175      	b.n	80075a2 <CO_CANopenInit+0x306>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d102      	bne.n	80072c2 <CO_CANopenInit+0x26>
        em = co->em;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	69db      	ldr	r3, [r3, #28]
 80072c0:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1 && nodeId == CO_LSS_NODE_ID_ASSIGNMENT) {
 80072c8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80072cc:	2bff      	cmp	r3, #255	; 0xff
 80072ce:	d103      	bne.n	80072d8 <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2201      	movs	r2, #1
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	e00a      	b.n	80072ee <CO_CANopenInit+0x52>
    }
    else
#endif
    if (nodeId < 1 || nodeId > 127) {
 80072d8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d003      	beq.n	80072e8 <CO_CANopenInit+0x4c>
 80072e0:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	da02      	bge.n	80072ee <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80072e8:	f04f 33ff 	mov.w	r3, #4294967295
 80072ec:	e159      	b.n	80075a2 <CO_CANopenInit+0x306>
    }

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    if (CO_GET_CNT(LEDS) == 1) {
        err = CO_LEDs_init(co->LEDs);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fe ff86 	bl	8006204 <CO_LEDs_init>
 80072f8:	4603      	mov	r3, r0
 80072fa:	747b      	strb	r3, [r7, #17]
        if (err) return err;
 80072fc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <CO_CANopenInit+0x6e>
 8007304:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007308:	e14b      	b.n	80075a2 <CO_CANopenInit+0x306>
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 8007312:	f06f 0312 	mvn.w	r3, #18
 8007316:	e144      	b.n	80075a2 <CO_CANopenInit+0x306>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        err = CO_EM_init(co->em,
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	69d8      	ldr	r0, [r3, #28]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	685c      	ldr	r4, [r3, #4]
                         co->CANmodule,
                         OD_GET(H1001, OD_H1001_ERR_REG),
 8007320:	4ba2      	ldr	r3, [pc, #648]	; (80075ac <CO_CANopenInit+0x310>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f103 050c 	add.w	r5, r3, #12
        err = CO_EM_init(co->em,
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6a1e      	ldr	r6, [r3, #32]
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
                         co->em_fifo,
                         (CO_GET_CNT(ARR_1003) + 1),
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY),
 800732e:	4b9f      	ldr	r3, [pc, #636]	; (80075ac <CO_CANopenInit+0x310>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em,
 8007334:	336c      	adds	r3, #108	; 0x6c
  #if (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
  #endif
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 8007336:	4a9d      	ldr	r2, [pc, #628]	; (80075ac <CO_CANopenInit+0x310>)
 8007338:	6812      	ldr	r2, [r2, #0]
 800733a:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em,
 800733c:	3218      	adds	r2, #24
 800733e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007340:	9105      	str	r1, [sp, #20]
 8007342:	f897 1050 	ldrb.w	r1, [r7, #80]	; 0x50
 8007346:	9104      	str	r1, [sp, #16]
 8007348:	9203      	str	r2, [sp, #12]
 800734a:	2201      	movs	r2, #1
 800734c:	9202      	str	r2, [sp, #8]
 800734e:	9301      	str	r3, [sp, #4]
 8007350:	2311      	movs	r3, #17
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	4633      	mov	r3, r6
 8007356:	462a      	mov	r2, r5
 8007358:	4621      	mov	r1, r4
 800735a:	f7f9 fa85 	bl	8000868 <CO_EM_init>
 800735e:	4603      	mov	r3, r0
 8007360:	747b      	strb	r3, [r7, #17]
                         co->CANmodule,
                         CO_GET_CO(RX_IDX_EM_CONS),
 #endif
                         nodeId,
                         errInfo);
        if (err) return err;
 8007362:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d002      	beq.n	8007370 <CO_CANopenInit+0xd4>
 800736a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800736e:	e118      	b.n	80075a2 <CO_CANopenInit+0x306>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        err = CO_NMT_init(co->NMT,
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	691c      	ldr	r4, [r3, #16]
                          OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME),
 8007374:	4b8d      	ldr	r3, [pc, #564]	; (80075ac <CO_CANopenInit+0x310>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
        err = CO_NMT_init(co->NMT,
 800737a:	f103 0590 	add.w	r5, r3, #144	; 0x90
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	6852      	ldr	r2, [r2, #4]
 8007386:	f897 1050 	ldrb.w	r1, [r7, #80]	; 0x50
 800738a:	b289      	uxth	r1, r1
 800738c:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
 8007390:	b289      	uxth	r1, r1
 8007392:	f897 6050 	ldrb.w	r6, [r7, #80]	; 0x50
 8007396:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007398:	9008      	str	r0, [sp, #32]
 800739a:	9107      	str	r1, [sp, #28]
 800739c:	2105      	movs	r1, #5
 800739e:	9106      	str	r1, [sp, #24]
 80073a0:	9205      	str	r2, [sp, #20]
 80073a2:	2200      	movs	r2, #0
 80073a4:	9204      	str	r2, [sp, #16]
 80073a6:	2200      	movs	r2, #0
 80073a8:	9203      	str	r2, [sp, #12]
 80073aa:	9302      	str	r3, [sp, #8]
 80073ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80073b0:	9301      	str	r3, [sp, #4]
 80073b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	4633      	mov	r3, r6
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	4629      	mov	r1, r5
 80073bc:	4620      	mov	r0, r4
 80073be:	f7fa f8f7 	bl	80015b0 <CO_NMT_init>
 80073c2:	4603      	mov	r3, r0
 80073c4:	747b      	strb	r3, [r7, #17]
 #endif
                          co->CANmodule,
                          CO_GET_CO(TX_IDX_HB_PROD),
                          CO_CAN_ID_HEARTBEAT + nodeId,
                          errInfo);
        if (err) return err;
 80073c6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d002      	beq.n	80073d4 <CO_CANopenInit+0x138>
 80073ce:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80073d2:	e0e6      	b.n	80075a2 <CO_CANopenInit+0x306>
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        err = CO_HBconsumer_init(co->HBcons,
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6958      	ldr	r0, [r3, #20]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	699c      	ldr	r4, [r3, #24]
                                 em,
                                 co->HBconsMonitoredNodes,
                                 CO_GET_CNT(ARR_1016),
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME),
 80073dc:	4b73      	ldr	r3, [pc, #460]	; (80075ac <CO_CANopenInit+0x310>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons,
 80073e2:	3384      	adds	r3, #132	; 0x84
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	6852      	ldr	r2, [r2, #4]
 80073e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073ea:	9103      	str	r1, [sp, #12]
 80073ec:	2106      	movs	r1, #6
 80073ee:	9102      	str	r1, [sp, #8]
 80073f0:	9201      	str	r2, [sp, #4]
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	2308      	movs	r3, #8
 80073f6:	4622      	mov	r2, r4
 80073f8:	6879      	ldr	r1, [r7, #4]
 80073fa:	f7f9 fdc9 	bl	8000f90 <CO_HBconsumer_init>
 80073fe:	4603      	mov	r3, r0
 8007400:	747b      	strb	r3, [r7, #17]
                                 co->CANmodule,
                                 CO_GET_CO(RX_IDX_HB_CONS),
                                 errInfo);
        if (err) return err;
 8007402:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <CO_CANopenInit+0x174>
 800740a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800740e:	e0c8      	b.n	80075a2 <CO_CANopenInit+0x306>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0) {
        OD_entry_t *SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 8007410:	4b66      	ldr	r3, [pc, #408]	; (80075ac <CO_CANopenInit+0x310>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	33b4      	adds	r3, #180	; 0xb4
 8007418:	61fb      	str	r3, [r7, #28]
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 800741a:	2300      	movs	r3, #0
 800741c:	837b      	strh	r3, [r7, #26]
 800741e:	e034      	b.n	800748a <CO_CANopenInit+0x1ee>
            err = CO_SDOserver_init(&co->SDOserver[i],
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007424:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007428:	21a8      	movs	r1, #168	; 0xa8
 800742a:	fb01 f303 	mul.w	r3, r1, r3
 800742e:	18d6      	adds	r6, r2, r3
 8007430:	69fa      	ldr	r2, [r7, #28]
 8007432:	f102 030c 	add.w	r3, r2, #12
 8007436:	61fb      	str	r3, [r7, #28]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	8b79      	ldrh	r1, [r7, #26]
 800743e:	3104      	adds	r1, #4
 8007440:	b289      	uxth	r1, r1
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	6840      	ldr	r0, [r0, #4]
 8007446:	8b7c      	ldrh	r4, [r7, #26]
 8007448:	3403      	adds	r4, #3
 800744a:	b2a4      	uxth	r4, r4
 800744c:	f897 c050 	ldrb.w	ip, [r7, #80]	; 0x50
 8007450:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8007452:	9505      	str	r5, [sp, #20]
 8007454:	9404      	str	r4, [sp, #16]
 8007456:	9003      	str	r0, [sp, #12]
 8007458:	9102      	str	r1, [sp, #8]
 800745a:	9301      	str	r3, [sp, #4]
 800745c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	4663      	mov	r3, ip
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	4630      	mov	r0, r6
 8007468:	f7fc fff4 	bl	8004454 <CO_SDOserver_init>
 800746c:	4603      	mov	r3, r0
 800746e:	747b      	strb	r3, [r7, #17]
                                    co->CANmodule,
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i,
                                    co->CANmodule,
                                    CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err) return err;
 8007470:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <CO_CANopenInit+0x1e2>
 8007478:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800747c:	e091      	b.n	80075a2 <CO_CANopenInit+0x306>
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 800747e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007482:	b29b      	uxth	r3, r3
 8007484:	3301      	adds	r3, #1
 8007486:	b29b      	uxth	r3, r3
 8007488:	837b      	strh	r3, [r7, #26]
 800748a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800748e:	2b00      	cmp	r3, #0
 8007490:	ddc6      	ble.n	8007420 <CO_CANopenInit+0x184>
        }
    }

#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    if (CO_GET_CNT(SDO_CLI) > 0) {
        OD_entry_t *SDOcliPar = OD_GET(H1280, OD_H1280_SDO_CLIENT_1_PARAM);
 8007492:	4b46      	ldr	r3, [pc, #280]	; (80075ac <CO_CANopenInit+0x310>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	33c0      	adds	r3, #192	; 0xc0
 800749a:	617b      	str	r3, [r7, #20]
        for (int16_t i = 0; i < CO_GET_CNT(SDO_CLI); i++) {
 800749c:	2300      	movs	r3, #0
 800749e:	827b      	strh	r3, [r7, #18]
 80074a0:	e032      	b.n	8007508 <CO_CANopenInit+0x26c>
            err = CO_SDOclient_init(&co->SDOclient[i],
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80074a6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80074aa:	4613      	mov	r3, r2
 80074ac:	015b      	lsls	r3, r3, #5
 80074ae:	1a9b      	subs	r3, r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	18ce      	adds	r6, r1, r3
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	f102 030c 	add.w	r3, r2, #12
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	8a79      	ldrh	r1, [r7, #18]
 80074c2:	3105      	adds	r1, #5
 80074c4:	b289      	uxth	r1, r1
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	6840      	ldr	r0, [r0, #4]
 80074ca:	8a7c      	ldrh	r4, [r7, #18]
 80074cc:	3404      	adds	r4, #4
 80074ce:	b2a4      	uxth	r4, r4
 80074d0:	f897 c050 	ldrb.w	ip, [r7, #80]	; 0x50
 80074d4:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 80074d6:	9504      	str	r5, [sp, #16]
 80074d8:	9403      	str	r4, [sp, #12]
 80074da:	9002      	str	r0, [sp, #8]
 80074dc:	9101      	str	r1, [sp, #4]
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	4663      	mov	r3, ip
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	4630      	mov	r0, r6
 80074e6:	f7fc f984 	bl	80037f2 <CO_SDOclient_init>
 80074ea:	4603      	mov	r3, r0
 80074ec:	747b      	strb	r3, [r7, #17]
                                    co->CANmodule,
                                    CO_GET_CO(RX_IDX_SDO_CLI) + i,
                                    co->CANmodule,
                                    CO_GET_CO(TX_IDX_SDO_CLI) + i,
                                    errInfo);
            if (err) return err;
 80074ee:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d002      	beq.n	80074fc <CO_CANopenInit+0x260>
 80074f6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80074fa:	e052      	b.n	80075a2 <CO_CANopenInit+0x306>
        for (int16_t i = 0; i < CO_GET_CNT(SDO_CLI); i++) {
 80074fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007500:	b29b      	uxth	r3, r3
 8007502:	3301      	adds	r3, #1
 8007504:	b29b      	uxth	r3, r3
 8007506:	827b      	strh	r3, [r7, #18]
 8007508:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800750c:	2b00      	cmp	r3, #0
 800750e:	ddc8      	ble.n	80074a2 <CO_CANopenInit+0x206>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        err = CO_TIME_init(co->TIME,
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                           OD_GET(H1012, OD_H1012_COBID_TIME),
 8007514:	4b25      	ldr	r3, [pc, #148]	; (80075ac <CO_CANopenInit+0x310>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
        err = CO_TIME_init(co->TIME,
 800751a:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	2302      	movs	r3, #2
 8007528:	f7fe fca4 	bl	8005e74 <CO_TIME_init>
 800752c:	4603      	mov	r3, r0
 800752e:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err) return err;
 8007530:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <CO_CANopenInit+0x2a2>
 8007538:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800753c:	e031      	b.n	80075a2 <CO_CANopenInit+0x306>
    }
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    if (CO_GET_CNT(SYNC) == 1) {
        err = CO_SYNC_init(co->SYNC,
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6b1d      	ldr	r5, [r3, #48]	; 0x30
                           em,
                           OD_GET(H1005, OD_H1005_COBID_SYNC),
 8007542:	4b1a      	ldr	r3, [pc, #104]	; (80075ac <CO_CANopenInit+0x310>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8007548:	f103 0624 	add.w	r6, r3, #36	; 0x24
                           OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 800754c:	4b17      	ldr	r3, [pc, #92]	; (80075ac <CO_CANopenInit+0x310>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8007552:	f103 0c30 	add.w	ip, r3, #48	; 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN),
 8007556:	4b15      	ldr	r3, [pc, #84]	; (80075ac <CO_CANopenInit+0x310>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 800755c:	333c      	adds	r3, #60	; 0x3c
                           OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 800755e:	4a13      	ldr	r2, [pc, #76]	; (80075ac <CO_CANopenInit+0x310>)
 8007560:	6812      	ldr	r2, [r2, #0]
 8007562:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC,
 8007564:	32a8      	adds	r2, #168	; 0xa8
 8007566:	68f9      	ldr	r1, [r7, #12]
 8007568:	6849      	ldr	r1, [r1, #4]
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	6840      	ldr	r0, [r0, #4]
 800756e:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8007570:	9406      	str	r4, [sp, #24]
 8007572:	2400      	movs	r4, #0
 8007574:	9405      	str	r4, [sp, #20]
 8007576:	9004      	str	r0, [sp, #16]
 8007578:	2001      	movs	r0, #1
 800757a:	9003      	str	r0, [sp, #12]
 800757c:	9102      	str	r1, [sp, #8]
 800757e:	9201      	str	r2, [sp, #4]
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	4663      	mov	r3, ip
 8007584:	4632      	mov	r2, r6
 8007586:	6879      	ldr	r1, [r7, #4]
 8007588:	4628      	mov	r0, r5
 800758a:	f7fe f985 	bl	8005898 <CO_SYNC_init>
 800758e:	4603      	mov	r3, r0
 8007590:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err) return err;
 8007592:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <CO_CANopenInit+0x304>
 800759a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800759e:	e000      	b.n	80075a2 <CO_CANopenInit+0x306>
            if (err) return err;
        }
    }
#endif

    return CO_ERROR_NO;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3724      	adds	r7, #36	; 0x24
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20000204 	.word	0x20000204

080075b0 <CO_CANopenInitPDO>:
CO_ReturnError_t CO_CANopenInitPDO(CO_t *co,
                                   CO_EM_t *em,
                                   OD_t *od,
                                   uint8_t nodeId,
                                   uint32_t *errInfo)
{
 80075b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075b2:	b093      	sub	sp, #76	; 0x4c
 80075b4:	af06      	add	r7, sp, #24
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
 80075bc:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d102      	bne.n	80075ca <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80075c4:	f04f 33ff 	mov.w	r3, #4294967295
 80075c8:	e0c1      	b.n	800774e <CO_CANopenInitPDO+0x19e>
    }
    if (nodeId < 1 || nodeId > 127 || co->nodeIdUnconfigured) {
 80075ca:	78fb      	ldrb	r3, [r7, #3]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d007      	beq.n	80075e0 <CO_CANopenInitPDO+0x30>
 80075d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	db03      	blt.n	80075e0 <CO_CANopenInitPDO+0x30>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d009      	beq.n	80075f4 <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
               ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <CO_CANopenInitPDO+0x3e>
 80075e8:	f06f 0312 	mvn.w	r3, #18
 80075ec:	e0af      	b.n	800774e <CO_CANopenInitPDO+0x19e>
 80075ee:	f04f 33ff 	mov.w	r3, #4294967295
 80075f2:	e0ac      	b.n	800774e <CO_CANopenInitPDO+0x19e>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    if (CO_GET_CNT(RPDO) > 0) {
        OD_entry_t *RPDOcomm = OD_GET(H1400, OD_H1400_RXPDO_1_PARAM);
 80075f4:	4b58      	ldr	r3, [pc, #352]	; (8007758 <CO_CANopenInitPDO+0x1a8>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	33cc      	adds	r3, #204	; 0xcc
 80075fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        OD_entry_t *RPDOmap = OD_GET(H1600, OD_H1600_RXPDO_1_MAPPING);
 80075fe:	4b56      	ldr	r3, [pc, #344]	; (8007758 <CO_CANopenInitPDO+0x1a8>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	33d8      	adds	r3, #216	; 0xd8
 8007606:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8007608:	2300      	movs	r3, #0
 800760a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800760c:	e044      	b.n	8007698 <CO_CANopenInitPDO+0xe8>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 800760e:	2300      	movs	r3, #0
 8007610:	84bb      	strh	r3, [r7, #36]	; 0x24
            if (i < CO_RPDO_DEFAULT_CANID_COUNT) {
 8007612:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007616:	2b03      	cmp	r3, #3
 8007618:	dc09      	bgt.n	800762e <CO_CANopenInitPDO+0x7e>
#if CO_RPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + i * 0x100) + nodeId;
 800761a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800761e:	3302      	adds	r3, #2
 8007620:	b29b      	uxth	r3, r3
 8007622:	021b      	lsls	r3, r3, #8
 8007624:	b29a      	uxth	r2, r3
 8007626:	78fb      	ldrb	r3, [r7, #3]
 8007628:	b29b      	uxth	r3, r3
 800762a:	4413      	add	r3, r2
 800762c:	84bb      	strh	r3, [r7, #36]	; 0x24
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_RPDO_init(&co->RPDO[i],
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007632:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007636:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800763a:	fb01 f303 	mul.w	r3, r1, r3
 800763e:	18d5      	adds	r5, r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8007644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007646:	f103 020c 	add.w	r2, r3, #12
 800764a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800764c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800764e:	f102 010c 	add.w	r1, r2, #12
 8007652:	62b9      	str	r1, [r7, #40]	; 0x28
 8007654:	68f9      	ldr	r1, [r7, #12]
 8007656:	6849      	ldr	r1, [r1, #4]
 8007658:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800765a:	3003      	adds	r0, #3
 800765c:	b280      	uxth	r0, r0
 800765e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8007660:	9405      	str	r4, [sp, #20]
 8007662:	9004      	str	r0, [sp, #16]
 8007664:	9103      	str	r1, [sp, #12]
 8007666:	9202      	str	r2, [sp, #8]
 8007668:	9301      	str	r3, [sp, #4]
 800766a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	4633      	mov	r3, r6
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	6879      	ldr	r1, [r7, #4]
 8007674:	4628      	mov	r0, r5
 8007676:	f7fb f8ff 	bl	8002878 <CO_RPDO_init>
 800767a:	4603      	mov	r3, r0
 800767c:	75bb      	strb	r3, [r7, #22]
                               RPDOcomm++,
                               RPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(RX_IDX_RPDO) + i,
                               errInfo);
            if (err) return err;
 800767e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d002      	beq.n	800768c <CO_CANopenInitPDO+0xdc>
 8007686:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800768a:	e060      	b.n	800774e <CO_CANopenInitPDO+0x19e>
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 800768c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007690:	b29b      	uxth	r3, r3
 8007692:	3301      	adds	r3, #1
 8007694:	b29b      	uxth	r3, r3
 8007696:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007698:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800769c:	2b00      	cmp	r3, #0
 800769e:	ddb6      	ble.n	800760e <CO_CANopenInitPDO+0x5e>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    if (CO_GET_CNT(TPDO) > 0) {
        OD_entry_t *TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 80076a0:	4b2d      	ldr	r3, [pc, #180]	; (8007758 <CO_CANopenInitPDO+0x1a8>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	33e4      	adds	r3, #228	; 0xe4
 80076a8:	623b      	str	r3, [r7, #32]
        OD_entry_t *TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 80076aa:	4b2b      	ldr	r3, [pc, #172]	; (8007758 <CO_CANopenInitPDO+0x1a8>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	33f0      	adds	r3, #240	; 0xf0
 80076b2:	61fb      	str	r3, [r7, #28]
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80076b4:	2300      	movs	r3, #0
 80076b6:	837b      	strh	r3, [r7, #26]
 80076b8:	e044      	b.n	8007744 <CO_CANopenInitPDO+0x194>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 80076ba:	2300      	movs	r3, #0
 80076bc:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 80076be:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	dc09      	bgt.n	80076da <CO_CANopenInitPDO+0x12a>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + i * 0x100) + nodeId;
 80076c6:	8b7b      	ldrh	r3, [r7, #26]
 80076c8:	021b      	lsls	r3, r3, #8
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	78fb      	ldrb	r3, [r7, #3]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	4413      	add	r3, r2
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80076d8:	833b      	strh	r3, [r7, #24]
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i],
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076de:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80076e2:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80076e6:	fb01 f303 	mul.w	r3, r1, r3
 80076ea:	18d5      	adds	r5, r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	f103 020c 	add.w	r2, r3, #12
 80076f6:	623a      	str	r2, [r7, #32]
 80076f8:	69fa      	ldr	r2, [r7, #28]
 80076fa:	f102 010c 	add.w	r1, r2, #12
 80076fe:	61f9      	str	r1, [r7, #28]
 8007700:	68f9      	ldr	r1, [r7, #12]
 8007702:	6849      	ldr	r1, [r1, #4]
 8007704:	8b78      	ldrh	r0, [r7, #26]
 8007706:	3002      	adds	r0, #2
 8007708:	b280      	uxth	r0, r0
 800770a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800770c:	9405      	str	r4, [sp, #20]
 800770e:	9004      	str	r0, [sp, #16]
 8007710:	9103      	str	r1, [sp, #12]
 8007712:	9202      	str	r2, [sp, #8]
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	8b3b      	ldrh	r3, [r7, #24]
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	4633      	mov	r3, r6
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	6879      	ldr	r1, [r7, #4]
 8007720:	4628      	mov	r0, r5
 8007722:	f7fb fc8b 	bl	800303c <CO_TPDO_init>
 8007726:	4603      	mov	r3, r0
 8007728:	75fb      	strb	r3, [r7, #23]
                               TPDOcomm++,
                               TPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(TX_IDX_TPDO) + i,
                               errInfo);
            if (err) return err;
 800772a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <CO_CANopenInitPDO+0x188>
 8007732:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007736:	e00a      	b.n	800774e <CO_CANopenInitPDO+0x19e>
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8007738:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800773c:	b29b      	uxth	r3, r3
 800773e:	3301      	adds	r3, #1
 8007740:	b29b      	uxth	r3, r3
 8007742:	837b      	strh	r3, [r7, #26]
 8007744:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007748:	2b00      	cmp	r3, #0
 800774a:	ddb6      	ble.n	80076ba <CO_CANopenInitPDO+0x10a>
        }
    }
#endif

    return CO_ERROR_NO;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3734      	adds	r7, #52	; 0x34
 8007752:	46bd      	mov	sp, r7
 8007754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007756:	bf00      	nop
 8007758:	20000204 	.word	0x20000204

0800775c <CO_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(CO_t *co,
                              bool_t enableGateway,
                              uint32_t timeDifference_us,
                              uint32_t *timerNext_us)
{
 800775c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800775e:	b097      	sub	sp, #92	; 0x5c
 8007760:	af08      	add	r7, sp, #32
 8007762:	61f8      	str	r0, [r7, #28]
 8007764:	61b9      	str	r1, [r7, #24]
 8007766:	617a      	str	r2, [r7, #20]
 8007768:	613b      	str	r3, [r7, #16]
    (void) enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 800776a:	2300      	movs	r3, #0
 800776c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	4618      	mov	r0, r3
 8007776:	f7ff fb7a 	bl	8006e6e <CO_NMT_getInternalState>
 800777a:	4603      	mov	r3, r0
 800777c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007780:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
                                    || NMTstate == CO_NMT_OPERATIONAL);
 8007784:	2b7f      	cmp	r3, #127	; 0x7f
 8007786:	d003      	beq.n	8007790 <CO_process+0x34>
 8007788:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800778c:	2b05      	cmp	r3, #5
 800778e:	d101      	bne.n	8007794 <CO_process+0x38>
 8007790:	2301      	movs	r3, #1
 8007792:	e000      	b.n	8007796 <CO_process+0x3a>
 8007794:	2300      	movs	r3, #0
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007796:	62bb      	str	r3, [r7, #40]	; 0x28

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	4618      	mov	r0, r3
 800779e:	f000 fe08 	bl	80083b2 <CO_CANmodule_process>

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1) {
        if (CO_LSSslave_process(co->LSSslave)) {
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7ff f90e 	bl	80069c8 <CO_LSSslave_process>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d002      	beq.n	80077b8 <CO_process+0x5c>
            reset = CO_RESET_COMM;
 80077b2:	2301      	movs	r3, #1
 80077b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    bool_t unc = co->nodeIdUnconfigured;
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	8a5b      	ldrh	r3, [r3, #18]
 80077c4:	847b      	strh	r3, [r7, #34]	; 0x22
    bool_t LSSslave_configuration = false;
 80077c6:	2300      	movs	r3, #0
 80077c8:	633b      	str	r3, [r7, #48]	; 0x30
 #if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1
        && CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7ff fb5f 	bl	8006e92 <CO_LSSslave_getState>
 80077d4:	4603      	mov	r3, r0
    if (CO_GET_CNT(LSS_SLV) == 1
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d101      	bne.n	80077de <CO_process+0x82>
    ) {
        LSSslave_configuration = true;
 80077da:	2301      	movs	r3, #1
 80077dc:	633b      	str	r3, [r7, #48]	; 0x30
 #ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
  #define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS 0
 #endif

    if (CO_GET_CNT(LEDS) == 1) {
        CO_LEDs_process(co->LEDs,
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d102      	bne.n	80077ee <CO_process+0x92>
 80077e8:	f997 4021 	ldrsb.w	r4, [r7, #33]	; 0x21
 80077ec:	e000      	b.n	80077f0 <CO_process+0x94>
 80077ee:	2400      	movs	r4, #0
            timeDifference_us,
            unc ? CO_NMT_INITIALIZING : NMTstate,
            LSSslave_configuration,
            (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0,
 80077f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077f2:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs,
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	bf14      	ite	ne
 80077fa:	2301      	movne	r3, #1
 80077fc:	2300      	moveq	r3, #0
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	60fb      	str	r3, [r7, #12]
            (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0,
 8007802:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007804:	f240 3303 	movw	r3, #771	; 0x303
 8007808:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs,
 800780a:	2b00      	cmp	r3, #0
 800780c:	bf14      	ite	ne
 800780e:	2301      	movne	r3, #1
 8007810:	2300      	moveq	r3, #0
 8007812:	b2db      	uxtb	r3, r3
 8007814:	60bb      	str	r3, [r7, #8]
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	2b00      	cmp	r3, #0
 800781a:	d107      	bne.n	800782c <CO_process+0xd0>
            0, /* RPDO event timer timeout */
            unc ? false : CO_isError(co->em, CO_EM_SYNC_TIME_OUT),
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	2118      	movs	r1, #24
 8007822:	4618      	mov	r0, r3
 8007824:	f7ff fae6 	bl	8006df4 <CO_isError>
 8007828:	4605      	mov	r5, r0
 800782a:	e000      	b.n	800782e <CO_process+0xd2>
        CO_LEDs_process(co->LEDs,
 800782c:	2500      	movs	r5, #0
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	2b00      	cmp	r3, #0
 8007832:	d113      	bne.n	800785c <CO_process+0x100>
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	69db      	ldr	r3, [r3, #28]
 8007838:	211b      	movs	r1, #27
 800783a:	4618      	mov	r0, r3
 800783c:	f7ff fada 	bl	8006df4 <CO_isError>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d108      	bne.n	8007858 <CO_process+0xfc>
                        || CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET)),
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	69db      	ldr	r3, [r3, #28]
 800784a:	211c      	movs	r1, #28
 800784c:	4618      	mov	r0, r3
 800784e:	f7ff fad1 	bl	8006df4 <CO_isError>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <CO_process+0x100>
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 8007858:	2301      	movs	r3, #1
 800785a:	e000      	b.n	800785e <CO_process+0x102>
 800785c:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs,
 800785e:	607b      	str	r3, [r7, #4]
            CO_getErrorRegister(co->em) != 0,
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	69db      	ldr	r3, [r3, #28]
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff faec 	bl	8006e42 <CO_getErrorRegister>
 800786a:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs,
 800786c:	2b00      	cmp	r3, #0
 800786e:	bf14      	ite	ne
 8007870:	2301      	movne	r3, #1
 8007872:	2300      	moveq	r3, #0
 8007874:	b2db      	uxtb	r3, r3
 8007876:	461a      	mov	r2, r3
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	9307      	str	r3, [sp, #28]
 800787c:	2300      	movs	r3, #0
 800787e:	9306      	str	r3, [sp, #24]
 8007880:	9205      	str	r2, [sp, #20]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	9304      	str	r3, [sp, #16]
 8007886:	9503      	str	r5, [sp, #12]
 8007888:	2300      	movs	r3, #0
 800788a:	9302      	str	r3, [sp, #8]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	9301      	str	r3, [sp, #4]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007896:	4622      	mov	r2, r4
 8007898:	6979      	ldr	r1, [r7, #20]
 800789a:	4630      	mov	r0, r6
 800789c:	f7fe fcca 	bl	8006234 <CO_LEDs_process>
            timerNext_us);
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <CO_process+0x152>
        return reset;
 80078a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078ac:	e047      	b.n	800793e <CO_process+0x1e2>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        CO_EM_process(co->em,
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	69d8      	ldr	r0, [r3, #28]
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	697a      	ldr	r2, [r7, #20]
 80078b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078b8:	f7f9 f8b6 	bl	8000a28 <CO_EM_process>
                      timerNext_us);
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        reset = CO_NMT_process(co->NMT,
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	6918      	ldr	r0, [r3, #16]
 80078c0:	f107 0121 	add.w	r1, r7, #33	; 0x21
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	f7f9 ff30 	bl	800172c <CO_NMT_process>
 80078cc:	4603      	mov	r3, r0
 80078ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               &NMTstate,
                               timeDifference_us,
                               timerNext_us);
    }
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 80078d2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
                             || NMTstate == CO_NMT_OPERATIONAL);
 80078d6:	2b7f      	cmp	r3, #127	; 0x7f
 80078d8:	d003      	beq.n	80078e2 <CO_process+0x186>
 80078da:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80078de:	2b05      	cmp	r3, #5
 80078e0:	d101      	bne.n	80078e6 <CO_process+0x18a>
 80078e2:	2301      	movs	r3, #1
 80078e4:	e000      	b.n	80078e8 <CO_process+0x18c>
 80078e6:	2300      	movs	r3, #0
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 80078e8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 80078ea:	2300      	movs	r3, #0
 80078ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80078f0:	e011      	b.n	8007916 <CO_process+0x1ba>
        CO_SDOserver_process(&co->SDOserver[i],
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078fa:	21a8      	movs	r1, #168	; 0xa8
 80078fc:	fb01 f303 	mul.w	r3, r1, r3
 8007900:	18d0      	adds	r0, r2, r3
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007908:	f7fd f89a 	bl	8004a40 <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 800790c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007910:	3301      	adds	r3, #1
 8007912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0e9      	beq.n	80078f2 <CO_process+0x196>
                             timerNext_us);
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        CO_HBconsumer_process(co->HBcons,
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	6958      	ldr	r0, [r3, #20]
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007928:	f7f9 fc76 	bl	8001218 <CO_HBconsumer_process>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007934:	4618      	mov	r0, r3
 8007936:	f7fe fb1d 	bl	8005f74 <CO_TIME_process>
                        timeDifference_us,
                        timerNext_us);
    }
#endif

    return reset;
 800793a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800793e:	4618      	mov	r0, r3
 8007940:	373c      	adds	r7, #60	; 0x3c
 8007942:	46bd      	mov	sp, r7
 8007944:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007946 <CO_process_SYNC>:
/******************************************************************************/
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
bool_t CO_process_SYNC(CO_t *co,
                       uint32_t timeDifference_us,
                       uint32_t *timerNext_us)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b088      	sub	sp, #32
 800794a:	af00      	add	r7, sp, #0
 800794c:	60f8      	str	r0, [r7, #12]
 800794e:	60b9      	str	r1, [r7, #8]
 8007950:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 8007952:	2300      	movs	r3, #0
 8007954:	61fb      	str	r3, [r7, #28]

    if (!co->nodeIdUnconfigured && CO_GET_CNT(SYNC) == 1) {
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d12e      	bne.n	80079bc <CO_process_SYNC+0x76>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	4618      	mov	r0, r3
 8007964:	f7ff fa83 	bl	8006e6e <CO_NMT_getInternalState>
 8007968:	4603      	mov	r3, r0
 800796a:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
                                        || NMTstate == CO_NMT_OPERATIONAL);
 800796c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007970:	2b7f      	cmp	r3, #127	; 0x7f
 8007972:	d003      	beq.n	800797c <CO_process_SYNC+0x36>
 8007974:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007978:	2b05      	cmp	r3, #5
 800797a:	d101      	bne.n	8007980 <CO_process_SYNC+0x3a>
 800797c:	2301      	movs	r3, #1
 800797e:	e000      	b.n	8007982 <CO_process_SYNC+0x3c>
 8007980:	2300      	movs	r3, #0
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007982:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC,
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	6979      	ldr	r1, [r7, #20]
 800798e:	f7fe f8ab 	bl	8005ae8 <CO_SYNC_process>
 8007992:	4603      	mov	r3, r0
 8007994:	74fb      	strb	r3, [r7, #19]
                                                        NMTisPreOrOperational,
                                                        timeDifference_us,
                                                        timerNext_us);

        switch (sync_process) {
 8007996:	7cfb      	ldrb	r3, [r7, #19]
 8007998:	2b02      	cmp	r3, #2
 800799a:	d008      	beq.n	80079ae <CO_process_SYNC+0x68>
 800799c:	2b02      	cmp	r3, #2
 800799e:	dc0d      	bgt.n	80079bc <CO_process_SYNC+0x76>
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00a      	beq.n	80079ba <CO_process_SYNC+0x74>
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d109      	bne.n	80079bc <CO_process_SYNC+0x76>
            case CO_SYNC_NONE:
                break;
            case CO_SYNC_RX_TX:
                syncWas = true;
 80079a8:	2301      	movs	r3, #1
 80079aa:	61fb      	str	r3, [r7, #28]
                break;
 80079ac:	e006      	b.n	80079bc <CO_process_SYNC+0x76>
            case CO_SYNC_PASSED_WINDOW:
                CO_CANclearPendingSyncPDOs(co->CANmodule);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 fc97 	bl	80082e6 <CO_CANclearPendingSyncPDOs>
                break;
 80079b8:	e000      	b.n	80079bc <CO_process_SYNC+0x76>
                break;
 80079ba:	bf00      	nop
        }
    }

    return syncWas;
 80079bc:	69fb      	ldr	r3, [r7, #28]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3720      	adds	r7, #32
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <CO_process_RPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
void CO_process_RPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b088      	sub	sp, #32
 80079ca:	af02      	add	r7, sp, #8
 80079cc:	60f8      	str	r0, [r7, #12]
 80079ce:	60b9      	str	r1, [r7, #8]
 80079d0:	607a      	str	r2, [r7, #4]
 80079d2:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d129      	bne.n	8007a30 <CO_process_RPDO+0x6a>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7ff fa44 	bl	8006e6e <CO_NMT_getInternalState>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b05      	cmp	r3, #5
 80079ea:	bf0c      	ite	eq
 80079ec:	2301      	moveq	r3, #1
 80079ee:	2300      	movne	r3, #0
 80079f0:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 80079f2:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 80079f4:	2300      	movs	r3, #0
 80079f6:	82fb      	strh	r3, [r7, #22]
 80079f8:	e015      	b.n	8007a26 <CO_process_RPDO+0x60>
        CO_RPDO_process(&co->RPDO[i],
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007a02:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8007a06:	fb01 f303 	mul.w	r3, r1, r3
 8007a0a:	18d0      	adds	r0, r2, r3
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	6879      	ldr	r1, [r7, #4]
 8007a16:	f7fb f875 	bl	8002b04 <CO_RPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8007a1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	3301      	adds	r3, #1
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	82fb      	strh	r3, [r7, #22]
 8007a26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	dde5      	ble.n	80079fa <CO_process_RPDO+0x34>
 8007a2e:	e000      	b.n	8007a32 <CO_process_RPDO+0x6c>
        return;
 8007a30:	bf00      	nop
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 8007a32:	3718      	adds	r7, #24
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <CO_process_TPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
void CO_process_TPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b088      	sub	sp, #32
 8007a3c:	af02      	add	r7, sp, #8
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
 8007a44:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d129      	bne.n	8007aa2 <CO_process_TPDO+0x6a>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7ff fa0b 	bl	8006e6e <CO_NMT_getInternalState>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b05      	cmp	r3, #5
 8007a5c:	bf0c      	ite	eq
 8007a5e:	2301      	moveq	r3, #1
 8007a60:	2300      	movne	r3, #0
 8007a62:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 8007a64:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8007a66:	2300      	movs	r3, #0
 8007a68:	82fb      	strh	r3, [r7, #22]
 8007a6a:	e015      	b.n	8007a98 <CO_process_TPDO+0x60>
        CO_TPDO_process(&co->TPDO[i],
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007a74:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8007a78:	fb01 f303 	mul.w	r3, r1, r3
 8007a7c:	18d0      	adds	r0, r2, r3
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	6879      	ldr	r1, [r7, #4]
 8007a88:	f7fb fcf6 	bl	8003478 <CO_TPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8007a8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	3301      	adds	r3, #1
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	82fb      	strh	r3, [r7, #22]
 8007a98:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	dde5      	ble.n	8007a6c <CO_process_TPDO+0x34>
 8007aa0:	e000      	b.n	8007aa4 <CO_process_TPDO+0x6c>
        return;
 8007aa2:	bf00      	nop
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
	...

08007aac <HAL_TIM_PeriodElapsedCallback>:
/* Printf function of CanOpen app */
#define log_printf(macropar_message, ...) \
        printf(macropar_message, ##__VA_ARGS__)

/* Timer interrupt function executes every 1 ms */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
	if (htim == canopenNodeSTM32->timerHandle)
 8007ab4:	4b05      	ldr	r3, [pc, #20]	; (8007acc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d101      	bne.n	8007ac4 <HAL_TIM_PeriodElapsedCallback+0x18>
		canopen_app_interrupt();
 8007ac0:	f000 f9bc 	bl	8007e3c <canopen_app_interrupt>
}
 8007ac4:	bf00      	nop
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	2000029c 	.word	0x2000029c

08007ad0 <canopen_app_init>:
// Global variables
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int canopen_app_init(CANopenNodeSTM32 *canopenSTM32) {
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]

	// Keep a copy global reference of canOpenSTM32 Object
	canopenNodeSTM32 = canopenSTM32;
 8007ad8:	4a13      	ldr	r2, [pc, #76]	; (8007b28 <canopen_app_init+0x58>)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

	/* Allocate memory */
	CO_config_t *config_ptr = NULL;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

	uint32_t heapMemoryUsed;
	CO = CO_new(config_ptr, &heapMemoryUsed);
 8007ae2:	f107 0308 	add.w	r3, r7, #8
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f7ff f9e3 	bl	8006eb4 <CO_new>
 8007aee:	4603      	mov	r3, r0
 8007af0:	4a0e      	ldr	r2, [pc, #56]	; (8007b2c <canopen_app_init+0x5c>)
 8007af2:	6013      	str	r3, [r2, #0]
	if (CO == NULL) {
 8007af4:	4b0d      	ldr	r3, [pc, #52]	; (8007b2c <canopen_app_init+0x5c>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d104      	bne.n	8007b06 <canopen_app_init+0x36>
		log_printf("Error: Can't allocate memory\n");
 8007afc:	480c      	ldr	r0, [pc, #48]	; (8007b30 <canopen_app_init+0x60>)
 8007afe:	f004 fa71 	bl	800bfe4 <puts>
		return 1;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e00c      	b.n	8007b20 <canopen_app_init+0x50>
	} else {
		log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	480a      	ldr	r0, [pc, #40]	; (8007b34 <canopen_app_init+0x64>)
 8007b0c:	f004 fa04 	bl	800bf18 <iprintf>
	}

	canopenNodeSTM32->canOpenStack = CO;
 8007b10:	4b05      	ldr	r3, [pc, #20]	; (8007b28 <canopen_app_init+0x58>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a05      	ldr	r2, [pc, #20]	; (8007b2c <canopen_app_init+0x5c>)
 8007b16:	6812      	ldr	r2, [r2, #0]
 8007b18:	611a      	str	r2, [r3, #16]
        return 2;
    }
#endif


	canopen_app_resetCommunication();
 8007b1a:	f000 f80d 	bl	8007b38 <canopen_app_resetCommunication>
	return 0;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	2000029c 	.word	0x2000029c
 8007b2c:	200002a0 	.word	0x200002a0
 8007b30:	0800ca68 	.word	0x0800ca68
 8007b34:	0800ca88 	.word	0x0800ca88

08007b38 <canopen_app_resetCommunication>:

int canopen_app_resetCommunication() {
 8007b38:	b590      	push	{r4, r7, lr}
 8007b3a:	b08f      	sub	sp, #60	; 0x3c
 8007b3c:	af08      	add	r7, sp, #32
	/* CANopen communication reset - initialize CANopen objects *******************/
	log_printf("CANopenNode - Reset communication...\n");
 8007b3e:	487d      	ldr	r0, [pc, #500]	; (8007d34 <canopen_app_resetCommunication+0x1fc>)
 8007b40:	f004 fa50 	bl	800bfe4 <puts>

	/* Wait rt_thread. */
	CO->CANmodule->CANnormal = false;
 8007b44:	4b7c      	ldr	r3, [pc, #496]	; (8007d38 <canopen_app_resetCommunication+0x200>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	615a      	str	r2, [r3, #20]

	/* Enter CAN configuration. */
	CO_CANsetConfigurationMode((void*) canopenNodeSTM32);
 8007b4e:	4b7b      	ldr	r3, [pc, #492]	; (8007d3c <canopen_app_resetCommunication+0x204>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 f9b4 	bl	8007ec0 <CO_CANsetConfigurationMode>
	CO_CANmodule_disable(CO->CANmodule);
 8007b58:	4b77      	ldr	r3, [pc, #476]	; (8007d38 <canopen_app_resetCommunication+0x200>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 fa92 	bl	8008088 <CO_CANmodule_disable>

	/* initialize CANopen */
	err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 8007b64:	4b74      	ldr	r3, [pc, #464]	; (8007d38 <canopen_app_resetCommunication+0x200>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a74      	ldr	r2, [pc, #464]	; (8007d3c <canopen_app_resetCommunication+0x204>)
 8007b6a:	6811      	ldr	r1, [r2, #0]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7ff fb3b 	bl	80071ea <CO_CANinit>
 8007b74:	4603      	mov	r3, r0
 8007b76:	461a      	mov	r2, r3
 8007b78:	4b71      	ldr	r3, [pc, #452]	; (8007d40 <canopen_app_resetCommunication+0x208>)
 8007b7a:	701a      	strb	r2, [r3, #0]
	if (err != CO_ERROR_NO) {
 8007b7c:	4b70      	ldr	r3, [pc, #448]	; (8007d40 <canopen_app_resetCommunication+0x208>)
 8007b7e:	f993 3000 	ldrsb.w	r3, [r3]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d008      	beq.n	8007b98 <canopen_app_resetCommunication+0x60>
		log_printf("Error: CAN initialization failed: %d\n", err);
 8007b86:	4b6e      	ldr	r3, [pc, #440]	; (8007d40 <canopen_app_resetCommunication+0x208>)
 8007b88:	f993 3000 	ldrsb.w	r3, [r3]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	486d      	ldr	r0, [pc, #436]	; (8007d44 <canopen_app_resetCommunication+0x20c>)
 8007b90:	f004 f9c2 	bl	800bf18 <iprintf>
		return 1;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e0c8      	b.n	8007d2a <canopen_app_resetCommunication+0x1f2>
	}

	CO_LSS_address_t lssAddress = { .identity = { .vendorID =
			OD_PERSIST_COMM.x1018_identity.vendor_ID, .productCode =
 8007b98:	4b6b      	ldr	r3, [pc, #428]	; (8007d48 <canopen_app_resetCommunication+0x210>)
 8007b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	CO_LSS_address_t lssAddress = { .identity = { .vendorID =
 8007b9c:	60bb      	str	r3, [r7, #8]
			OD_PERSIST_COMM.x1018_identity.productCode, .revisionNumber =
 8007b9e:	4b6a      	ldr	r3, [pc, #424]	; (8007d48 <canopen_app_resetCommunication+0x210>)
 8007ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	CO_LSS_address_t lssAddress = { .identity = { .vendorID =
 8007ba2:	60fb      	str	r3, [r7, #12]
			OD_PERSIST_COMM.x1018_identity.revisionNumber, .serialNumber =
 8007ba4:	4b68      	ldr	r3, [pc, #416]	; (8007d48 <canopen_app_resetCommunication+0x210>)
 8007ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	CO_LSS_address_t lssAddress = { .identity = { .vendorID =
 8007ba8:	613b      	str	r3, [r7, #16]
			OD_PERSIST_COMM.x1018_identity.serialNumber } };
 8007baa:	4b67      	ldr	r3, [pc, #412]	; (8007d48 <canopen_app_resetCommunication+0x210>)
 8007bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
	CO_LSS_address_t lssAddress = { .identity = { .vendorID =
 8007bae:	617b      	str	r3, [r7, #20]
	err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 8007bb0:	4b61      	ldr	r3, [pc, #388]	; (8007d38 <canopen_app_resetCommunication+0x200>)
 8007bb2:	6818      	ldr	r0, [r3, #0]
 8007bb4:	4b61      	ldr	r3, [pc, #388]	; (8007d3c <canopen_app_resetCommunication+0x204>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	4b60      	ldr	r3, [pc, #384]	; (8007d3c <canopen_app_resetCommunication+0x204>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3302      	adds	r3, #2
 8007bc0:	f107 0108 	add.w	r1, r7, #8
 8007bc4:	f7ff fb3d 	bl	8007242 <CO_LSSinit>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	461a      	mov	r2, r3
 8007bcc:	4b5c      	ldr	r3, [pc, #368]	; (8007d40 <canopen_app_resetCommunication+0x208>)
 8007bce:	701a      	strb	r2, [r3, #0]
	if (err != CO_ERROR_NO) {
 8007bd0:	4b5b      	ldr	r3, [pc, #364]	; (8007d40 <canopen_app_resetCommunication+0x208>)
 8007bd2:	f993 3000 	ldrsb.w	r3, [r3]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d008      	beq.n	8007bec <canopen_app_resetCommunication+0xb4>
		log_printf("Error: LSS slave initialization failed: %d\n", err);
 8007bda:	4b59      	ldr	r3, [pc, #356]	; (8007d40 <canopen_app_resetCommunication+0x208>)
 8007bdc:	f993 3000 	ldrsb.w	r3, [r3]
 8007be0:	4619      	mov	r1, r3
 8007be2:	485a      	ldr	r0, [pc, #360]	; (8007d4c <canopen_app_resetCommunication+0x214>)
 8007be4:	f004 f998 	bl	800bf18 <iprintf>
		return 2;
 8007be8:	2302      	movs	r3, #2
 8007bea:	e09e      	b.n	8007d2a <canopen_app_resetCommunication+0x1f2>
	}

	canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 8007bec:	4b53      	ldr	r3, [pc, #332]	; (8007d3c <canopen_app_resetCommunication+0x204>)
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	4b52      	ldr	r3, [pc, #328]	; (8007d3c <canopen_app_resetCommunication+0x204>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	7812      	ldrb	r2, [r2, #0]
 8007bf6:	705a      	strb	r2, [r3, #1]
	uint32_t errInfo = 0;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	607b      	str	r3, [r7, #4]

	err = CO_CANopenInit(CO, /* CANopen object */
 8007bfc:	4b4e      	ldr	r3, [pc, #312]	; (8007d38 <canopen_app_resetCommunication+0x200>)
 8007bfe:	6818      	ldr	r0, [r3, #0]
 8007c00:	4b53      	ldr	r3, [pc, #332]	; (8007d50 <canopen_app_resetCommunication+0x218>)
 8007c02:	6819      	ldr	r1, [r3, #0]
	NMT_CONTROL, /* CO_NMT_control_t */
	FIRST_HB_TIME, /* firstHBTime_ms */
	SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
	SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
	SDO_CLI_BLOCK, /* SDOclientBlockTransfer */
	canopenNodeSTM32->activeNodeID, &errInfo);
 8007c04:	4b4d      	ldr	r3, [pc, #308]	; (8007d3c <canopen_app_resetCommunication+0x204>)
 8007c06:	681b      	ldr	r3, [r3, #0]
	err = CO_CANopenInit(CO, /* CANopen object */
 8007c08:	785b      	ldrb	r3, [r3, #1]
 8007c0a:	1d3a      	adds	r2, r7, #4
 8007c0c:	9207      	str	r2, [sp, #28]
 8007c0e:	9306      	str	r3, [sp, #24]
 8007c10:	2300      	movs	r3, #0
 8007c12:	9305      	str	r3, [sp, #20]
 8007c14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007c18:	9304      	str	r3, [sp, #16]
 8007c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c1e:	9303      	str	r3, [sp, #12]
 8007c20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007c24:	9302      	str	r3, [sp, #8]
 8007c26:	f242 1311 	movw	r3, #8465	; 0x2111
 8007c2a:	9301      	str	r3, [sp, #4]
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	460b      	mov	r3, r1
 8007c32:	2200      	movs	r2, #0
 8007c34:	2100      	movs	r1, #0
 8007c36:	f7ff fb31 	bl	800729c <CO_CANopenInit>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	4b40      	ldr	r3, [pc, #256]	; (8007d40 <canopen_app_resetCommunication+0x208>)
 8007c40:	701a      	strb	r2, [r3, #0]
	if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 8007c42:	4b3f      	ldr	r3, [pc, #252]	; (8007d40 <canopen_app_resetCommunication+0x208>)
 8007c44:	f993 3000 	ldrsb.w	r3, [r3]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01a      	beq.n	8007c82 <canopen_app_resetCommunication+0x14a>
 8007c4c:	4b3c      	ldr	r3, [pc, #240]	; (8007d40 <canopen_app_resetCommunication+0x208>)
 8007c4e:	f993 3000 	ldrsb.w	r3, [r3]
 8007c52:	f113 0f13 	cmn.w	r3, #19
 8007c56:	d014      	beq.n	8007c82 <canopen_app_resetCommunication+0x14a>
		if (err == CO_ERROR_OD_PARAMETERS) {
 8007c58:	4b39      	ldr	r3, [pc, #228]	; (8007d40 <canopen_app_resetCommunication+0x208>)
 8007c5a:	f993 3000 	ldrsb.w	r3, [r3]
 8007c5e:	f113 0f0c 	cmn.w	r3, #12
 8007c62:	d105      	bne.n	8007c70 <canopen_app_resetCommunication+0x138>
			log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4619      	mov	r1, r3
 8007c68:	483a      	ldr	r0, [pc, #232]	; (8007d54 <canopen_app_resetCommunication+0x21c>)
 8007c6a:	f004 f955 	bl	800bf18 <iprintf>
 8007c6e:	e006      	b.n	8007c7e <canopen_app_resetCommunication+0x146>
		} else {
			log_printf("Error: CANopen initialization failed: %d\n", err);
 8007c70:	4b33      	ldr	r3, [pc, #204]	; (8007d40 <canopen_app_resetCommunication+0x208>)
 8007c72:	f993 3000 	ldrsb.w	r3, [r3]
 8007c76:	4619      	mov	r1, r3
 8007c78:	4837      	ldr	r0, [pc, #220]	; (8007d58 <canopen_app_resetCommunication+0x220>)
 8007c7a:	f004 f94d 	bl	800bf18 <iprintf>
		}
		return 3;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e053      	b.n	8007d2a <canopen_app_resetCommunication+0x1f2>
	}

	err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 8007c82:	4b2d      	ldr	r3, [pc, #180]	; (8007d38 <canopen_app_resetCommunication+0x200>)
 8007c84:	6818      	ldr	r0, [r3, #0]
 8007c86:	4b2c      	ldr	r3, [pc, #176]	; (8007d38 <canopen_app_resetCommunication+0x200>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	69d9      	ldr	r1, [r3, #28]
 8007c8c:	4b30      	ldr	r3, [pc, #192]	; (8007d50 <canopen_app_resetCommunication+0x218>)
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	4b2a      	ldr	r3, [pc, #168]	; (8007d3c <canopen_app_resetCommunication+0x204>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	785c      	ldrb	r4, [r3, #1]
 8007c96:	1d3b      	adds	r3, r7, #4
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	4623      	mov	r3, r4
 8007c9c:	f7ff fc88 	bl	80075b0 <CO_CANopenInitPDO>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	4b26      	ldr	r3, [pc, #152]	; (8007d40 <canopen_app_resetCommunication+0x208>)
 8007ca6:	701a      	strb	r2, [r3, #0]
	if (err != CO_ERROR_NO) {
 8007ca8:	4b25      	ldr	r3, [pc, #148]	; (8007d40 <canopen_app_resetCommunication+0x208>)
 8007caa:	f993 3000 	ldrsb.w	r3, [r3]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d014      	beq.n	8007cdc <canopen_app_resetCommunication+0x1a4>
		if (err == CO_ERROR_OD_PARAMETERS) {
 8007cb2:	4b23      	ldr	r3, [pc, #140]	; (8007d40 <canopen_app_resetCommunication+0x208>)
 8007cb4:	f993 3000 	ldrsb.w	r3, [r3]
 8007cb8:	f113 0f0c 	cmn.w	r3, #12
 8007cbc:	d105      	bne.n	8007cca <canopen_app_resetCommunication+0x192>
			log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	4824      	ldr	r0, [pc, #144]	; (8007d54 <canopen_app_resetCommunication+0x21c>)
 8007cc4:	f004 f928 	bl	800bf18 <iprintf>
 8007cc8:	e006      	b.n	8007cd8 <canopen_app_resetCommunication+0x1a0>
		} else {
			log_printf("Error: PDO initialization failed: %d\n", err);
 8007cca:	4b1d      	ldr	r3, [pc, #116]	; (8007d40 <canopen_app_resetCommunication+0x208>)
 8007ccc:	f993 3000 	ldrsb.w	r3, [r3]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	4822      	ldr	r0, [pc, #136]	; (8007d5c <canopen_app_resetCommunication+0x224>)
 8007cd4:	f004 f920 	bl	800bf18 <iprintf>
		}
		return 4;
 8007cd8:	2304      	movs	r3, #4
 8007cda:	e026      	b.n	8007d2a <canopen_app_resetCommunication+0x1f2>
	}

	/* Configure Timer interrupt function for execution every 1 millisecond */
	HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 8007cdc:	4b17      	ldr	r3, [pc, #92]	; (8007d3c <canopen_app_resetCommunication+0x204>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f003 fc62 	bl	800b5ac <HAL_TIM_Base_Start_IT>

	/* Configure CAN transmit and receive interrupt */

	/* Configure CANopen callbacks, etc */
	if (!CO->nodeIdUnconfigured) {
 8007ce8:	4b13      	ldr	r3, [pc, #76]	; (8007d38 <canopen_app_resetCommunication+0x200>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <canopen_app_resetCommunication+0x1c0>
	                CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY,
	                               CO_EMC_HARDWARE, storageInitError);
	            }
	#endif
	} else {
		log_printf("CANopenNode - Node-id not initialized\n");
 8007cf2:	481b      	ldr	r0, [pc, #108]	; (8007d60 <canopen_app_resetCommunication+0x228>)
 8007cf4:	f004 f976 	bl	800bfe4 <puts>
	}

	/* start CAN */
	CO_CANsetNormalMode(CO->CANmodule);
 8007cf8:	4b0f      	ldr	r3, [pc, #60]	; (8007d38 <canopen_app_resetCommunication+0x200>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 f8ee 	bl	8007ee0 <CO_CANsetNormalMode>

	log_printf("CANopenNode - Running...\n");
 8007d04:	4817      	ldr	r0, [pc, #92]	; (8007d64 <canopen_app_resetCommunication+0x22c>)
 8007d06:	f004 f96d 	bl	800bfe4 <puts>
	fflush(stdout);
 8007d0a:	4b17      	ldr	r3, [pc, #92]	; (8007d68 <canopen_app_resetCommunication+0x230>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f004 f83d 	bl	800bd90 <fflush>
	time_old = time_current = HAL_GetTick();
 8007d16:	f001 fd47 	bl	80097a8 <HAL_GetTick>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	4a13      	ldr	r2, [pc, #76]	; (8007d6c <canopen_app_resetCommunication+0x234>)
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	4b12      	ldr	r3, [pc, #72]	; (8007d6c <canopen_app_resetCommunication+0x234>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a12      	ldr	r2, [pc, #72]	; (8007d70 <canopen_app_resetCommunication+0x238>)
 8007d26:	6013      	str	r3, [r2, #0]
	return 0;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	371c      	adds	r7, #28
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd90      	pop	{r4, r7, pc}
 8007d32:	bf00      	nop
 8007d34:	0800cab0 	.word	0x0800cab0
 8007d38:	200002a0 	.word	0x200002a0
 8007d3c:	2000029c 	.word	0x2000029c
 8007d40:	200002b0 	.word	0x200002b0
 8007d44:	0800cad8 	.word	0x0800cad8
 8007d48:	20000000 	.word	0x20000000
 8007d4c:	0800cb00 	.word	0x0800cb00
 8007d50:	20000204 	.word	0x20000204
 8007d54:	0800cb2c 	.word	0x0800cb2c
 8007d58:	0800cb54 	.word	0x0800cb54
 8007d5c:	0800cb80 	.word	0x0800cb80
 8007d60:	0800cba8 	.word	0x0800cba8
 8007d64:	0800cbd0 	.word	0x0800cbd0
 8007d68:	2000027c 	.word	0x2000027c
 8007d6c:	200002ac 	.word	0x200002ac
 8007d70:	200002a8 	.word	0x200002a8

08007d74 <canopen_app_process>:

void canopen_app_process() {
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
	/* loop for normal program execution ******************************************/
	/* get time difference since last function call */
	time_current = HAL_GetTick();
 8007d7a:	f001 fd15 	bl	80097a8 <HAL_GetTick>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	4a26      	ldr	r2, [pc, #152]	; (8007e1c <canopen_app_process+0xa8>)
 8007d82:	6013      	str	r3, [r2, #0]

	if ((time_current - time_old) > 0) { // More than 1ms elapsed
 8007d84:	4b25      	ldr	r3, [pc, #148]	; (8007e1c <canopen_app_process+0xa8>)
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	4b25      	ldr	r3, [pc, #148]	; (8007e20 <canopen_app_process+0xac>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d041      	beq.n	8007e14 <canopen_app_process+0xa0>
		/* CANopen process */
		CO_NMT_reset_cmd_t reset_status;
		uint32_t timeDifference_us = (time_current - time_old) * 1000;
 8007d90:	4b22      	ldr	r3, [pc, #136]	; (8007e1c <canopen_app_process+0xa8>)
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	4b22      	ldr	r3, [pc, #136]	; (8007e20 <canopen_app_process+0xac>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d9e:	fb02 f303 	mul.w	r3, r2, r3
 8007da2:	607b      	str	r3, [r7, #4]
		time_old = time_current;
 8007da4:	4b1d      	ldr	r3, [pc, #116]	; (8007e1c <canopen_app_process+0xa8>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a1d      	ldr	r2, [pc, #116]	; (8007e20 <canopen_app_process+0xac>)
 8007daa:	6013      	str	r3, [r2, #0]
		reset_status = CO_process(CO, false, timeDifference_us, NULL);
 8007dac:	4b1d      	ldr	r3, [pc, #116]	; (8007e24 <canopen_app_process+0xb0>)
 8007dae:	6818      	ldr	r0, [r3, #0]
 8007db0:	2300      	movs	r3, #0
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	2100      	movs	r1, #0
 8007db6:	f7ff fcd1 	bl	800775c <CO_process>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	70fb      	strb	r3, [r7, #3]
		LED_red = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 8007dbe:	4b19      	ldr	r3, [pc, #100]	; (8007e24 <canopen_app_process+0xb0>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc4:	7a5b      	ldrb	r3, [r3, #9]
 8007dc6:	09db      	lsrs	r3, r3, #7
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	4b17      	ldr	r3, [pc, #92]	; (8007e28 <canopen_app_process+0xb4>)
 8007dcc:	701a      	strb	r2, [r3, #0]
		LED_green = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 8007dce:	4b15      	ldr	r3, [pc, #84]	; (8007e24 <canopen_app_process+0xb0>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd4:	7a9b      	ldrb	r3, [r3, #10]
 8007dd6:	09db      	lsrs	r3, r3, #7
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	4b14      	ldr	r3, [pc, #80]	; (8007e2c <canopen_app_process+0xb8>)
 8007ddc:	701a      	strb	r2, [r3, #0]

		if (reset_status == CO_RESET_COMM) {
 8007dde:	78fb      	ldrb	r3, [r7, #3]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d10f      	bne.n	8007e04 <canopen_app_process+0x90>
			/* delete objects from memory */
			CO_CANsetConfigurationMode((void*) canopenNodeSTM32);
 8007de4:	4b12      	ldr	r3, [pc, #72]	; (8007e30 <canopen_app_process+0xbc>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 f869 	bl	8007ec0 <CO_CANsetConfigurationMode>
			CO_delete(CO);
 8007dee:	4b0d      	ldr	r3, [pc, #52]	; (8007e24 <canopen_app_process+0xb0>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7ff f995 	bl	8007122 <CO_delete>
			log_printf("CANopenNode Reset Communication request\n");
 8007df8:	480e      	ldr	r0, [pc, #56]	; (8007e34 <canopen_app_process+0xc0>)
 8007dfa:	f004 f8f3 	bl	800bfe4 <puts>
			canopen_app_resetCommunication(); // Reset Communication routine
 8007dfe:	f7ff fe9b 	bl	8007b38 <canopen_app_resetCommunication>
		}

	}


}
 8007e02:	e007      	b.n	8007e14 <canopen_app_process+0xa0>
		} else if (reset_status == CO_RESET_APP) {
 8007e04:	78fb      	ldrb	r3, [r7, #3]
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d104      	bne.n	8007e14 <canopen_app_process+0xa0>
			log_printf("CANopenNode Device Reset\n");
 8007e0a:	480b      	ldr	r0, [pc, #44]	; (8007e38 <canopen_app_process+0xc4>)
 8007e0c:	f004 f8ea 	bl	800bfe4 <puts>
			HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 8007e10:	f002 fcdf 	bl	800a7d2 <HAL_NVIC_SystemReset>
}
 8007e14:	bf00      	nop
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	200002ac 	.word	0x200002ac
 8007e20:	200002a8 	.word	0x200002a8
 8007e24:	200002a0 	.word	0x200002a0
 8007e28:	200002a4 	.word	0x200002a4
 8007e2c:	200002a5 	.word	0x200002a5
 8007e30:	2000029c 	.word	0x2000029c
 8007e34:	0800cbec 	.word	0x0800cbec
 8007e38:	0800cc14 	.word	0x0800cc14

08007e3c <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void canopen_app_interrupt(void) {
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
	CO_LOCK_OD(CO->CANmodule);
 8007e42:	4b1e      	ldr	r3, [pc, #120]	; (8007ebc <canopen_app_interrupt+0x80>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e48:	f3ef 8210 	mrs	r2, PRIMASK
 8007e4c:	607a      	str	r2, [r7, #4]
  return(result);
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8007e52:	b672      	cpsid	i
}
 8007e54:	bf00      	nop
	if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 8007e56:	4b19      	ldr	r3, [pc, #100]	; (8007ebc <canopen_app_interrupt+0x80>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d120      	bne.n	8007ea2 <canopen_app_interrupt+0x66>
 8007e60:	4b16      	ldr	r3, [pc, #88]	; (8007ebc <canopen_app_interrupt+0x80>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01a      	beq.n	8007ea2 <canopen_app_interrupt+0x66>
		bool_t syncWas = false;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	60fb      	str	r3, [r7, #12]
		/* get time difference since last function call */
		uint32_t timeDifference_us = 1000; // 1ms second
 8007e70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e74:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
		syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 8007e76:	4b11      	ldr	r3, [pc, #68]	; (8007ebc <canopen_app_interrupt+0x80>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	68b9      	ldr	r1, [r7, #8]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7ff fd61 	bl	8007946 <CO_process_SYNC>
 8007e84:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
		CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 8007e86:	4b0d      	ldr	r3, [pc, #52]	; (8007ebc <canopen_app_interrupt+0x80>)
 8007e88:	6818      	ldr	r0, [r3, #0]
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	68f9      	ldr	r1, [r7, #12]
 8007e90:	f7ff fd99 	bl	80079c6 <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
		CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 8007e94:	4b09      	ldr	r3, [pc, #36]	; (8007ebc <canopen_app_interrupt+0x80>)
 8007e96:	6818      	ldr	r0, [r3, #0]
 8007e98:	2300      	movs	r3, #0
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	68f9      	ldr	r1, [r7, #12]
 8007e9e:	f7ff fdcb 	bl	8007a38 <CO_process_TPDO>
#endif

		/* Further I/O or nonblocking application code may go here. */
	}
	CO_UNLOCK_OD(CO->CANmodule);
 8007ea2:	4b06      	ldr	r3, [pc, #24]	; (8007ebc <canopen_app_interrupt+0x80>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eaa:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	f383 8810 	msr	PRIMASK, r3
}
 8007eb2:	bf00      	nop
}
 8007eb4:	bf00      	nop
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	200002a0 	.word	0x200002a0

08007ec0 <CO_CANsetConfigurationMode>:
osSemaphoreId_t co_drv_periodic_thread_sync_semaphore;
#endif /* defined(USE_OS) */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void *CANptr) {
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d004      	beq.n	8007ed8 <CO_CANsetConfigurationMode+0x18>
		#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32 *)CANptr)->CANHandle);
		#else
        HAL_CAN_Stop(((CANopenNodeSTM32 *)CANptr)->CANHandle);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f001 fec4 	bl	8009c60 <HAL_CAN_Stop>
		#endif
    }
}
 8007ed8:	bf00      	nop
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t *CANmodule) {
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00b      	beq.n	8007f08 <CO_CANsetNormalMode+0x28>
		#ifdef CO_STM32_FDCAN_Driver
    	if(HAL_FDCAN_Start(((CANopenNodeSTM32 *)CANmodule->CANptr)->CANHandle) == HAL_OK)
		#else
    	if(HAL_CAN_Start(((CANopenNodeSTM32 *)CANmodule->CANptr)->CANHandle) == HAL_OK)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f001 fe6e 	bl	8009bd8 <HAL_CAN_Start>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d102      	bne.n	8007f08 <CO_CANsetNormalMode+0x28>
		#endif
    	{
    		CANmodule->CANnormal = true;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	615a      	str	r2, [r3, #20]
    	}
    }
}
 8007f08:	bf00      	nop
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <CO_CANmodule_init>:
        CO_CANrx_t              rxArray[],
        uint16_t                rxSize,
        CO_CANtx_t              txArray[],
        uint16_t                txSize,
        uint16_t                CANbitRate)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b090      	sub	sp, #64	; 0x40
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
 8007f1c:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d005      	beq.n	8007f30 <CO_CANmodule_init+0x20>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <CO_CANmodule_init+0x20>
 8007f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d102      	bne.n	8007f36 <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007f30:	f04f 33ff 	mov.w	r3, #4294967295
 8007f34:	e0a1      	b.n	800807a <CO_CANmodule_init+0x16a>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	601a      	str	r2, [r3, #0]


    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 8007f3c:	4a51      	ldr	r2, [pc, #324]	; (8008084 <CO_CANmodule_init+0x174>)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6013      	str	r3, [r2, #0]


    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	887a      	ldrh	r2, [r7, #2]
 8007f4c:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f52:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007f5a:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false;             /* Do not use HW filters */
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2201      	movs	r2, #1
 8007f78:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	849a      	strh	r2, [r3, #36]	; 0x24
    CANmodule->errOld = 0U;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 8007f86:	2300      	movs	r3, #0
 8007f88:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007f8a:	e02b      	b.n	8007fe4 <CO_CANmodule_init+0xd4>
        rxArray[i].ident = 0U;
 8007f8c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8007f8e:	4613      	mov	r3, r2
 8007f90:	005b      	lsls	r3, r3, #1
 8007f92:	4413      	add	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	461a      	mov	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 8007fa0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	005b      	lsls	r3, r3, #1
 8007fa6:	4413      	add	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	461a      	mov	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fb4:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 8007fb6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8007fb8:	4613      	mov	r3, r2
 8007fba:	005b      	lsls	r3, r3, #1
 8007fbc:	4413      	add	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8007fca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8007fcc:	4613      	mov	r3, r2
 8007fce:	005b      	lsls	r3, r3, #1
 8007fd0:	4413      	add	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4413      	add	r3, r2
 8007fda:	2200      	movs	r2, #0
 8007fdc:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 8007fde:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007fe4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8007fe6:	887b      	ldrh	r3, [r7, #2]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d3cf      	bcc.n	8007f8c <CO_CANmodule_init+0x7c>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 8007fec:	2300      	movs	r3, #0
 8007fee:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007ff0:	e00c      	b.n	800800c <CO_CANmodule_init+0xfc>
        txArray[i].bufferFull = false;
 8007ff2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	005b      	lsls	r3, r3, #1
 8007ff8:	4413      	add	r3, r2
 8007ffa:	00db      	lsls	r3, r3, #3
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008000:	4413      	add	r3, r2
 8008002:	2200      	movs	r2, #0
 8008004:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 8008006:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008008:	3301      	adds	r3, #1
 800800a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800800c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800800e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008012:	429a      	cmp	r2, r3
 8008014:	d3ed      	bcc.n	8007ff2 <CO_CANmodule_init+0xe2>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32 *)CANptr)->HWInitFunction();
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	4798      	blx	r3
            FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
	CAN_FilterTypeDef FilterConfig;
	FilterConfig.FilterBank = 0;
 800801c:	2300      	movs	r3, #0
 800801e:	62bb      	str	r3, [r7, #40]	; 0x28
	FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8008020:	2300      	movs	r3, #0
 8008022:	62fb      	str	r3, [r7, #44]	; 0x2c
	FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8008024:	2301      	movs	r3, #1
 8008026:	633b      	str	r3, [r7, #48]	; 0x30
	FilterConfig.FilterIdHigh = 0x0;
 8008028:	2300      	movs	r3, #0
 800802a:	617b      	str	r3, [r7, #20]
	FilterConfig.FilterIdLow = 0x0;
 800802c:	2300      	movs	r3, #0
 800802e:	61bb      	str	r3, [r7, #24]
	FilterConfig.FilterMaskIdHigh = 0x0;
 8008030:	2300      	movs	r3, #0
 8008032:	61fb      	str	r3, [r7, #28]
	FilterConfig.FilterMaskIdLow = 0x0;
 8008034:	2300      	movs	r3, #0
 8008036:	623b      	str	r3, [r7, #32]
	FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8008038:	2300      	movs	r3, #0
 800803a:	627b      	str	r3, [r7, #36]	; 0x24
	FilterConfig.FilterActivation = ENABLE;
 800803c:	2301      	movs	r3, #1
 800803e:	637b      	str	r3, [r7, #52]	; 0x34
	FilterConfig.SlaveStartFilterBank = 0;
 8008040:	2300      	movs	r3, #0
 8008042:	63bb      	str	r3, [r7, #56]	; 0x38

	if (HAL_CAN_ConfigFilter(((CANopenNodeSTM32 *)CANptr)->CANHandle, &FilterConfig)
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f107 0214 	add.w	r2, r7, #20
 800804c:	4611      	mov	r1, r2
 800804e:	4618      	mov	r0, r3
 8008050:	f001 fcd6 	bl	8009a00 <HAL_CAN_ConfigFilter>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d002      	beq.n	8008060 <CO_CANmodule_init+0x150>
					!= HAL_OK) {
		return CO_ERROR_ILLEGAL_ARGUMENT;
 800805a:	f04f 33ff 	mov.w	r3, #4294967295
 800805e:	e00c      	b.n	800807a <CO_CANmodule_init+0x16a>
            | FDCAN_IT_ARB_PROTOCOL_ERROR | FDCAN_IT_DATA_PROTOCOL_ERROR
            | FDCAN_IT_ERROR_PASSIVE | FDCAN_IT_ERROR_WARNING, 0xFFFFFFFF) != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
	if (HAL_CAN_ActivateNotification(((CANopenNodeSTM32 *)CANptr)->CANHandle,
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	2113      	movs	r1, #19
 8008066:	4618      	mov	r0, r3
 8008068:	f002 f86a 	bl	800a140 <HAL_CAN_ActivateNotification>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d002      	beq.n	8008078 <CO_CANmodule_init+0x168>
	CAN_IT_RX_FIFO0_MSG_PENDING |
	CAN_IT_RX_FIFO1_MSG_PENDING |
	CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		return CO_ERROR_ILLEGAL_ARGUMENT;
 8008072:	f04f 33ff 	mov.w	r3, #4294967295
 8008076:	e000      	b.n	800807a <CO_CANmodule_init+0x16a>
	}
#endif

    return CO_ERROR_NO;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3740      	adds	r7, #64	; 0x40
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	200002b4 	.word	0x200002b4

08008088 <CO_CANmodule_disable>:

#endif /* defined(USE_OS) */

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t *CANmodule) {
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d009      	beq.n	80080aa <CO_CANmodule_disable+0x22>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d005      	beq.n	80080aa <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32 *)CANmodule->CANptr)->CANHandle);

#else
        HAL_CAN_Stop(((CANopenNodeSTM32 *)CANmodule->CANptr)->CANHandle);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f001 fddb 	bl	8009c60 <HAL_CAN_Stop>
#endif

    }
}
 80080aa:	bf00      	nop
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
	...

080080b4 <CO_CANrxBufferInit>:
        uint16_t                ident,
        uint16_t                mask,
        bool_t                  rtr,
        void                   *object,
        void                  (*CANrx_callback)(void *object, void *message))
{
 80080b4:	b480      	push	{r7}
 80080b6:	b087      	sub	sp, #28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	4608      	mov	r0, r1
 80080be:	4611      	mov	r1, r2
 80080c0:	461a      	mov	r2, r3
 80080c2:	4603      	mov	r3, r0
 80080c4:	817b      	strh	r3, [r7, #10]
 80080c6:	460b      	mov	r3, r1
 80080c8:	813b      	strh	r3, [r7, #8]
 80080ca:	4613      	mov	r3, r2
 80080cc:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80080ce:	2300      	movs	r3, #0
 80080d0:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d03a      	beq.n	800814e <CO_CANrxBufferInit+0x9a>
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d037      	beq.n	800814e <CO_CANrxBufferInit+0x9a>
            && CANrx_callback != NULL && index < CANmodule->rxSize) {
 80080de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d034      	beq.n	800814e <CO_CANrxBufferInit+0x9a>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	891b      	ldrh	r3, [r3, #8]
 80080e8:	897a      	ldrh	r2, [r7, #10]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d22f      	bcs.n	800814e <CO_CANrxBufferInit+0x9a>
        CO_CANrx_t *buffer = &CANmodule->rxArray[index];
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6859      	ldr	r1, [r3, #4]
 80080f2:	897a      	ldrh	r2, [r7, #10]
 80080f4:	4613      	mov	r3, r2
 80080f6:	005b      	lsls	r3, r3, #1
 80080f8:	4413      	add	r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	440b      	add	r3, r1
 80080fe:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008104:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800810a:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 800810c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008110:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008114:	b21b      	sxth	r3, r3
 8008116:	6a3a      	ldr	r2, [r7, #32]
 8008118:	2a00      	cmp	r2, #0
 800811a:	d001      	beq.n	8008120 <CO_CANrxBufferInit+0x6c>
 800811c:	4a12      	ldr	r2, [pc, #72]	; (8008168 <CO_CANrxBufferInit+0xb4>)
 800811e:	e000      	b.n	8008122 <CO_CANrxBufferInit+0x6e>
 8008120:	2200      	movs	r2, #0
 8008122:	4313      	orrs	r3, r2
 8008124:	b21b      	sxth	r3, r3
 8008126:	b29a      	uxth	r2, r3
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 800812c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008130:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008134:	b21a      	sxth	r2, r3
 8008136:	4b0c      	ldr	r3, [pc, #48]	; (8008168 <CO_CANrxBufferInit+0xb4>)
 8008138:	4313      	orrs	r3, r2
 800813a:	b21b      	sxth	r3, r3
 800813c:	b29a      	uxth	r2, r3
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d004      	beq.n	8008154 <CO_CANrxBufferInit+0xa0>
            __NOP();
 800814a:	bf00      	nop
            && CANrx_callback != NULL && index < CANmodule->rxSize) {
 800814c:	e002      	b.n	8008154 <CO_CANrxBufferInit+0xa0>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 800814e:	23ff      	movs	r3, #255	; 0xff
 8008150:	75fb      	strb	r3, [r7, #23]
 8008152:	e000      	b.n	8008156 <CO_CANrxBufferInit+0xa2>
            && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8008154:	bf00      	nop
    }

    return ret;
 8008156:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800815a:	4618      	mov	r0, r3
 800815c:	371c      	adds	r7, #28
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	ffff8000 	.word	0xffff8000

0800816c <CO_CANtxBufferInit>:
        uint16_t                index,
        uint16_t                ident,
        bool_t                  rtr,
        uint8_t                 noOfBytes,
        bool_t                  syncFlag)
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	607b      	str	r3, [r7, #4]
 8008176:	460b      	mov	r3, r1
 8008178:	817b      	strh	r3, [r7, #10]
 800817a:	4613      	mov	r3, r2
 800817c:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t *buffer = NULL;
 800817e:	2300      	movs	r3, #0
 8008180:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d024      	beq.n	80081d2 <CO_CANtxBufferInit+0x66>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	8a1b      	ldrh	r3, [r3, #16]
 800818c:	897a      	ldrh	r2, [r7, #10]
 800818e:	429a      	cmp	r2, r3
 8008190:	d21f      	bcs.n	80081d2 <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	68d9      	ldr	r1, [r3, #12]
 8008196:	897a      	ldrh	r2, [r7, #10]
 8008198:	4613      	mov	r3, r2
 800819a:	005b      	lsls	r3, r3, #1
 800819c:	4413      	add	r3, r2
 800819e:	00db      	lsls	r3, r3, #3
 80081a0:	440b      	add	r3, r1
 80081a2:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK)
 80081a4:	893b      	ldrh	r3, [r7, #8]
 80081a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                        | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	2a00      	cmp	r2, #0
 80081ae:	d002      	beq.n	80081b6 <CO_CANtxBufferInit+0x4a>
 80081b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80081b4:	e000      	b.n	80081b8 <CO_CANtxBufferInit+0x4c>
 80081b6:	2200      	movs	r2, #0
 80081b8:	431a      	orrs	r2, r3
        buffer->ident = ((uint32_t)ident & CANID_MASK)
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80081c4:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	2200      	movs	r2, #0
 80081ca:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d0:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 80081d2:	697b      	ldr	r3, [r7, #20]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	371c      	adds	r7, #28
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t *buffer) {
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 80081ea:	2300      	movs	r3, #0
 80081ec:	73fb      	strb	r3, [r7, #15]
        success = HAL_FDCAN_AddMessageToTxFifoQ(((CANopenNodeSTM32 *)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data) == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    	/* Check if TX FIFO is ready to accept more messages */
    	if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32 *)CANmodule->CANptr)->CANHandle) > 0) {
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f001 fe4c 	bl	8009e92 <HAL_CAN_GetTxMailboxesFreeLevel>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d028      	beq.n	8008252 <prv_send_can_message+0x72>
    		/*
    		 * RTR flag is part of identifier value
    		 * hence it needs to be properly decoded
    		 */
    		tx_hdr.ExtId = 0u;
 8008200:	4b16      	ldr	r3, [pc, #88]	; (800825c <prv_send_can_message+0x7c>)
 8008202:	2200      	movs	r2, #0
 8008204:	605a      	str	r2, [r3, #4]
    		tx_hdr.IDE = CAN_ID_STD;
 8008206:	4b15      	ldr	r3, [pc, #84]	; (800825c <prv_send_can_message+0x7c>)
 8008208:	2200      	movs	r2, #0
 800820a:	609a      	str	r2, [r3, #8]
    		tx_hdr.DLC = buffer->DLC;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	791b      	ldrb	r3, [r3, #4]
 8008210:	461a      	mov	r2, r3
 8008212:	4b12      	ldr	r3, [pc, #72]	; (800825c <prv_send_can_message+0x7c>)
 8008214:	611a      	str	r2, [r3, #16]
    		tx_hdr.StdId = buffer->ident & CANID_MASK;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800821e:	4a0f      	ldr	r2, [pc, #60]	; (800825c <prv_send_can_message+0x7c>)
 8008220:	6013      	str	r3, [r2, #0]
    		tx_hdr.RTR =
    				(buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	0b9b      	lsrs	r3, r3, #14
 8008228:	f003 0302 	and.w	r3, r3, #2
    		tx_hdr.RTR =
 800822c:	4a0b      	ldr	r2, [pc, #44]	; (800825c <prv_send_can_message+0x7c>)
 800822e:	60d3      	str	r3, [r2, #12]

    		uint32_t TxMailboxNum; // Transmission MailBox number

    		/* Now add message to FIFO. Should not fail */
    		success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32 *)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6898      	ldr	r0, [r3, #8]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	1d5a      	adds	r2, r3, #5
 800823a:	f107 0308 	add.w	r3, r7, #8
 800823e:	4907      	ldr	r1, [pc, #28]	; (800825c <prv_send_can_message+0x7c>)
 8008240:	f001 fd57 	bl	8009cf2 <HAL_CAN_AddTxMessage>
 8008244:	4603      	mov	r3, r0
    				&TxMailboxNum) == HAL_OK;
 8008246:	2b00      	cmp	r3, #0
 8008248:	bf0c      	ite	eq
 800824a:	2301      	moveq	r3, #1
 800824c:	2300      	movne	r3, #0
 800824e:	b2db      	uxtb	r3, r3
    		success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32 *)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8008250:	73fb      	strb	r3, [r7, #15]
    	}
#endif
    return success;
 8008252:	7bfb      	ldrb	r3, [r7, #15]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	200002b8 	.word	0x200002b8

08008260 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t *CANmodule, CO_CANtx_t *buffer) {
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 800826a:	2300      	movs	r3, #0
 800826c:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00c      	beq.n	8008290 <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage){
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d106      	bne.n	800828c <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	8a5b      	ldrh	r3, [r3, #18]
 8008282:	f043 0308 	orr.w	r3, r3, #8
 8008286:	b29a      	uxth	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 800828c:	23f7      	movs	r3, #247	; 0xf7
 800828e:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008290:	f3ef 8310 	mrs	r3, PRIMASK
 8008294:	613b      	str	r3, [r7, #16]
  return(result);
 8008296:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 800829c:	b672      	cpsid	i
}
 800829e:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f7ff ff9c 	bl	80081e0 <prv_send_can_message>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d004      	beq.n	80082b8 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	695a      	ldr	r2, [r3, #20]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	61da      	str	r2, [r3, #28]
 80082b6:	e009      	b.n	80082cc <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	2201      	movs	r2, #1
 80082bc:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	3301      	adds	r3, #1
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f383 8810 	msr	PRIMASK, r3
}
 80082d8:	bf00      	nop

    return err;
 80082da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3718      	adds	r7, #24
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <CO_CANclearPendingSyncPDOs>:


/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t *CANmodule) {
 80082e6:	b480      	push	{r7}
 80082e8:	b087      	sub	sp, #28
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 80082ee:	2300      	movs	r3, #0
 80082f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082f2:	f3ef 8310 	mrs	r3, PRIMASK
 80082f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80082f8:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 80082fe:	b672      	cpsid	i
}
 8008300:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if(/*messageIsOnCanBuffer && */CANmodule->bufferInhibitFlag){
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d004      	beq.n	8008314 <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8008310:	2301      	movs	r3, #1
 8008312:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008318:	b29b      	uxth	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d032      	beq.n	8008384 <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i){
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	8a1b      	ldrh	r3, [r3, #16]
 8008322:	827b      	strh	r3, [r7, #18]
 8008324:	e02b      	b.n	800837e <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull){
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68d9      	ldr	r1, [r3, #12]
 800832a:	8a7a      	ldrh	r2, [r7, #18]
 800832c:	4613      	mov	r3, r2
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	4413      	add	r3, r2
 8008332:	00db      	lsls	r3, r3, #3
 8008334:	440b      	add	r3, r1
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d01d      	beq.n	8008378 <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag){
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68d9      	ldr	r1, [r3, #12]
 8008340:	8a7a      	ldrh	r2, [r7, #18]
 8008342:	4613      	mov	r3, r2
 8008344:	005b      	lsls	r3, r3, #1
 8008346:	4413      	add	r3, r2
 8008348:	00db      	lsls	r3, r3, #3
 800834a:	440b      	add	r3, r1
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d012      	beq.n	8008378 <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68d9      	ldr	r1, [r3, #12]
 8008356:	8a7a      	ldrh	r2, [r7, #18]
 8008358:	4613      	mov	r3, r2
 800835a:	005b      	lsls	r3, r3, #1
 800835c:	4413      	add	r3, r2
 800835e:	00db      	lsls	r3, r3, #3
 8008360:	440b      	add	r3, r1
 8008362:	2200      	movs	r2, #0
 8008364:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800836a:	b29b      	uxth	r3, r3
 800836c:	3b01      	subs	r3, #1
 800836e:	b29a      	uxth	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	849a      	strh	r2, [r3, #36]	; 0x24
                    tpdoDeleted = 2U;
 8008374:	2302      	movs	r3, #2
 8008376:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i){
 8008378:	8a7b      	ldrh	r3, [r7, #18]
 800837a:	3b01      	subs	r3, #1
 800837c:	827b      	strh	r3, [r7, #18]
 800837e:	8a7b      	ldrh	r3, [r7, #18]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1d0      	bne.n	8008326 <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008388:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f383 8810 	msr	PRIMASK, r3
}
 8008390:	bf00      	nop
    if (tpdoDeleted) {
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d006      	beq.n	80083a6 <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	8a5b      	ldrh	r3, [r3, #18]
 800839c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	825a      	strh	r2, [r3, #18]
    }
}
 80083a6:	bf00      	nop
 80083a8:	371c      	adds	r7, #28
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t *CANmodule) {
 80083b2:	b480      	push	{r7}
 80083b4:	b083      	sub	sp, #12
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
#else



#endif
}
 80083ba:	bf00      	nop
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
	...

080083c8 <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void prv_read_can_received_msg(CAN_HandleTypeDef *hcan,
		uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b08c      	sub	sp, #48	; 0x30
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t *buffer = NULL;              /* receive message buffer from CO_CANmodule_t object. */
 80083d4:	2300      	movs	r3, #0
 80083d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t index;                         /* index of received message */
    uint32_t rcvMsgIdent;                   /* identifier of the received message */
    uint8_t messageFound = 0;
 80083d8:	2300      	movs	r3, #0
 80083da:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    }
    rcvMsgIdent = rcvMsg.ident;
#else
    static CAN_RxHeaderTypeDef rx_hdr;
	/* Read received message from FIFO */
	if (HAL_CAN_GetRxMessage(hcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 80083de:	f107 0314 	add.w	r3, r7, #20
 80083e2:	3305      	adds	r3, #5
 80083e4:	4a2c      	ldr	r2, [pc, #176]	; (8008498 <prv_read_can_received_msg+0xd0>)
 80083e6:	68b9      	ldr	r1, [r7, #8]
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f001 fd87 	bl	8009efc <HAL_CAN_GetRxMessage>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d14c      	bne.n	800848e <prv_read_can_received_msg+0xc6>
		return;
	}
	 /* Setup identifier (with RTR) and length */
	rcvMsg.ident = rx_hdr.StdId | (rx_hdr.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 80083f4:	4b28      	ldr	r3, [pc, #160]	; (8008498 <prv_read_can_received_msg+0xd0>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a27      	ldr	r2, [pc, #156]	; (8008498 <prv_read_can_received_msg+0xd0>)
 80083fa:	68d2      	ldr	r2, [r2, #12]
 80083fc:	2a02      	cmp	r2, #2
 80083fe:	d102      	bne.n	8008406 <prv_read_can_received_msg+0x3e>
 8008400:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008404:	e000      	b.n	8008408 <prv_read_can_received_msg+0x40>
 8008406:	2200      	movs	r2, #0
 8008408:	4313      	orrs	r3, r2
 800840a:	617b      	str	r3, [r7, #20]
	rcvMsg.dlc = rx_hdr.DLC;
 800840c:	4b22      	ldr	r3, [pc, #136]	; (8008498 <prv_read_can_received_msg+0xd0>)
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	b2db      	uxtb	r3, r3
 8008412:	763b      	strb	r3, [r7, #24]
	rcvMsgIdent = rcvMsg.ident;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 8008418:	4b20      	ldr	r3, [pc, #128]	; (800849c <prv_read_can_received_msg+0xd4>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d001      	beq.n	8008426 <prv_read_can_received_msg+0x5e>
    	__BKPT(0);
 8008422:	be00      	bkpt	0x0000
 8008424:	e01f      	b.n	8008466 <prv_read_can_received_msg+0x9e>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 8008426:	4b1d      	ldr	r3, [pc, #116]	; (800849c <prv_read_can_received_msg+0xd4>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 800842e:	4b1b      	ldr	r3, [pc, #108]	; (800849c <prv_read_can_received_msg+0xd4>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	891b      	ldrh	r3, [r3, #8]
 8008434:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008436:	e013      	b.n	8008460 <prv_read_can_received_msg+0x98>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8008438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843a:	881b      	ldrh	r3, [r3, #0]
 800843c:	461a      	mov	r2, r3
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	4053      	eors	r3, r2
 8008442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008444:	8852      	ldrh	r2, [r2, #2]
 8008446:	4013      	ands	r3, r2
 8008448:	2b00      	cmp	r3, #0
 800844a:	d103      	bne.n	8008454 <prv_read_can_received_msg+0x8c>
                messageFound = 1;
 800844c:	2301      	movs	r3, #1
 800844e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                break;
 8008452:	e008      	b.n	8008466 <prv_read_can_received_msg+0x9e>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8008454:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008456:	3b01      	subs	r3, #1
 8008458:	857b      	strh	r3, [r7, #42]	; 0x2a
 800845a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845c:	330c      	adds	r3, #12
 800845e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008460:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1e8      	bne.n	8008438 <prv_read_can_received_msg+0x70>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 8008466:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800846a:	2b00      	cmp	r3, #0
 800846c:	d010      	beq.n	8008490 <prv_read_can_received_msg+0xc8>
 800846e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00d      	beq.n	8008490 <prv_read_can_received_msg+0xc8>
 8008474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d009      	beq.n	8008490 <prv_read_can_received_msg+0xc8>
        buffer->CANrx_callback(buffer->object, (void*) &rcvMsg);
 800847c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008482:	6852      	ldr	r2, [r2, #4]
 8008484:	f107 0114 	add.w	r1, r7, #20
 8008488:	4610      	mov	r0, r2
 800848a:	4798      	blx	r3
 800848c:	e000      	b.n	8008490 <prv_read_can_received_msg+0xc8>
		return;
 800848e:	bf00      	nop
    }
}
 8008490:	3730      	adds	r7, #48	; 0x30
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	200002d0 	.word	0x200002d0
 800849c:	200002b4 	.word	0x200002b4

080084a0 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \brief           Rx FIFO 0 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
	prv_read_can_received_msg(hcan, CAN_RX_FIFO0,0);
 80084a8:	2200      	movs	r2, #0
 80084aa:	2100      	movs	r1, #0
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f7ff ff8b 	bl	80083c8 <prv_read_can_received_msg>
}
 80084b2:	bf00      	nop
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <HAL_CAN_RxFifo1MsgPendingCallback>:
 * \brief           Rx FIFO 1 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b082      	sub	sp, #8
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
	prv_read_can_received_msg(hcan, CAN_RX_FIFO1,0);
 80084c2:	2200      	movs	r2, #0
 80084c4:	2101      	movs	r1, #1
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7ff ff7e 	bl	80083c8 <prv_read_can_received_msg>
}
 80084cc:	bf00      	nop
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <CO_CANinterrupt_TX>:
 * \brief           TX buffer has been well transmitted callback
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 * \param[in]       MailboxNumber: the mailbox number that has been transmitted
 */
void CO_CANinterrupt_TX(CO_CANmodule_t *CANmodule, uint32_t MailboxNumber) {
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]

	CANModule_local->firstCANtxMessage = false; /* First CAN message (bootup) was sent successfully */
 80084de:	4b2c      	ldr	r3, [pc, #176]	; (8008590 <CO_CANinterrupt_TX+0xbc>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2200      	movs	r2, #0
 80084e4:	621a      	str	r2, [r3, #32]
	CANModule_local->bufferInhibitFlag = false; /* Clear flag from previous message */
 80084e6:	4b2a      	ldr	r3, [pc, #168]	; (8008590 <CO_CANinterrupt_TX+0xbc>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2200      	movs	r2, #0
 80084ec:	61da      	str	r2, [r3, #28]
	if (CANModule_local->CANtxCount > 0U) { /* Are there any new messages waiting to be send */
 80084ee:	4b28      	ldr	r3, [pc, #160]	; (8008590 <CO_CANinterrupt_TX+0xbc>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d045      	beq.n	8008586 <CO_CANinterrupt_TX+0xb2>
		CO_CANtx_t *buffer = &CANModule_local->txArray[0]; /* Start with first buffer handle */
 80084fa:	4b25      	ldr	r3, [pc, #148]	; (8008590 <CO_CANinterrupt_TX+0xbc>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	617b      	str	r3, [r7, #20]
		 * This function is always called from interrupt,
		 * however to make sure no preemption can happen, interrupts are anyway locked
		 * (unless you can guarantee no higher priority interrupt will try to access to CAN instance and send data,
		 *  then no need to lock interrupts..)
		 */
		CO_LOCK_CAN_SEND(CANModule_local);
 8008502:	4b23      	ldr	r3, [pc, #140]	; (8008590 <CO_CANinterrupt_TX+0xbc>)
 8008504:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008506:	f3ef 8210 	mrs	r2, PRIMASK
 800850a:	60fa      	str	r2, [r7, #12]
  return(result);
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8008510:	b672      	cpsid	i
}
 8008512:	bf00      	nop
		for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 8008514:	4b1e      	ldr	r3, [pc, #120]	; (8008590 <CO_CANinterrupt_TX+0xbc>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	8a1b      	ldrh	r3, [r3, #16]
 800851a:	827b      	strh	r3, [r7, #18]
 800851c:	e021      	b.n	8008562 <CO_CANinterrupt_TX+0x8e>
			/* Try to send message */
			if (buffer->bufferFull) {
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d017      	beq.n	8008556 <CO_CANinterrupt_TX+0x82>
				if (prv_send_can_message(CANModule_local, buffer)) {
 8008526:	4b1a      	ldr	r3, [pc, #104]	; (8008590 <CO_CANinterrupt_TX+0xbc>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	6979      	ldr	r1, [r7, #20]
 800852c:	4618      	mov	r0, r3
 800852e:	f7ff fe57 	bl	80081e0 <prv_send_can_message>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00e      	beq.n	8008556 <CO_CANinterrupt_TX+0x82>
					buffer->bufferFull = false;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	2200      	movs	r2, #0
 800853c:	611a      	str	r2, [r3, #16]
					CANModule_local->CANtxCount--;
 800853e:	4b14      	ldr	r3, [pc, #80]	; (8008590 <CO_CANinterrupt_TX+0xbc>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8008544:	b292      	uxth	r2, r2
 8008546:	3a01      	subs	r2, #1
 8008548:	b292      	uxth	r2, r2
 800854a:	849a      	strh	r2, [r3, #36]	; 0x24
					CANModule_local->bufferInhibitFlag = buffer->syncFlag;
 800854c:	4b10      	ldr	r3, [pc, #64]	; (8008590 <CO_CANinterrupt_TX+0xbc>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	6952      	ldr	r2, [r2, #20]
 8008554:	61da      	str	r2, [r3, #28]
		for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 8008556:	8a7b      	ldrh	r3, [r7, #18]
 8008558:	3b01      	subs	r3, #1
 800855a:	827b      	strh	r3, [r7, #18]
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	3318      	adds	r3, #24
 8008560:	617b      	str	r3, [r7, #20]
 8008562:	8a7b      	ldrh	r3, [r7, #18]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1da      	bne.n	800851e <CO_CANinterrupt_TX+0x4a>
				}
			}
		}
		/* Clear counter if no more messages */
		if (i == 0U) {
 8008568:	8a7b      	ldrh	r3, [r7, #18]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d103      	bne.n	8008576 <CO_CANinterrupt_TX+0xa2>
			CANModule_local->CANtxCount = 0U;
 800856e:	4b08      	ldr	r3, [pc, #32]	; (8008590 <CO_CANinterrupt_TX+0xbc>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2200      	movs	r2, #0
 8008574:	849a      	strh	r2, [r3, #36]	; 0x24
		}
		CO_UNLOCK_CAN_SEND(CANModule_local);
 8008576:	4b06      	ldr	r3, [pc, #24]	; (8008590 <CO_CANinterrupt_TX+0xbc>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	f383 8810 	msr	PRIMASK, r3
}
 8008584:	bf00      	nop
	}

}
 8008586:	bf00      	nop
 8008588:	3718      	adds	r7, #24
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	200002b4 	.word	0x200002b4

08008594 <HAL_CAN_TxMailbox0CompleteCallback>:



void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
	CO_CANinterrupt_TX(hcan,CAN_TX_MAILBOX0);
 800859c:	2101      	movs	r1, #1
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7ff ff98 	bl	80084d4 <CO_CANinterrupt_TX>
}
 80085a4:	bf00      	nop
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
	CO_CANinterrupt_TX(hcan,CAN_TX_MAILBOX0);
 80085b4:	2101      	movs	r1, #1
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7ff ff8c 	bl	80084d4 <CO_CANinterrupt_TX>
}
 80085bc:	bf00      	nop
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
	CO_CANinterrupt_TX(hcan,CAN_TX_MAILBOX0);
 80085cc:	2101      	movs	r1, #1
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7ff ff80 	bl	80084d4 <CO_CANinterrupt_TX>
}
 80085d4:	bf00      	nop
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <write_SDO>:
}

CO_SDO_abortCode_t write_SDO(CO_SDOclient_t *SDO_C, uint8_t nodeId,
                             uint16_t index, uint8_t subIndex,
                             uint8_t *data, size_t dataSize)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b08c      	sub	sp, #48	; 0x30
 80085e0:	af04      	add	r7, sp, #16
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	4608      	mov	r0, r1
 80085e6:	4611      	mov	r1, r2
 80085e8:	461a      	mov	r2, r3
 80085ea:	4603      	mov	r3, r0
 80085ec:	70fb      	strb	r3, [r7, #3]
 80085ee:	460b      	mov	r3, r1
 80085f0:	803b      	strh	r3, [r7, #0]
 80085f2:	4613      	mov	r3, r2
 80085f4:	70bb      	strb	r3, [r7, #2]
    CO_SDO_return_t SDO_ret;
    bool_t bufferPartial = false;
 80085f6:	2300      	movs	r3, #0
 80085f8:	61fb      	str	r3, [r7, #28]

    // setup client (this can be skipped, if remote device is the same)
    SDO_ret = CO_SDOclient_setup(SDO_C,
                                 CO_CAN_ID_SDO_CLI + nodeId,
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
    SDO_ret = CO_SDOclient_setup(SDO_C,
 8008600:	4619      	mov	r1, r3
                                 CO_CAN_ID_SDO_SRV + nodeId,
 8008602:	78fb      	ldrb	r3, [r7, #3]
 8008604:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
    SDO_ret = CO_SDOclient_setup(SDO_C,
 8008608:	461a      	mov	r2, r3
 800860a:	78fb      	ldrb	r3, [r7, #3]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7fb f981 	bl	8003914 <CO_SDOclient_setup>
 8008612:	4603      	mov	r3, r0
 8008614:	76fb      	strb	r3, [r7, #27]
                                 nodeId);
    if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
 8008616:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d002      	beq.n	8008624 <write_SDO+0x48>
        return -1;
 800861e:	f04f 33ff 	mov.w	r3, #4294967295
 8008622:	e041      	b.n	80086a8 <write_SDO+0xcc>
    }

    // initiate download
    SDO_ret = CO_SDOclientDownloadInitiate(SDO_C, index, subIndex,
 8008624:	78ba      	ldrb	r2, [r7, #2]
 8008626:	8839      	ldrh	r1, [r7, #0]
 8008628:	2300      	movs	r3, #0
 800862a:	9301      	str	r3, [sp, #4]
 800862c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7fb f9e1 	bl	80039fc <CO_SDOclientDownloadInitiate>
 800863a:	4603      	mov	r3, r0
 800863c:	76fb      	strb	r3, [r7, #27]
                                           dataSize, 1000, false);
    if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
 800863e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d002      	beq.n	800864c <write_SDO+0x70>
        return -1;
 8008646:	f04f 33ff 	mov.w	r3, #4294967295
 800864a:	e02d      	b.n	80086a8 <write_SDO+0xcc>
    }

    // fill data
    size_t nWritten = CO_SDOclientDownloadBufWrite(SDO_C, data, dataSize);
 800864c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800864e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f7fb fa10 	bl	8003a76 <CO_SDOclientDownloadBufWrite>
 8008656:	6178      	str	r0, [r7, #20]
    if (nWritten < dataSize) {
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865c:	429a      	cmp	r2, r3
 800865e:	d201      	bcs.n	8008664 <write_SDO+0x88>
        bufferPartial = true;
 8008660:	2301      	movs	r3, #1
 8008662:	61fb      	str	r3, [r7, #28]
        // If SDO Fifo buffer is too small, data can be refilled in the loop.
    }

    //download data
    do {
        uint32_t timeDifference_us = 10000;
 8008664:	f242 7310 	movw	r3, #10000	; 0x2710
 8008668:	613b      	str	r3, [r7, #16]
        CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 800866a:	2300      	movs	r3, #0
 800866c:	60fb      	str	r3, [r7, #12]

        SDO_ret = CO_SDOclientDownload(SDO_C,
 800866e:	2300      	movs	r3, #0
 8008670:	9302      	str	r3, [sp, #8]
 8008672:	2300      	movs	r3, #0
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	f107 030c 	add.w	r3, r7, #12
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	2200      	movs	r2, #0
 8008680:	6939      	ldr	r1, [r7, #16]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7fb fa14 	bl	8003ab0 <CO_SDOclientDownload>
 8008688:	4603      	mov	r3, r0
 800868a:	76fb      	strb	r3, [r7, #27]
                                       timeDifference_us,
                                       false,
                                       bufferPartial,
                                       &abortCode,
                                       NULL, NULL);
        if (SDO_ret < 0) {
 800868c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008690:	2b00      	cmp	r3, #0
 8008692:	da01      	bge.n	8008698 <write_SDO+0xbc>
            return abortCode;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	e007      	b.n	80086a8 <write_SDO+0xcc>
        }


        HAL_Delay(1);
 8008698:	2001      	movs	r0, #1
 800869a:	f001 f891 	bl	80097c0 <HAL_Delay>
    } while(SDO_ret > 0);
 800869e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	dcde      	bgt.n	8008664 <write_SDO+0x88>


    return CO_SDO_AB_NONE;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3720      	adds	r7, #32
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08e      	sub	sp, #56	; 0x38
 80086b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80086b6:	f001 f826 	bl	8009706 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80086ba:	f000 fd5f 	bl	800917c <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80086be:	f000 fc41 	bl	8008f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80086c2:	f000 fd2b 	bl	800911c <MX_GPIO_Init>
  MX_CAN1_Init();
 80086c6:	f000 fc99 	bl	8008ffc <MX_CAN1_Init>
  MX_CAN2_Init();
 80086ca:	f000 fccd 	bl	8009068 <MX_CAN2_Init>
  MX_TIM14_Init();
 80086ce:	f000 fd01 	bl	80090d4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  CANopenNodeSTM32 canopenNodeSTM32;
      canopenNodeSTM32.CANHandle = &hcan2;
 80086d2:	4bc9      	ldr	r3, [pc, #804]	; (80089f8 <main+0x348>)
 80086d4:	61fb      	str	r3, [r7, #28]
      canopenNodeSTM32.HWInitFunction = MX_CAN2_Init;
 80086d6:	4bc9      	ldr	r3, [pc, #804]	; (80089fc <main+0x34c>)
 80086d8:	623b      	str	r3, [r7, #32]
      canopenNodeSTM32.timerHandle = &htim14;
 80086da:	4bc9      	ldr	r3, [pc, #804]	; (8008a00 <main+0x350>)
 80086dc:	61bb      	str	r3, [r7, #24]
      canopenNodeSTM32.desiredNodeID = 7;
 80086de:	2307      	movs	r3, #7
 80086e0:	753b      	strb	r3, [r7, #20]
      canopenNodeSTM32.baudrate = 1000;
 80086e2:	23e8      	movs	r3, #232	; 0xe8
 80086e4:	75bb      	strb	r3, [r7, #22]
      canopen_app_init(&canopenNodeSTM32);
 80086e6:	f107 0314 	add.w	r3, r7, #20
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7ff f9f0 	bl	8007ad0 <canopen_app_init>



      uint16_t tmp1 = 0x80;
 80086f0:	2380      	movs	r3, #128	; 0x80
 80086f2:	827b      	strh	r3, [r7, #18]
      uint16_t tmp2 = 0x00;
 80086f4:	2300      	movs	r3, #0
 80086f6:	823b      	strh	r3, [r7, #16]
      uint16_t tmp3 = 0x06;
 80086f8:	2306      	movs	r3, #6
 80086fa:	81fb      	strh	r3, [r7, #14]
      uint16_t tmp4 = 0x07;
 80086fc:	2307      	movs	r3, #7
 80086fe:	81bb      	strh	r3, [r7, #12]
      uint16_t tmp5 = 0x0F;
 8008700:	230f      	movs	r3, #15
 8008702:	817b      	strh	r3, [r7, #10]
      uint16_t tmp6 = 0x1F;
 8008704:	231f      	movs	r3, #31
 8008706:	813b      	strh	r3, [r7, #8]

      int8_t homing_mode = 0x06;
 8008708:	2306      	movs	r3, #6
 800870a:	71fb      	strb	r3, [r7, #7]
      int32_t homeoffset6;


  //control_word for node 1...............................................................

      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 1, 0x6040, 00, &tmp1, 2);
 800870c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008710:	2302      	movs	r3, #2
 8008712:	9301      	str	r3, [sp, #4]
 8008714:	f107 0312 	add.w	r3, r7, #18
 8008718:	9300      	str	r3, [sp, #0]
 800871a:	2300      	movs	r3, #0
 800871c:	f246 0240 	movw	r2, #24640	; 0x6040
 8008720:	2101      	movs	r1, #1
 8008722:	f7ff ff5b 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008726:	200a      	movs	r0, #10
 8008728:	f001 f84a 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 1, 0x6040, 00, &tmp2, 2);
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008730:	2302      	movs	r3, #2
 8008732:	9301      	str	r3, [sp, #4]
 8008734:	f107 0310 	add.w	r3, r7, #16
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	2300      	movs	r3, #0
 800873c:	f246 0240 	movw	r2, #24640	; 0x6040
 8008740:	2101      	movs	r1, #1
 8008742:	f7ff ff4b 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008746:	200a      	movs	r0, #10
 8008748:	f001 f83a 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 1, 0x6040, 00, &tmp3, 2);
 800874c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008750:	2302      	movs	r3, #2
 8008752:	9301      	str	r3, [sp, #4]
 8008754:	f107 030e 	add.w	r3, r7, #14
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	2300      	movs	r3, #0
 800875c:	f246 0240 	movw	r2, #24640	; 0x6040
 8008760:	2101      	movs	r1, #1
 8008762:	f7ff ff3b 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008766:	200a      	movs	r0, #10
 8008768:	f001 f82a 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 1, 0x6040, 00, &tmp4, 2);
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008770:	2302      	movs	r3, #2
 8008772:	9301      	str	r3, [sp, #4]
 8008774:	f107 030c 	add.w	r3, r7, #12
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	2300      	movs	r3, #0
 800877c:	f246 0240 	movw	r2, #24640	; 0x6040
 8008780:	2101      	movs	r1, #1
 8008782:	f7ff ff2b 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008786:	200a      	movs	r0, #10
 8008788:	f001 f81a 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 1, 0x6040, 00, &tmp5, 2);
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008790:	2302      	movs	r3, #2
 8008792:	9301      	str	r3, [sp, #4]
 8008794:	f107 030a 	add.w	r3, r7, #10
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	2300      	movs	r3, #0
 800879c:	f246 0240 	movw	r2, #24640	; 0x6040
 80087a0:	2101      	movs	r1, #1
 80087a2:	f7ff ff1b 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 80087a6:	200a      	movs	r0, #10
 80087a8:	f001 f80a 	bl	80097c0 <HAL_Delay>


      //control_word for node 2...............................................................


      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 2, 0x6040, 00, &tmp1, 2);
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80087b0:	2302      	movs	r3, #2
 80087b2:	9301      	str	r3, [sp, #4]
 80087b4:	f107 0312 	add.w	r3, r7, #18
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	2300      	movs	r3, #0
 80087bc:	f246 0240 	movw	r2, #24640	; 0x6040
 80087c0:	2102      	movs	r1, #2
 80087c2:	f7ff ff0b 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 80087c6:	200a      	movs	r0, #10
 80087c8:	f000 fffa 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 2, 0x6040, 00, &tmp2, 2);
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80087d0:	2302      	movs	r3, #2
 80087d2:	9301      	str	r3, [sp, #4]
 80087d4:	f107 0310 	add.w	r3, r7, #16
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	2300      	movs	r3, #0
 80087dc:	f246 0240 	movw	r2, #24640	; 0x6040
 80087e0:	2102      	movs	r1, #2
 80087e2:	f7ff fefb 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 80087e6:	200a      	movs	r0, #10
 80087e8:	f000 ffea 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 2, 0x6040, 00, &tmp3, 2);
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80087f0:	2302      	movs	r3, #2
 80087f2:	9301      	str	r3, [sp, #4]
 80087f4:	f107 030e 	add.w	r3, r7, #14
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	2300      	movs	r3, #0
 80087fc:	f246 0240 	movw	r2, #24640	; 0x6040
 8008800:	2102      	movs	r1, #2
 8008802:	f7ff feeb 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008806:	200a      	movs	r0, #10
 8008808:	f000 ffda 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 2, 0x6040, 00, &tmp4, 2);
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008810:	2302      	movs	r3, #2
 8008812:	9301      	str	r3, [sp, #4]
 8008814:	f107 030c 	add.w	r3, r7, #12
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	2300      	movs	r3, #0
 800881c:	f246 0240 	movw	r2, #24640	; 0x6040
 8008820:	2102      	movs	r1, #2
 8008822:	f7ff fedb 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008826:	200a      	movs	r0, #10
 8008828:	f000 ffca 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 2, 0x6040, 00, &tmp5, 2);
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008830:	2302      	movs	r3, #2
 8008832:	9301      	str	r3, [sp, #4]
 8008834:	f107 030a 	add.w	r3, r7, #10
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	2300      	movs	r3, #0
 800883c:	f246 0240 	movw	r2, #24640	; 0x6040
 8008840:	2102      	movs	r1, #2
 8008842:	f7ff fecb 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008846:	200a      	movs	r0, #10
 8008848:	f000 ffba 	bl	80097c0 <HAL_Delay>


  //control_word for node 3...............................................................


      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 3, 0x6040, 00, &tmp1, 2);
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008850:	2302      	movs	r3, #2
 8008852:	9301      	str	r3, [sp, #4]
 8008854:	f107 0312 	add.w	r3, r7, #18
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	2300      	movs	r3, #0
 800885c:	f246 0240 	movw	r2, #24640	; 0x6040
 8008860:	2103      	movs	r1, #3
 8008862:	f7ff febb 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008866:	200a      	movs	r0, #10
 8008868:	f000 ffaa 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 3, 0x6040, 00, &tmp2, 2);
 800886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008870:	2302      	movs	r3, #2
 8008872:	9301      	str	r3, [sp, #4]
 8008874:	f107 0310 	add.w	r3, r7, #16
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	2300      	movs	r3, #0
 800887c:	f246 0240 	movw	r2, #24640	; 0x6040
 8008880:	2103      	movs	r1, #3
 8008882:	f7ff feab 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008886:	200a      	movs	r0, #10
 8008888:	f000 ff9a 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 3, 0x6040, 00, &tmp3, 2);
 800888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008890:	2302      	movs	r3, #2
 8008892:	9301      	str	r3, [sp, #4]
 8008894:	f107 030e 	add.w	r3, r7, #14
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	2300      	movs	r3, #0
 800889c:	f246 0240 	movw	r2, #24640	; 0x6040
 80088a0:	2103      	movs	r1, #3
 80088a2:	f7ff fe9b 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 80088a6:	200a      	movs	r0, #10
 80088a8:	f000 ff8a 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 3, 0x6040, 00, &tmp4, 2);
 80088ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80088b0:	2302      	movs	r3, #2
 80088b2:	9301      	str	r3, [sp, #4]
 80088b4:	f107 030c 	add.w	r3, r7, #12
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	2300      	movs	r3, #0
 80088bc:	f246 0240 	movw	r2, #24640	; 0x6040
 80088c0:	2103      	movs	r1, #3
 80088c2:	f7ff fe8b 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 80088c6:	200a      	movs	r0, #10
 80088c8:	f000 ff7a 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 3, 0x6040, 00, &tmp5, 2);
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80088d0:	2302      	movs	r3, #2
 80088d2:	9301      	str	r3, [sp, #4]
 80088d4:	f107 030a 	add.w	r3, r7, #10
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	2300      	movs	r3, #0
 80088dc:	f246 0240 	movw	r2, #24640	; 0x6040
 80088e0:	2103      	movs	r1, #3
 80088e2:	f7ff fe7b 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 80088e6:	200a      	movs	r0, #10
 80088e8:	f000 ff6a 	bl	80097c0 <HAL_Delay>


 //control_word for node 4...............................................................


      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 4, 0x6040, 00, &tmp1, 2);
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80088f0:	2302      	movs	r3, #2
 80088f2:	9301      	str	r3, [sp, #4]
 80088f4:	f107 0312 	add.w	r3, r7, #18
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	2300      	movs	r3, #0
 80088fc:	f246 0240 	movw	r2, #24640	; 0x6040
 8008900:	2104      	movs	r1, #4
 8008902:	f7ff fe6b 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008906:	200a      	movs	r0, #10
 8008908:	f000 ff5a 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 4, 0x6040, 00, &tmp2, 2);
 800890c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008910:	2302      	movs	r3, #2
 8008912:	9301      	str	r3, [sp, #4]
 8008914:	f107 0310 	add.w	r3, r7, #16
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	2300      	movs	r3, #0
 800891c:	f246 0240 	movw	r2, #24640	; 0x6040
 8008920:	2104      	movs	r1, #4
 8008922:	f7ff fe5b 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008926:	200a      	movs	r0, #10
 8008928:	f000 ff4a 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 4, 0x6040, 00, &tmp3, 2);
 800892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008930:	2302      	movs	r3, #2
 8008932:	9301      	str	r3, [sp, #4]
 8008934:	f107 030e 	add.w	r3, r7, #14
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	2300      	movs	r3, #0
 800893c:	f246 0240 	movw	r2, #24640	; 0x6040
 8008940:	2104      	movs	r1, #4
 8008942:	f7ff fe4b 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008946:	200a      	movs	r0, #10
 8008948:	f000 ff3a 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 4, 0x6040, 00, &tmp4, 2);
 800894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008950:	2302      	movs	r3, #2
 8008952:	9301      	str	r3, [sp, #4]
 8008954:	f107 030c 	add.w	r3, r7, #12
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	2300      	movs	r3, #0
 800895c:	f246 0240 	movw	r2, #24640	; 0x6040
 8008960:	2104      	movs	r1, #4
 8008962:	f7ff fe3b 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008966:	200a      	movs	r0, #10
 8008968:	f000 ff2a 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 4, 0x6040, 00, &tmp5, 2);
 800896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008970:	2302      	movs	r3, #2
 8008972:	9301      	str	r3, [sp, #4]
 8008974:	f107 030a 	add.w	r3, r7, #10
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	2300      	movs	r3, #0
 800897c:	f246 0240 	movw	r2, #24640	; 0x6040
 8008980:	2104      	movs	r1, #4
 8008982:	f7ff fe2b 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008986:	200a      	movs	r0, #10
 8008988:	f000 ff1a 	bl	80097c0 <HAL_Delay>


  //control_word for node 5...............................................................


      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 5, 0x6040, 00, &tmp1, 2);
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008990:	2302      	movs	r3, #2
 8008992:	9301      	str	r3, [sp, #4]
 8008994:	f107 0312 	add.w	r3, r7, #18
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	2300      	movs	r3, #0
 800899c:	f246 0240 	movw	r2, #24640	; 0x6040
 80089a0:	2105      	movs	r1, #5
 80089a2:	f7ff fe1b 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 80089a6:	200a      	movs	r0, #10
 80089a8:	f000 ff0a 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 5, 0x6040, 00, &tmp2, 2);
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80089b0:	2302      	movs	r3, #2
 80089b2:	9301      	str	r3, [sp, #4]
 80089b4:	f107 0310 	add.w	r3, r7, #16
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	2300      	movs	r3, #0
 80089bc:	f246 0240 	movw	r2, #24640	; 0x6040
 80089c0:	2105      	movs	r1, #5
 80089c2:	f7ff fe0b 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 80089c6:	200a      	movs	r0, #10
 80089c8:	f000 fefa 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 5, 0x6040, 00, &tmp3, 2);
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80089d0:	2302      	movs	r3, #2
 80089d2:	9301      	str	r3, [sp, #4]
 80089d4:	f107 030e 	add.w	r3, r7, #14
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	2300      	movs	r3, #0
 80089dc:	f246 0240 	movw	r2, #24640	; 0x6040
 80089e0:	2105      	movs	r1, #5
 80089e2:	f7ff fdfb 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 80089e6:	200a      	movs	r0, #10
 80089e8:	f000 feea 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 5, 0x6040, 00, &tmp4, 2);
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80089f0:	2302      	movs	r3, #2
 80089f2:	9301      	str	r3, [sp, #4]
 80089f4:	e006      	b.n	8008a04 <main+0x354>
 80089f6:	bf00      	nop
 80089f8:	20000314 	.word	0x20000314
 80089fc:	08009069 	.word	0x08009069
 8008a00:	2000033c 	.word	0x2000033c
 8008a04:	f107 030c 	add.w	r3, r7, #12
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f246 0240 	movw	r2, #24640	; 0x6040
 8008a10:	2105      	movs	r1, #5
 8008a12:	f7ff fde3 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008a16:	200a      	movs	r0, #10
 8008a18:	f000 fed2 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 5, 0x6040, 00, &tmp5, 2);
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008a20:	2302      	movs	r3, #2
 8008a22:	9301      	str	r3, [sp, #4]
 8008a24:	f107 030a 	add.w	r3, r7, #10
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f246 0240 	movw	r2, #24640	; 0x6040
 8008a30:	2105      	movs	r1, #5
 8008a32:	f7ff fdd3 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008a36:	200a      	movs	r0, #10
 8008a38:	f000 fec2 	bl	80097c0 <HAL_Delay>


 //control_word for node 6...............................................................


      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 6, 0x6040, 00, &tmp1, 2);
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008a40:	2302      	movs	r3, #2
 8008a42:	9301      	str	r3, [sp, #4]
 8008a44:	f107 0312 	add.w	r3, r7, #18
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f246 0240 	movw	r2, #24640	; 0x6040
 8008a50:	2106      	movs	r1, #6
 8008a52:	f7ff fdc3 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008a56:	200a      	movs	r0, #10
 8008a58:	f000 feb2 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 6, 0x6040, 00, &tmp2, 2);
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008a60:	2302      	movs	r3, #2
 8008a62:	9301      	str	r3, [sp, #4]
 8008a64:	f107 0310 	add.w	r3, r7, #16
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f246 0240 	movw	r2, #24640	; 0x6040
 8008a70:	2106      	movs	r1, #6
 8008a72:	f7ff fdb3 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008a76:	200a      	movs	r0, #10
 8008a78:	f000 fea2 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 6, 0x6040, 00, &tmp3, 2);
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008a80:	2302      	movs	r3, #2
 8008a82:	9301      	str	r3, [sp, #4]
 8008a84:	f107 030e 	add.w	r3, r7, #14
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	f246 0240 	movw	r2, #24640	; 0x6040
 8008a90:	2106      	movs	r1, #6
 8008a92:	f7ff fda3 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008a96:	200a      	movs	r0, #10
 8008a98:	f000 fe92 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 6, 0x6040, 00, &tmp4, 2);
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	9301      	str	r3, [sp, #4]
 8008aa4:	f107 030c 	add.w	r3, r7, #12
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f246 0240 	movw	r2, #24640	; 0x6040
 8008ab0:	2106      	movs	r1, #6
 8008ab2:	f7ff fd93 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008ab6:	200a      	movs	r0, #10
 8008ab8:	f000 fe82 	bl	80097c0 <HAL_Delay>
      write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 6, 0x6040, 00, &tmp5, 2);
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	9301      	str	r3, [sp, #4]
 8008ac4:	f107 030a 	add.w	r3, r7, #10
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	2300      	movs	r3, #0
 8008acc:	f246 0240 	movw	r2, #24640	; 0x6040
 8008ad0:	2106      	movs	r1, #6
 8008ad2:	f7ff fd83 	bl	80085dc <write_SDO>
      HAL_Delay(10);
 8008ad6:	200a      	movs	r0, #10
 8008ad8:	f000 fe72 	bl	80097c0 <HAL_Delay>





		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 1, 0x6060, 00, &homing_mode, 1);
 8008adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ade:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	9301      	str	r3, [sp, #4]
 8008ae4:	1dfb      	adds	r3, r7, #7
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	2300      	movs	r3, #0
 8008aea:	f246 0260 	movw	r2, #24672	; 0x6060
 8008aee:	2101      	movs	r1, #1
 8008af0:	f7ff fd74 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008af4:	200a      	movs	r0, #10
 8008af6:	f000 fe63 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 2, 0x6060, 00, &homing_mode, 1);
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008afe:	2301      	movs	r3, #1
 8008b00:	9301      	str	r3, [sp, #4]
 8008b02:	1dfb      	adds	r3, r7, #7
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	2300      	movs	r3, #0
 8008b08:	f246 0260 	movw	r2, #24672	; 0x6060
 8008b0c:	2102      	movs	r1, #2
 8008b0e:	f7ff fd65 	bl	80085dc <write_SDO>
      	 HAL_Delay(10);
 8008b12:	200a      	movs	r0, #10
 8008b14:	f000 fe54 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 3, 0x6060, 00, &homing_mode, 1);
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	9301      	str	r3, [sp, #4]
 8008b20:	1dfb      	adds	r3, r7, #7
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	2300      	movs	r3, #0
 8008b26:	f246 0260 	movw	r2, #24672	; 0x6060
 8008b2a:	2103      	movs	r1, #3
 8008b2c:	f7ff fd56 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008b30:	200a      	movs	r0, #10
 8008b32:	f000 fe45 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 4, 0x6060, 00, &homing_mode, 1);
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	9301      	str	r3, [sp, #4]
 8008b3e:	1dfb      	adds	r3, r7, #7
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	2300      	movs	r3, #0
 8008b44:	f246 0260 	movw	r2, #24672	; 0x6060
 8008b48:	2104      	movs	r1, #4
 8008b4a:	f7ff fd47 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008b4e:	200a      	movs	r0, #10
 8008b50:	f000 fe36 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 5, 0x6060, 00, &homing_mode, 1);
 8008b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b56:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008b58:	2301      	movs	r3, #1
 8008b5a:	9301      	str	r3, [sp, #4]
 8008b5c:	1dfb      	adds	r3, r7, #7
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	2300      	movs	r3, #0
 8008b62:	f246 0260 	movw	r2, #24672	; 0x6060
 8008b66:	2105      	movs	r1, #5
 8008b68:	f7ff fd38 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008b6c:	200a      	movs	r0, #10
 8008b6e:	f000 fe27 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 6, 0x6060, 00, &homing_mode, 1);
 8008b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b74:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008b76:	2301      	movs	r3, #1
 8008b78:	9301      	str	r3, [sp, #4]
 8008b7a:	1dfb      	adds	r3, r7, #7
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	f246 0260 	movw	r2, #24672	; 0x6060
 8008b84:	2106      	movs	r1, #6
 8008b86:	f7ff fd29 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008b8a:	200a      	movs	r0, #10
 8008b8c:	f000 fe18 	bl	80097c0 <HAL_Delay>



		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 1, 0x6098, 00, &homing_method, 1);
 8008b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b92:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008b94:	2301      	movs	r3, #1
 8008b96:	9301      	str	r3, [sp, #4]
 8008b98:	4bbf      	ldr	r3, [pc, #764]	; (8008e98 <main+0x7e8>)
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f246 0298 	movw	r2, #24728	; 0x6098
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	f7ff fd1a 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008ba8:	200a      	movs	r0, #10
 8008baa:	f000 fe09 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 2, 0x6098, 00, &homing_method, 1);
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	9301      	str	r3, [sp, #4]
 8008bb6:	4bb8      	ldr	r3, [pc, #736]	; (8008e98 <main+0x7e8>)
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f246 0298 	movw	r2, #24728	; 0x6098
 8008bc0:	2102      	movs	r1, #2
 8008bc2:	f7ff fd0b 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008bc6:	200a      	movs	r0, #10
 8008bc8:	f000 fdfa 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 3, 0x6098, 00, &homing_method, 1);
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	9301      	str	r3, [sp, #4]
 8008bd4:	4bb0      	ldr	r3, [pc, #704]	; (8008e98 <main+0x7e8>)
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f246 0298 	movw	r2, #24728	; 0x6098
 8008bde:	2103      	movs	r1, #3
 8008be0:	f7ff fcfc 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008be4:	200a      	movs	r0, #10
 8008be6:	f000 fdeb 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 4, 0x6098, 00, &homing_method, 1);
 8008bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bec:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008bee:	2301      	movs	r3, #1
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	4ba9      	ldr	r3, [pc, #676]	; (8008e98 <main+0x7e8>)
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	f246 0298 	movw	r2, #24728	; 0x6098
 8008bfc:	2104      	movs	r1, #4
 8008bfe:	f7ff fced 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008c02:	200a      	movs	r0, #10
 8008c04:	f000 fddc 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 5, 0x6098, 00, &homing_method, 1);
 8008c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	9301      	str	r3, [sp, #4]
 8008c10:	4ba1      	ldr	r3, [pc, #644]	; (8008e98 <main+0x7e8>)
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	2300      	movs	r3, #0
 8008c16:	f246 0298 	movw	r2, #24728	; 0x6098
 8008c1a:	2105      	movs	r1, #5
 8008c1c:	f7ff fcde 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008c20:	200a      	movs	r0, #10
 8008c22:	f000 fdcd 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 6, 0x6098, 00, &homing_method, 1);
 8008c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c28:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	9301      	str	r3, [sp, #4]
 8008c2e:	4b9a      	ldr	r3, [pc, #616]	; (8008e98 <main+0x7e8>)
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	2300      	movs	r3, #0
 8008c34:	f246 0298 	movw	r2, #24728	; 0x6098
 8008c38:	2106      	movs	r1, #6
 8008c3a:	f7ff fccf 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008c3e:	200a      	movs	r0, #10
 8008c40:	f000 fdbe 	bl	80097c0 <HAL_Delay>




		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 1, 0x6099, 01, &homing_speeds_a, 4);
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008c48:	2304      	movs	r3, #4
 8008c4a:	9301      	str	r3, [sp, #4]
 8008c4c:	4b93      	ldr	r3, [pc, #588]	; (8008e9c <main+0x7ec>)
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	2301      	movs	r3, #1
 8008c52:	f246 0299 	movw	r2, #24729	; 0x6099
 8008c56:	2101      	movs	r1, #1
 8008c58:	f7ff fcc0 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008c5c:	200a      	movs	r0, #10
 8008c5e:	f000 fdaf 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 2, 0x6099, 01, &homing_speeds_a, 4);
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008c66:	2304      	movs	r3, #4
 8008c68:	9301      	str	r3, [sp, #4]
 8008c6a:	4b8c      	ldr	r3, [pc, #560]	; (8008e9c <main+0x7ec>)
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	2301      	movs	r3, #1
 8008c70:	f246 0299 	movw	r2, #24729	; 0x6099
 8008c74:	2102      	movs	r1, #2
 8008c76:	f7ff fcb1 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008c7a:	200a      	movs	r0, #10
 8008c7c:	f000 fda0 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 3, 0x6099, 01, &homing_speeds_a, 4);
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008c84:	2304      	movs	r3, #4
 8008c86:	9301      	str	r3, [sp, #4]
 8008c88:	4b84      	ldr	r3, [pc, #528]	; (8008e9c <main+0x7ec>)
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	f246 0299 	movw	r2, #24729	; 0x6099
 8008c92:	2103      	movs	r1, #3
 8008c94:	f7ff fca2 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008c98:	200a      	movs	r0, #10
 8008c9a:	f000 fd91 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 4, 0x6099, 01, &homing_speeds_a, 4);
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008ca2:	2304      	movs	r3, #4
 8008ca4:	9301      	str	r3, [sp, #4]
 8008ca6:	4b7d      	ldr	r3, [pc, #500]	; (8008e9c <main+0x7ec>)
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	2301      	movs	r3, #1
 8008cac:	f246 0299 	movw	r2, #24729	; 0x6099
 8008cb0:	2104      	movs	r1, #4
 8008cb2:	f7ff fc93 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008cb6:	200a      	movs	r0, #10
 8008cb8:	f000 fd82 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 5, 0x6099, 01, &homing_speeds_a, 4);
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008cc0:	2304      	movs	r3, #4
 8008cc2:	9301      	str	r3, [sp, #4]
 8008cc4:	4b75      	ldr	r3, [pc, #468]	; (8008e9c <main+0x7ec>)
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	2301      	movs	r3, #1
 8008cca:	f246 0299 	movw	r2, #24729	; 0x6099
 8008cce:	2105      	movs	r1, #5
 8008cd0:	f7ff fc84 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008cd4:	200a      	movs	r0, #10
 8008cd6:	f000 fd73 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 6, 0x6099, 01, &homing_speeds_a, 4);
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008cde:	2304      	movs	r3, #4
 8008ce0:	9301      	str	r3, [sp, #4]
 8008ce2:	4b6e      	ldr	r3, [pc, #440]	; (8008e9c <main+0x7ec>)
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	f246 0299 	movw	r2, #24729	; 0x6099
 8008cec:	2106      	movs	r1, #6
 8008cee:	f7ff fc75 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008cf2:	200a      	movs	r0, #10
 8008cf4:	f000 fd64 	bl	80097c0 <HAL_Delay>



		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 1, 0x6099, 02, &homing_speeds_b, 4);
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008cfc:	2304      	movs	r3, #4
 8008cfe:	9301      	str	r3, [sp, #4]
 8008d00:	4b67      	ldr	r3, [pc, #412]	; (8008ea0 <main+0x7f0>)
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	2302      	movs	r3, #2
 8008d06:	f246 0299 	movw	r2, #24729	; 0x6099
 8008d0a:	2101      	movs	r1, #1
 8008d0c:	f7ff fc66 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008d10:	200a      	movs	r0, #10
 8008d12:	f000 fd55 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 2, 0x6099, 02, &homing_speeds_b, 4);
 8008d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d18:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008d1a:	2304      	movs	r3, #4
 8008d1c:	9301      	str	r3, [sp, #4]
 8008d1e:	4b60      	ldr	r3, [pc, #384]	; (8008ea0 <main+0x7f0>)
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	2302      	movs	r3, #2
 8008d24:	f246 0299 	movw	r2, #24729	; 0x6099
 8008d28:	2102      	movs	r1, #2
 8008d2a:	f7ff fc57 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008d2e:	200a      	movs	r0, #10
 8008d30:	f000 fd46 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 3, 0x6099, 02, &homing_speeds_b, 4);
 8008d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d36:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008d38:	2304      	movs	r3, #4
 8008d3a:	9301      	str	r3, [sp, #4]
 8008d3c:	4b58      	ldr	r3, [pc, #352]	; (8008ea0 <main+0x7f0>)
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	2302      	movs	r3, #2
 8008d42:	f246 0299 	movw	r2, #24729	; 0x6099
 8008d46:	2103      	movs	r1, #3
 8008d48:	f7ff fc48 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008d4c:	200a      	movs	r0, #10
 8008d4e:	f000 fd37 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 4, 0x6099, 02, &homing_speeds_b, 4);
 8008d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d54:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008d56:	2304      	movs	r3, #4
 8008d58:	9301      	str	r3, [sp, #4]
 8008d5a:	4b51      	ldr	r3, [pc, #324]	; (8008ea0 <main+0x7f0>)
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	2302      	movs	r3, #2
 8008d60:	f246 0299 	movw	r2, #24729	; 0x6099
 8008d64:	2104      	movs	r1, #4
 8008d66:	f7ff fc39 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008d6a:	200a      	movs	r0, #10
 8008d6c:	f000 fd28 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 5, 0x6099, 02, &homing_speeds_b, 4);
 8008d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d72:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008d74:	2304      	movs	r3, #4
 8008d76:	9301      	str	r3, [sp, #4]
 8008d78:	4b49      	ldr	r3, [pc, #292]	; (8008ea0 <main+0x7f0>)
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	f246 0299 	movw	r2, #24729	; 0x6099
 8008d82:	2105      	movs	r1, #5
 8008d84:	f7ff fc2a 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008d88:	200a      	movs	r0, #10
 8008d8a:	f000 fd19 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 6, 0x6099, 02, &homing_speeds_b, 4);
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d90:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008d92:	2304      	movs	r3, #4
 8008d94:	9301      	str	r3, [sp, #4]
 8008d96:	4b42      	ldr	r3, [pc, #264]	; (8008ea0 <main+0x7f0>)
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	f246 0299 	movw	r2, #24729	; 0x6099
 8008da0:	2106      	movs	r1, #6
 8008da2:	f7ff fc1b 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008da6:	200a      	movs	r0, #10
 8008da8:	f000 fd0a 	bl	80097c0 <HAL_Delay>





		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 1, 0x609A, 02, &homing_ACC, 4);
 8008dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008db0:	2304      	movs	r3, #4
 8008db2:	9301      	str	r3, [sp, #4]
 8008db4:	4b3b      	ldr	r3, [pc, #236]	; (8008ea4 <main+0x7f4>)
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	2302      	movs	r3, #2
 8008dba:	f246 029a 	movw	r2, #24730	; 0x609a
 8008dbe:	2101      	movs	r1, #1
 8008dc0:	f7ff fc0c 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008dc4:	200a      	movs	r0, #10
 8008dc6:	f000 fcfb 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 2, 0x609A, 02, &homing_ACC, 4);
 8008dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dcc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008dce:	2304      	movs	r3, #4
 8008dd0:	9301      	str	r3, [sp, #4]
 8008dd2:	4b34      	ldr	r3, [pc, #208]	; (8008ea4 <main+0x7f4>)
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	2302      	movs	r3, #2
 8008dd8:	f246 029a 	movw	r2, #24730	; 0x609a
 8008ddc:	2102      	movs	r1, #2
 8008dde:	f7ff fbfd 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008de2:	200a      	movs	r0, #10
 8008de4:	f000 fcec 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 3, 0x609A, 02, &homing_ACC, 4);
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008dec:	2304      	movs	r3, #4
 8008dee:	9301      	str	r3, [sp, #4]
 8008df0:	4b2c      	ldr	r3, [pc, #176]	; (8008ea4 <main+0x7f4>)
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	2302      	movs	r3, #2
 8008df6:	f246 029a 	movw	r2, #24730	; 0x609a
 8008dfa:	2103      	movs	r1, #3
 8008dfc:	f7ff fbee 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008e00:	200a      	movs	r0, #10
 8008e02:	f000 fcdd 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 4, 0x609A, 02, &homing_ACC, 4);
 8008e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e08:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008e0a:	2304      	movs	r3, #4
 8008e0c:	9301      	str	r3, [sp, #4]
 8008e0e:	4b25      	ldr	r3, [pc, #148]	; (8008ea4 <main+0x7f4>)
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	2302      	movs	r3, #2
 8008e14:	f246 029a 	movw	r2, #24730	; 0x609a
 8008e18:	2104      	movs	r1, #4
 8008e1a:	f7ff fbdf 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008e1e:	200a      	movs	r0, #10
 8008e20:	f000 fcce 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 5, 0x609A, 02, &homing_ACC, 4);
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008e28:	2304      	movs	r3, #4
 8008e2a:	9301      	str	r3, [sp, #4]
 8008e2c:	4b1d      	ldr	r3, [pc, #116]	; (8008ea4 <main+0x7f4>)
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	2302      	movs	r3, #2
 8008e32:	f246 029a 	movw	r2, #24730	; 0x609a
 8008e36:	2105      	movs	r1, #5
 8008e38:	f7ff fbd0 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008e3c:	200a      	movs	r0, #10
 8008e3e:	f000 fcbf 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 6, 0x609A, 02, &homing_ACC, 4);
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008e46:	2304      	movs	r3, #4
 8008e48:	9301      	str	r3, [sp, #4]
 8008e4a:	4b16      	ldr	r3, [pc, #88]	; (8008ea4 <main+0x7f4>)
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	2302      	movs	r3, #2
 8008e50:	f246 029a 	movw	r2, #24730	; 0x609a
 8008e54:	2106      	movs	r1, #6
 8008e56:	f7ff fbc1 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008e5a:	200a      	movs	r0, #10
 8008e5c:	f000 fcb0 	bl	80097c0 <HAL_Delay>





		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 1, 0x6040, 00, &tmp6, 2);
 8008e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e62:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008e64:	2302      	movs	r3, #2
 8008e66:	9301      	str	r3, [sp, #4]
 8008e68:	f107 0308 	add.w	r3, r7, #8
 8008e6c:	9300      	str	r3, [sp, #0]
 8008e6e:	2300      	movs	r3, #0
 8008e70:	f246 0240 	movw	r2, #24640	; 0x6040
 8008e74:	2101      	movs	r1, #1
 8008e76:	f7ff fbb1 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008e7a:	200a      	movs	r0, #10
 8008e7c:	f000 fca0 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 2, 0x6040, 00, &tmp6, 2);
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008e84:	2302      	movs	r3, #2
 8008e86:	9301      	str	r3, [sp, #4]
 8008e88:	f107 0308 	add.w	r3, r7, #8
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f246 0240 	movw	r2, #24640	; 0x6040
 8008e94:	2102      	movs	r1, #2
 8008e96:	e007      	b.n	8008ea8 <main+0x7f8>
 8008e98:	20000208 	.word	0x20000208
 8008e9c:	2000020c 	.word	0x2000020c
 8008ea0:	20000210 	.word	0x20000210
 8008ea4:	20000214 	.word	0x20000214
 8008ea8:	f7ff fb98 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008eac:	200a      	movs	r0, #10
 8008eae:	f000 fc87 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 3, 0x6040, 00, &tmp6, 2);
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	9301      	str	r3, [sp, #4]
 8008eba:	f107 0308 	add.w	r3, r7, #8
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f246 0240 	movw	r2, #24640	; 0x6040
 8008ec6:	2103      	movs	r1, #3
 8008ec8:	f7ff fb88 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008ecc:	200a      	movs	r0, #10
 8008ece:	f000 fc77 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 4, 0x6040, 00, &tmp6, 2);
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	9301      	str	r3, [sp, #4]
 8008eda:	f107 0308 	add.w	r3, r7, #8
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	f246 0240 	movw	r2, #24640	; 0x6040
 8008ee6:	2104      	movs	r1, #4
 8008ee8:	f7ff fb78 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008eec:	200a      	movs	r0, #10
 8008eee:	f000 fc67 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 5, 0x6040, 00, &tmp6, 2);
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	9301      	str	r3, [sp, #4]
 8008efa:	f107 0308 	add.w	r3, r7, #8
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	2300      	movs	r3, #0
 8008f02:	f246 0240 	movw	r2, #24640	; 0x6040
 8008f06:	2105      	movs	r1, #5
 8008f08:	f7ff fb68 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008f0c:	200a      	movs	r0, #10
 8008f0e:	f000 fc57 	bl	80097c0 <HAL_Delay>
		 write_SDO(canopenNodeSTM32.canOpenStack->SDOclient , 6, 0x6040, 00, &tmp6, 2);
 8008f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f14:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008f16:	2302      	movs	r3, #2
 8008f18:	9301      	str	r3, [sp, #4]
 8008f1a:	f107 0308 	add.w	r3, r7, #8
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	2300      	movs	r3, #0
 8008f22:	f246 0240 	movw	r2, #24640	; 0x6040
 8008f26:	2106      	movs	r1, #6
 8008f28:	f7ff fb58 	bl	80085dc <write_SDO>
		 HAL_Delay(10);
 8008f2c:	200a      	movs	r0, #10
 8008f2e:	f000 fc47 	bl	80097c0 <HAL_Delay>



int64_t val = 0;
 8008f32:	f04f 0200 	mov.w	r2, #0
 8008f36:	f04f 0300 	mov.w	r3, #0
 8008f3a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  while (1)
  {
    /* USER CODE END WHILE */


	  canopen_app_process();
 8008f3e:	f7fe ff19 	bl	8007d74 <canopen_app_process>
 8008f42:	e7fc      	b.n	8008f3e <main+0x88e>

08008f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b094      	sub	sp, #80	; 0x50
 8008f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008f4a:	f107 031c 	add.w	r3, r7, #28
 8008f4e:	2234      	movs	r2, #52	; 0x34
 8008f50:	2100      	movs	r1, #0
 8008f52:	4618      	mov	r0, r3
 8008f54:	f003 f940 	bl	800c1d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008f58:	f107 0308 	add.w	r3, r7, #8
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	605a      	str	r2, [r3, #4]
 8008f62:	609a      	str	r2, [r3, #8]
 8008f64:	60da      	str	r2, [r3, #12]
 8008f66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f68:	4b22      	ldr	r3, [pc, #136]	; (8008ff4 <SystemClock_Config+0xb0>)
 8008f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6c:	4a21      	ldr	r2, [pc, #132]	; (8008ff4 <SystemClock_Config+0xb0>)
 8008f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f72:	6413      	str	r3, [r2, #64]	; 0x40
 8008f74:	4b1f      	ldr	r3, [pc, #124]	; (8008ff4 <SystemClock_Config+0xb0>)
 8008f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f7c:	607b      	str	r3, [r7, #4]
 8008f7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8008f80:	4b1d      	ldr	r3, [pc, #116]	; (8008ff8 <SystemClock_Config+0xb4>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008f88:	4a1b      	ldr	r2, [pc, #108]	; (8008ff8 <SystemClock_Config+0xb4>)
 8008f8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	4b19      	ldr	r3, [pc, #100]	; (8008ff8 <SystemClock_Config+0xb4>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008f98:	603b      	str	r3, [r7, #0]
 8008f9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008fa4:	2310      	movs	r3, #16
 8008fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008fac:	f107 031c 	add.w	r3, r7, #28
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f001 fe43 	bl	800ac3c <HAL_RCC_OscConfig>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d001      	beq.n	8008fc0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8008fbc:	f000 f90a 	bl	80091d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008fc0:	230f      	movs	r3, #15
 8008fc2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008fd4:	f107 0308 	add.w	r3, r7, #8
 8008fd8:	2100      	movs	r1, #0
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f002 f8dc 	bl	800b198 <HAL_RCC_ClockConfig>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d001      	beq.n	8008fea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8008fe6:	f000 f8f5 	bl	80091d4 <Error_Handler>
  }
}
 8008fea:	bf00      	nop
 8008fec:	3750      	adds	r7, #80	; 0x50
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	40023800 	.word	0x40023800
 8008ff8:	40007000 	.word	0x40007000

08008ffc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8009000:	4b17      	ldr	r3, [pc, #92]	; (8009060 <MX_CAN1_Init+0x64>)
 8009002:	4a18      	ldr	r2, [pc, #96]	; (8009064 <MX_CAN1_Init+0x68>)
 8009004:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8009006:	4b16      	ldr	r3, [pc, #88]	; (8009060 <MX_CAN1_Init+0x64>)
 8009008:	2201      	movs	r2, #1
 800900a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800900c:	4b14      	ldr	r3, [pc, #80]	; (8009060 <MX_CAN1_Init+0x64>)
 800900e:	2200      	movs	r2, #0
 8009010:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009012:	4b13      	ldr	r3, [pc, #76]	; (8009060 <MX_CAN1_Init+0x64>)
 8009014:	2200      	movs	r2, #0
 8009016:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 8009018:	4b11      	ldr	r3, [pc, #68]	; (8009060 <MX_CAN1_Init+0x64>)
 800901a:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800901e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8009020:	4b0f      	ldr	r3, [pc, #60]	; (8009060 <MX_CAN1_Init+0x64>)
 8009022:	2200      	movs	r2, #0
 8009024:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8009026:	4b0e      	ldr	r3, [pc, #56]	; (8009060 <MX_CAN1_Init+0x64>)
 8009028:	2200      	movs	r2, #0
 800902a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800902c:	4b0c      	ldr	r3, [pc, #48]	; (8009060 <MX_CAN1_Init+0x64>)
 800902e:	2200      	movs	r2, #0
 8009030:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8009032:	4b0b      	ldr	r3, [pc, #44]	; (8009060 <MX_CAN1_Init+0x64>)
 8009034:	2200      	movs	r2, #0
 8009036:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8009038:	4b09      	ldr	r3, [pc, #36]	; (8009060 <MX_CAN1_Init+0x64>)
 800903a:	2200      	movs	r2, #0
 800903c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800903e:	4b08      	ldr	r3, [pc, #32]	; (8009060 <MX_CAN1_Init+0x64>)
 8009040:	2200      	movs	r2, #0
 8009042:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8009044:	4b06      	ldr	r3, [pc, #24]	; (8009060 <MX_CAN1_Init+0x64>)
 8009046:	2200      	movs	r2, #0
 8009048:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800904a:	4805      	ldr	r0, [pc, #20]	; (8009060 <MX_CAN1_Init+0x64>)
 800904c:	f000 fbdc 	bl	8009808 <HAL_CAN_Init>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8009056:	f000 f8bd 	bl	80091d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800905a:	bf00      	nop
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	200002ec 	.word	0x200002ec
 8009064:	40006400 	.word	0x40006400

08009068 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800906c:	4b17      	ldr	r3, [pc, #92]	; (80090cc <MX_CAN2_Init+0x64>)
 800906e:	4a18      	ldr	r2, [pc, #96]	; (80090d0 <MX_CAN2_Init+0x68>)
 8009070:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 1;
 8009072:	4b16      	ldr	r3, [pc, #88]	; (80090cc <MX_CAN2_Init+0x64>)
 8009074:	2201      	movs	r2, #1
 8009076:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8009078:	4b14      	ldr	r3, [pc, #80]	; (80090cc <MX_CAN2_Init+0x64>)
 800907a:	2200      	movs	r2, #0
 800907c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800907e:	4b13      	ldr	r3, [pc, #76]	; (80090cc <MX_CAN2_Init+0x64>)
 8009080:	2200      	movs	r2, #0
 8009082:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_14TQ;
 8009084:	4b11      	ldr	r3, [pc, #68]	; (80090cc <MX_CAN2_Init+0x64>)
 8009086:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800908a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800908c:	4b0f      	ldr	r3, [pc, #60]	; (80090cc <MX_CAN2_Init+0x64>)
 800908e:	2200      	movs	r2, #0
 8009090:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8009092:	4b0e      	ldr	r3, [pc, #56]	; (80090cc <MX_CAN2_Init+0x64>)
 8009094:	2200      	movs	r2, #0
 8009096:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8009098:	4b0c      	ldr	r3, [pc, #48]	; (80090cc <MX_CAN2_Init+0x64>)
 800909a:	2200      	movs	r2, #0
 800909c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800909e:	4b0b      	ldr	r3, [pc, #44]	; (80090cc <MX_CAN2_Init+0x64>)
 80090a0:	2200      	movs	r2, #0
 80090a2:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80090a4:	4b09      	ldr	r3, [pc, #36]	; (80090cc <MX_CAN2_Init+0x64>)
 80090a6:	2200      	movs	r2, #0
 80090a8:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80090aa:	4b08      	ldr	r3, [pc, #32]	; (80090cc <MX_CAN2_Init+0x64>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80090b0:	4b06      	ldr	r3, [pc, #24]	; (80090cc <MX_CAN2_Init+0x64>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80090b6:	4805      	ldr	r0, [pc, #20]	; (80090cc <MX_CAN2_Init+0x64>)
 80090b8:	f000 fba6 	bl	8009808 <HAL_CAN_Init>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 80090c2:	f000 f887 	bl	80091d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80090c6:	bf00      	nop
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	20000314 	.word	0x20000314
 80090d0:	40006800 	.word	0x40006800

080090d4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80090d8:	4b0e      	ldr	r3, [pc, #56]	; (8009114 <MX_TIM14_Init+0x40>)
 80090da:	4a0f      	ldr	r2, [pc, #60]	; (8009118 <MX_TIM14_Init+0x44>)
 80090dc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 15;
 80090de:	4b0d      	ldr	r3, [pc, #52]	; (8009114 <MX_TIM14_Init+0x40>)
 80090e0:	220f      	movs	r2, #15
 80090e2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80090e4:	4b0b      	ldr	r3, [pc, #44]	; (8009114 <MX_TIM14_Init+0x40>)
 80090e6:	2200      	movs	r2, #0
 80090e8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 80090ea:	4b0a      	ldr	r3, [pc, #40]	; (8009114 <MX_TIM14_Init+0x40>)
 80090ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80090f0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80090f2:	4b08      	ldr	r3, [pc, #32]	; (8009114 <MX_TIM14_Init+0x40>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80090f8:	4b06      	ldr	r3, [pc, #24]	; (8009114 <MX_TIM14_Init+0x40>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80090fe:	4805      	ldr	r0, [pc, #20]	; (8009114 <MX_TIM14_Init+0x40>)
 8009100:	f002 f9fc 	bl	800b4fc <HAL_TIM_Base_Init>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800910a:	f000 f863 	bl	80091d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800910e:	bf00      	nop
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	2000033c 	.word	0x2000033c
 8009118:	40002000 	.word	0x40002000

0800911c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009122:	4b15      	ldr	r3, [pc, #84]	; (8009178 <MX_GPIO_Init+0x5c>)
 8009124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009126:	4a14      	ldr	r2, [pc, #80]	; (8009178 <MX_GPIO_Init+0x5c>)
 8009128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800912c:	6313      	str	r3, [r2, #48]	; 0x30
 800912e:	4b12      	ldr	r3, [pc, #72]	; (8009178 <MX_GPIO_Init+0x5c>)
 8009130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009136:	60fb      	str	r3, [r7, #12]
 8009138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800913a:	4b0f      	ldr	r3, [pc, #60]	; (8009178 <MX_GPIO_Init+0x5c>)
 800913c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913e:	4a0e      	ldr	r2, [pc, #56]	; (8009178 <MX_GPIO_Init+0x5c>)
 8009140:	f043 0302 	orr.w	r3, r3, #2
 8009144:	6313      	str	r3, [r2, #48]	; 0x30
 8009146:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <MX_GPIO_Init+0x5c>)
 8009148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800914a:	f003 0302 	and.w	r3, r3, #2
 800914e:	60bb      	str	r3, [r7, #8]
 8009150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009152:	4b09      	ldr	r3, [pc, #36]	; (8009178 <MX_GPIO_Init+0x5c>)
 8009154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009156:	4a08      	ldr	r2, [pc, #32]	; (8009178 <MX_GPIO_Init+0x5c>)
 8009158:	f043 0301 	orr.w	r3, r3, #1
 800915c:	6313      	str	r3, [r2, #48]	; 0x30
 800915e:	4b06      	ldr	r3, [pc, #24]	; (8009178 <MX_GPIO_Init+0x5c>)
 8009160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	607b      	str	r3, [r7, #4]
 8009168:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800916a:	bf00      	nop
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	40023800 	.word	0x40023800

0800917c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8009182:	463b      	mov	r3, r7
 8009184:	2200      	movs	r2, #0
 8009186:	601a      	str	r2, [r3, #0]
 8009188:	605a      	str	r2, [r3, #4]
 800918a:	609a      	str	r2, [r3, #8]
 800918c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800918e:	f001 fb31 	bl	800a7f4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8009192:	2301      	movs	r3, #1
 8009194:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8009196:	2300      	movs	r3, #0
 8009198:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800919a:	2300      	movs	r3, #0
 800919c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800919e:	231f      	movs	r3, #31
 80091a0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80091a2:	2387      	movs	r3, #135	; 0x87
 80091a4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80091a6:	2300      	movs	r3, #0
 80091a8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80091aa:	2300      	movs	r3, #0
 80091ac:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80091ae:	2301      	movs	r3, #1
 80091b0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80091b2:	2301      	movs	r3, #1
 80091b4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80091ba:	2300      	movs	r3, #0
 80091bc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80091be:	463b      	mov	r3, r7
 80091c0:	4618      	mov	r0, r3
 80091c2:	f001 fb4f 	bl	800a864 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80091c6:	2004      	movs	r0, #4
 80091c8:	f001 fb2c 	bl	800a824 <HAL_MPU_Enable>

}
 80091cc:	bf00      	nop
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80091d4:	b480      	push	{r7}
 80091d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80091d8:	b672      	cpsid	i
}
 80091da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80091dc:	e7fe      	b.n	80091dc <Error_Handler+0x8>
	...

080091e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80091e6:	4b12      	ldr	r3, [pc, #72]	; (8009230 <HAL_MspInit+0x50>)
 80091e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ea:	4a11      	ldr	r2, [pc, #68]	; (8009230 <HAL_MspInit+0x50>)
 80091ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091f0:	6413      	str	r3, [r2, #64]	; 0x40
 80091f2:	4b0f      	ldr	r3, [pc, #60]	; (8009230 <HAL_MspInit+0x50>)
 80091f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091fa:	607b      	str	r3, [r7, #4]
 80091fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80091fe:	4b0c      	ldr	r3, [pc, #48]	; (8009230 <HAL_MspInit+0x50>)
 8009200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009202:	4a0b      	ldr	r2, [pc, #44]	; (8009230 <HAL_MspInit+0x50>)
 8009204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009208:	6453      	str	r3, [r2, #68]	; 0x44
 800920a:	4b09      	ldr	r3, [pc, #36]	; (8009230 <HAL_MspInit+0x50>)
 800920c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009212:	603b      	str	r3, [r7, #0]
 8009214:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8009216:	2200      	movs	r2, #0
 8009218:	2100      	movs	r1, #0
 800921a:	2005      	movs	r0, #5
 800921c:	f001 faaf 	bl	800a77e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8009220:	2005      	movs	r0, #5
 8009222:	f001 fac8 	bl	800a7b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009226:	bf00      	nop
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	40023800 	.word	0x40023800

08009234 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b08c      	sub	sp, #48	; 0x30
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800923c:	f107 031c 	add.w	r3, r7, #28
 8009240:	2200      	movs	r2, #0
 8009242:	601a      	str	r2, [r3, #0]
 8009244:	605a      	str	r2, [r3, #4]
 8009246:	609a      	str	r2, [r3, #8]
 8009248:	60da      	str	r2, [r3, #12]
 800924a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a5e      	ldr	r2, [pc, #376]	; (80093cc <HAL_CAN_MspInit+0x198>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d152      	bne.n	80092fc <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8009256:	4b5e      	ldr	r3, [pc, #376]	; (80093d0 <HAL_CAN_MspInit+0x19c>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	3301      	adds	r3, #1
 800925c:	4a5c      	ldr	r2, [pc, #368]	; (80093d0 <HAL_CAN_MspInit+0x19c>)
 800925e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8009260:	4b5b      	ldr	r3, [pc, #364]	; (80093d0 <HAL_CAN_MspInit+0x19c>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d10b      	bne.n	8009280 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8009268:	4b5a      	ldr	r3, [pc, #360]	; (80093d4 <HAL_CAN_MspInit+0x1a0>)
 800926a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926c:	4a59      	ldr	r2, [pc, #356]	; (80093d4 <HAL_CAN_MspInit+0x1a0>)
 800926e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009272:	6413      	str	r3, [r2, #64]	; 0x40
 8009274:	4b57      	ldr	r3, [pc, #348]	; (80093d4 <HAL_CAN_MspInit+0x1a0>)
 8009276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800927c:	61bb      	str	r3, [r7, #24]
 800927e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009280:	4b54      	ldr	r3, [pc, #336]	; (80093d4 <HAL_CAN_MspInit+0x1a0>)
 8009282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009284:	4a53      	ldr	r2, [pc, #332]	; (80093d4 <HAL_CAN_MspInit+0x1a0>)
 8009286:	f043 0301 	orr.w	r3, r3, #1
 800928a:	6313      	str	r3, [r2, #48]	; 0x30
 800928c:	4b51      	ldr	r3, [pc, #324]	; (80093d4 <HAL_CAN_MspInit+0x1a0>)
 800928e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009290:	f003 0301 	and.w	r3, r3, #1
 8009294:	617b      	str	r3, [r7, #20]
 8009296:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009298:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800929c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800929e:	2302      	movs	r3, #2
 80092a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092a2:	2300      	movs	r3, #0
 80092a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092a6:	2303      	movs	r3, #3
 80092a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80092aa:	2309      	movs	r3, #9
 80092ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092ae:	f107 031c 	add.w	r3, r7, #28
 80092b2:	4619      	mov	r1, r3
 80092b4:	4848      	ldr	r0, [pc, #288]	; (80093d8 <HAL_CAN_MspInit+0x1a4>)
 80092b6:	f001 fb15 	bl	800a8e4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80092ba:	2200      	movs	r2, #0
 80092bc:	2100      	movs	r1, #0
 80092be:	2013      	movs	r0, #19
 80092c0:	f001 fa5d 	bl	800a77e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80092c4:	2013      	movs	r0, #19
 80092c6:	f001 fa76 	bl	800a7b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80092ca:	2200      	movs	r2, #0
 80092cc:	2100      	movs	r1, #0
 80092ce:	2014      	movs	r0, #20
 80092d0:	f001 fa55 	bl	800a77e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80092d4:	2014      	movs	r0, #20
 80092d6:	f001 fa6e 	bl	800a7b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80092da:	2200      	movs	r2, #0
 80092dc:	2100      	movs	r1, #0
 80092de:	2015      	movs	r0, #21
 80092e0:	f001 fa4d 	bl	800a77e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80092e4:	2015      	movs	r0, #21
 80092e6:	f001 fa66 	bl	800a7b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80092ea:	2200      	movs	r2, #0
 80092ec:	2100      	movs	r1, #0
 80092ee:	2016      	movs	r0, #22
 80092f0:	f001 fa45 	bl	800a77e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80092f4:	2016      	movs	r0, #22
 80092f6:	f001 fa5e 	bl	800a7b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80092fa:	e062      	b.n	80093c2 <HAL_CAN_MspInit+0x18e>
  else if(hcan->Instance==CAN2)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a36      	ldr	r2, [pc, #216]	; (80093dc <HAL_CAN_MspInit+0x1a8>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d15d      	bne.n	80093c2 <HAL_CAN_MspInit+0x18e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8009306:	4b33      	ldr	r3, [pc, #204]	; (80093d4 <HAL_CAN_MspInit+0x1a0>)
 8009308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930a:	4a32      	ldr	r2, [pc, #200]	; (80093d4 <HAL_CAN_MspInit+0x1a0>)
 800930c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009310:	6413      	str	r3, [r2, #64]	; 0x40
 8009312:	4b30      	ldr	r3, [pc, #192]	; (80093d4 <HAL_CAN_MspInit+0x1a0>)
 8009314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009316:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800931a:	613b      	str	r3, [r7, #16]
 800931c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800931e:	4b2c      	ldr	r3, [pc, #176]	; (80093d0 <HAL_CAN_MspInit+0x19c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3301      	adds	r3, #1
 8009324:	4a2a      	ldr	r2, [pc, #168]	; (80093d0 <HAL_CAN_MspInit+0x19c>)
 8009326:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8009328:	4b29      	ldr	r3, [pc, #164]	; (80093d0 <HAL_CAN_MspInit+0x19c>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d10b      	bne.n	8009348 <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8009330:	4b28      	ldr	r3, [pc, #160]	; (80093d4 <HAL_CAN_MspInit+0x1a0>)
 8009332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009334:	4a27      	ldr	r2, [pc, #156]	; (80093d4 <HAL_CAN_MspInit+0x1a0>)
 8009336:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800933a:	6413      	str	r3, [r2, #64]	; 0x40
 800933c:	4b25      	ldr	r3, [pc, #148]	; (80093d4 <HAL_CAN_MspInit+0x1a0>)
 800933e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009344:	60fb      	str	r3, [r7, #12]
 8009346:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009348:	4b22      	ldr	r3, [pc, #136]	; (80093d4 <HAL_CAN_MspInit+0x1a0>)
 800934a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934c:	4a21      	ldr	r2, [pc, #132]	; (80093d4 <HAL_CAN_MspInit+0x1a0>)
 800934e:	f043 0302 	orr.w	r3, r3, #2
 8009352:	6313      	str	r3, [r2, #48]	; 0x30
 8009354:	4b1f      	ldr	r3, [pc, #124]	; (80093d4 <HAL_CAN_MspInit+0x1a0>)
 8009356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009358:	f003 0302 	and.w	r3, r3, #2
 800935c:	60bb      	str	r3, [r7, #8]
 800935e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8009360:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009366:	2302      	movs	r3, #2
 8009368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800936a:	2300      	movs	r3, #0
 800936c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800936e:	2303      	movs	r3, #3
 8009370:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8009372:	2309      	movs	r3, #9
 8009374:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009376:	f107 031c 	add.w	r3, r7, #28
 800937a:	4619      	mov	r1, r3
 800937c:	4818      	ldr	r0, [pc, #96]	; (80093e0 <HAL_CAN_MspInit+0x1ac>)
 800937e:	f001 fab1 	bl	800a8e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8009382:	2200      	movs	r2, #0
 8009384:	2100      	movs	r1, #0
 8009386:	203f      	movs	r0, #63	; 0x3f
 8009388:	f001 f9f9 	bl	800a77e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800938c:	203f      	movs	r0, #63	; 0x3f
 800938e:	f001 fa12 	bl	800a7b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8009392:	2200      	movs	r2, #0
 8009394:	2100      	movs	r1, #0
 8009396:	2040      	movs	r0, #64	; 0x40
 8009398:	f001 f9f1 	bl	800a77e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800939c:	2040      	movs	r0, #64	; 0x40
 800939e:	f001 fa0a 	bl	800a7b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80093a2:	2200      	movs	r2, #0
 80093a4:	2100      	movs	r1, #0
 80093a6:	2041      	movs	r0, #65	; 0x41
 80093a8:	f001 f9e9 	bl	800a77e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80093ac:	2041      	movs	r0, #65	; 0x41
 80093ae:	f001 fa02 	bl	800a7b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 80093b2:	2200      	movs	r2, #0
 80093b4:	2100      	movs	r1, #0
 80093b6:	2042      	movs	r0, #66	; 0x42
 80093b8:	f001 f9e1 	bl	800a77e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 80093bc:	2042      	movs	r0, #66	; 0x42
 80093be:	f001 f9fa 	bl	800a7b6 <HAL_NVIC_EnableIRQ>
}
 80093c2:	bf00      	nop
 80093c4:	3730      	adds	r7, #48	; 0x30
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	40006400 	.word	0x40006400
 80093d0:	20000388 	.word	0x20000388
 80093d4:	40023800 	.word	0x40023800
 80093d8:	40020000 	.word	0x40020000
 80093dc:	40006800 	.word	0x40006800
 80093e0:	40020400 	.word	0x40020400

080093e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a0d      	ldr	r2, [pc, #52]	; (8009428 <HAL_TIM_Base_MspInit+0x44>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d113      	bne.n	800941e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80093f6:	4b0d      	ldr	r3, [pc, #52]	; (800942c <HAL_TIM_Base_MspInit+0x48>)
 80093f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fa:	4a0c      	ldr	r2, [pc, #48]	; (800942c <HAL_TIM_Base_MspInit+0x48>)
 80093fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009400:	6413      	str	r3, [r2, #64]	; 0x40
 8009402:	4b0a      	ldr	r3, [pc, #40]	; (800942c <HAL_TIM_Base_MspInit+0x48>)
 8009404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800940a:	60fb      	str	r3, [r7, #12]
 800940c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800940e:	2200      	movs	r2, #0
 8009410:	2100      	movs	r1, #0
 8009412:	202d      	movs	r0, #45	; 0x2d
 8009414:	f001 f9b3 	bl	800a77e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8009418:	202d      	movs	r0, #45	; 0x2d
 800941a:	f001 f9cc 	bl	800a7b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800941e:	bf00      	nop
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	40002000 	.word	0x40002000
 800942c:	40023800 	.word	0x40023800

08009430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009430:	b480      	push	{r7}
 8009432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009434:	e7fe      	b.n	8009434 <NMI_Handler+0x4>

08009436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009436:	b480      	push	{r7}
 8009438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800943a:	e7fe      	b.n	800943a <HardFault_Handler+0x4>

0800943c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800943c:	b480      	push	{r7}
 800943e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009440:	e7fe      	b.n	8009440 <MemManage_Handler+0x4>

08009442 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009442:	b480      	push	{r7}
 8009444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009446:	e7fe      	b.n	8009446 <BusFault_Handler+0x4>

08009448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009448:	b480      	push	{r7}
 800944a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800944c:	e7fe      	b.n	800944c <UsageFault_Handler+0x4>

0800944e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800944e:	b480      	push	{r7}
 8009450:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009452:	bf00      	nop
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800945c:	b480      	push	{r7}
 800945e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009460:	bf00      	nop
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr

0800946a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800946a:	b480      	push	{r7}
 800946c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800946e:	bf00      	nop
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800947c:	f000 f980 	bl	8009780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009480:	bf00      	nop
 8009482:	bd80      	pop	{r7, pc}

08009484 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8009484:	b480      	push	{r7}
 8009486:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8009488:	bf00      	nop
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
	...

08009494 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009498:	4802      	ldr	r0, [pc, #8]	; (80094a4 <CAN1_TX_IRQHandler+0x10>)
 800949a:	f000 fe77 	bl	800a18c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800949e:	bf00      	nop
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	200002ec 	.word	0x200002ec

080094a8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80094ac:	4802      	ldr	r0, [pc, #8]	; (80094b8 <CAN1_RX0_IRQHandler+0x10>)
 80094ae:	f000 fe6d 	bl	800a18c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80094b2:	bf00      	nop
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	200002ec 	.word	0x200002ec

080094bc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80094c0:	4802      	ldr	r0, [pc, #8]	; (80094cc <CAN1_RX1_IRQHandler+0x10>)
 80094c2:	f000 fe63 	bl	800a18c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80094c6:	bf00      	nop
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	200002ec 	.word	0x200002ec

080094d0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80094d4:	4802      	ldr	r0, [pc, #8]	; (80094e0 <CAN1_SCE_IRQHandler+0x10>)
 80094d6:	f000 fe59 	bl	800a18c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80094da:	bf00      	nop
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	200002ec 	.word	0x200002ec

080094e4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80094e8:	4802      	ldr	r0, [pc, #8]	; (80094f4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80094ea:	f002 f8d7 	bl	800b69c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80094ee:	bf00      	nop
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	2000033c 	.word	0x2000033c

080094f8 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80094fc:	4802      	ldr	r0, [pc, #8]	; (8009508 <CAN2_TX_IRQHandler+0x10>)
 80094fe:	f000 fe45 	bl	800a18c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8009502:	bf00      	nop
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	20000314 	.word	0x20000314

0800950c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8009510:	4802      	ldr	r0, [pc, #8]	; (800951c <CAN2_RX0_IRQHandler+0x10>)
 8009512:	f000 fe3b 	bl	800a18c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8009516:	bf00      	nop
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	20000314 	.word	0x20000314

08009520 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8009524:	4802      	ldr	r0, [pc, #8]	; (8009530 <CAN2_RX1_IRQHandler+0x10>)
 8009526:	f000 fe31 	bl	800a18c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800952a:	bf00      	nop
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	20000314 	.word	0x20000314

08009534 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8009538:	4802      	ldr	r0, [pc, #8]	; (8009544 <CAN2_SCE_IRQHandler+0x10>)
 800953a:	f000 fe27 	bl	800a18c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 800953e:	bf00      	nop
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	20000314 	.word	0x20000314

08009548 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b086      	sub	sp, #24
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009554:	2300      	movs	r3, #0
 8009556:	617b      	str	r3, [r7, #20]
 8009558:	e00a      	b.n	8009570 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800955a:	f3af 8000 	nop.w
 800955e:	4601      	mov	r1, r0
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	1c5a      	adds	r2, r3, #1
 8009564:	60ba      	str	r2, [r7, #8]
 8009566:	b2ca      	uxtb	r2, r1
 8009568:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	3301      	adds	r3, #1
 800956e:	617b      	str	r3, [r7, #20]
 8009570:	697a      	ldr	r2, [r7, #20]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	429a      	cmp	r2, r3
 8009576:	dbf0      	blt.n	800955a <_read+0x12>
  }

  return len;
 8009578:	687b      	ldr	r3, [r7, #4]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3718      	adds	r7, #24
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b086      	sub	sp, #24
 8009586:	af00      	add	r7, sp, #0
 8009588:	60f8      	str	r0, [r7, #12]
 800958a:	60b9      	str	r1, [r7, #8]
 800958c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800958e:	2300      	movs	r3, #0
 8009590:	617b      	str	r3, [r7, #20]
 8009592:	e009      	b.n	80095a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	1c5a      	adds	r2, r3, #1
 8009598:	60ba      	str	r2, [r7, #8]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	4618      	mov	r0, r3
 800959e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	3301      	adds	r3, #1
 80095a6:	617b      	str	r3, [r7, #20]
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	dbf1      	blt.n	8009594 <_write+0x12>
  }
  return len;
 80095b0:	687b      	ldr	r3, [r7, #4]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <_close>:

int _close(int file)
{
 80095ba:	b480      	push	{r7}
 80095bc:	b083      	sub	sp, #12
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80095c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80095d2:	b480      	push	{r7}
 80095d4:	b083      	sub	sp, #12
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80095e2:	605a      	str	r2, [r3, #4]
  return 0;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <_isatty>:

int _isatty(int file)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b083      	sub	sp, #12
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80095fa:	2301      	movs	r3, #1
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
	...

08009624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800962c:	4a14      	ldr	r2, [pc, #80]	; (8009680 <_sbrk+0x5c>)
 800962e:	4b15      	ldr	r3, [pc, #84]	; (8009684 <_sbrk+0x60>)
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009638:	4b13      	ldr	r3, [pc, #76]	; (8009688 <_sbrk+0x64>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d102      	bne.n	8009646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009640:	4b11      	ldr	r3, [pc, #68]	; (8009688 <_sbrk+0x64>)
 8009642:	4a12      	ldr	r2, [pc, #72]	; (800968c <_sbrk+0x68>)
 8009644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009646:	4b10      	ldr	r3, [pc, #64]	; (8009688 <_sbrk+0x64>)
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4413      	add	r3, r2
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	429a      	cmp	r2, r3
 8009652:	d207      	bcs.n	8009664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009654:	f002 fe1e 	bl	800c294 <__errno>
 8009658:	4603      	mov	r3, r0
 800965a:	220c      	movs	r2, #12
 800965c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800965e:	f04f 33ff 	mov.w	r3, #4294967295
 8009662:	e009      	b.n	8009678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009664:	4b08      	ldr	r3, [pc, #32]	; (8009688 <_sbrk+0x64>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800966a:	4b07      	ldr	r3, [pc, #28]	; (8009688 <_sbrk+0x64>)
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4413      	add	r3, r2
 8009672:	4a05      	ldr	r2, [pc, #20]	; (8009688 <_sbrk+0x64>)
 8009674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009676:	68fb      	ldr	r3, [r7, #12]
}
 8009678:	4618      	mov	r0, r3
 800967a:	3718      	adds	r7, #24
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	20080000 	.word	0x20080000
 8009684:	00000400 	.word	0x00000400
 8009688:	2000038c 	.word	0x2000038c
 800968c:	200004e0 	.word	0x200004e0

08009690 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009690:	b480      	push	{r7}
 8009692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009694:	4b06      	ldr	r3, [pc, #24]	; (80096b0 <SystemInit+0x20>)
 8009696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800969a:	4a05      	ldr	r2, [pc, #20]	; (80096b0 <SystemInit+0x20>)
 800969c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80096a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80096a4:	bf00      	nop
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	e000ed00 	.word	0xe000ed00

080096b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80096b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80096ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80096b8:	f7ff ffea 	bl	8009690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80096bc:	480c      	ldr	r0, [pc, #48]	; (80096f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80096be:	490d      	ldr	r1, [pc, #52]	; (80096f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80096c0:	4a0d      	ldr	r2, [pc, #52]	; (80096f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80096c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80096c4:	e002      	b.n	80096cc <LoopCopyDataInit>

080096c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80096c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80096c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80096ca:	3304      	adds	r3, #4

080096cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80096cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80096ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80096d0:	d3f9      	bcc.n	80096c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80096d2:	4a0a      	ldr	r2, [pc, #40]	; (80096fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80096d4:	4c0a      	ldr	r4, [pc, #40]	; (8009700 <LoopFillZerobss+0x22>)
  movs r3, #0
 80096d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80096d8:	e001      	b.n	80096de <LoopFillZerobss>

080096da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80096da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80096dc:	3204      	adds	r2, #4

080096de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80096de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80096e0:	d3fb      	bcc.n	80096da <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80096e2:	f002 fddd 	bl	800c2a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80096e6:	f7fe ffe3 	bl	80086b0 <main>
  bx  lr    
 80096ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80096ec:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80096f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80096f4:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 80096f8:	0800cf18 	.word	0x0800cf18
  ldr r2, =_sbss
 80096fc:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8009700:	200004e0 	.word	0x200004e0

08009704 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009704:	e7fe      	b.n	8009704 <ADC_IRQHandler>

08009706 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800970a:	2003      	movs	r0, #3
 800970c:	f001 f82c 	bl	800a768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009710:	200f      	movs	r0, #15
 8009712:	f000 f805 	bl	8009720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009716:	f7ff fd63 	bl	80091e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	bd80      	pop	{r7, pc}

08009720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009728:	4b12      	ldr	r3, [pc, #72]	; (8009774 <HAL_InitTick+0x54>)
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	4b12      	ldr	r3, [pc, #72]	; (8009778 <HAL_InitTick+0x58>)
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	4619      	mov	r1, r3
 8009732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009736:	fbb3 f3f1 	udiv	r3, r3, r1
 800973a:	fbb2 f3f3 	udiv	r3, r2, r3
 800973e:	4618      	mov	r0, r3
 8009740:	f001 f84b 	bl	800a7da <HAL_SYSTICK_Config>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e00e      	b.n	800976c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2b0f      	cmp	r3, #15
 8009752:	d80a      	bhi.n	800976a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009754:	2200      	movs	r2, #0
 8009756:	6879      	ldr	r1, [r7, #4]
 8009758:	f04f 30ff 	mov.w	r0, #4294967295
 800975c:	f001 f80f 	bl	800a77e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009760:	4a06      	ldr	r2, [pc, #24]	; (800977c <HAL_InitTick+0x5c>)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	e000      	b.n	800976c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
}
 800976c:	4618      	mov	r0, r3
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	20000218 	.word	0x20000218
 8009778:	20000220 	.word	0x20000220
 800977c:	2000021c 	.word	0x2000021c

08009780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009780:	b480      	push	{r7}
 8009782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009784:	4b06      	ldr	r3, [pc, #24]	; (80097a0 <HAL_IncTick+0x20>)
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	461a      	mov	r2, r3
 800978a:	4b06      	ldr	r3, [pc, #24]	; (80097a4 <HAL_IncTick+0x24>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4413      	add	r3, r2
 8009790:	4a04      	ldr	r2, [pc, #16]	; (80097a4 <HAL_IncTick+0x24>)
 8009792:	6013      	str	r3, [r2, #0]
}
 8009794:	bf00      	nop
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	20000220 	.word	0x20000220
 80097a4:	20000390 	.word	0x20000390

080097a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80097a8:	b480      	push	{r7}
 80097aa:	af00      	add	r7, sp, #0
  return uwTick;
 80097ac:	4b03      	ldr	r3, [pc, #12]	; (80097bc <HAL_GetTick+0x14>)
 80097ae:	681b      	ldr	r3, [r3, #0]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	20000390 	.word	0x20000390

080097c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80097c8:	f7ff ffee 	bl	80097a8 <HAL_GetTick>
 80097cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d8:	d005      	beq.n	80097e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80097da:	4b0a      	ldr	r3, [pc, #40]	; (8009804 <HAL_Delay+0x44>)
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	461a      	mov	r2, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	4413      	add	r3, r2
 80097e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80097e6:	bf00      	nop
 80097e8:	f7ff ffde 	bl	80097a8 <HAL_GetTick>
 80097ec:	4602      	mov	r2, r0
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d8f7      	bhi.n	80097e8 <HAL_Delay+0x28>
  {
  }
}
 80097f8:	bf00      	nop
 80097fa:	bf00      	nop
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	20000220 	.word	0x20000220

08009808 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d101      	bne.n	800981a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	e0ed      	b.n	80099f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009820:	b2db      	uxtb	r3, r3
 8009822:	2b00      	cmp	r3, #0
 8009824:	d102      	bne.n	800982c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7ff fd04 	bl	8009234 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f042 0201 	orr.w	r2, r2, #1
 800983a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800983c:	f7ff ffb4 	bl	80097a8 <HAL_GetTick>
 8009840:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009842:	e012      	b.n	800986a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009844:	f7ff ffb0 	bl	80097a8 <HAL_GetTick>
 8009848:	4602      	mov	r2, r0
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	2b0a      	cmp	r3, #10
 8009850:	d90b      	bls.n	800986a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009856:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2205      	movs	r2, #5
 8009862:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	e0c5      	b.n	80099f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	f003 0301 	and.w	r3, r3, #1
 8009874:	2b00      	cmp	r3, #0
 8009876:	d0e5      	beq.n	8009844 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f022 0202 	bic.w	r2, r2, #2
 8009886:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009888:	f7ff ff8e 	bl	80097a8 <HAL_GetTick>
 800988c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800988e:	e012      	b.n	80098b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009890:	f7ff ff8a 	bl	80097a8 <HAL_GetTick>
 8009894:	4602      	mov	r2, r0
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	2b0a      	cmp	r3, #10
 800989c:	d90b      	bls.n	80098b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2205      	movs	r2, #5
 80098ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e09f      	b.n	80099f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	f003 0302 	and.w	r3, r3, #2
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1e5      	bne.n	8009890 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	7e1b      	ldrb	r3, [r3, #24]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d108      	bne.n	80098de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	e007      	b.n	80098ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	7e5b      	ldrb	r3, [r3, #25]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d108      	bne.n	8009908 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009904:	601a      	str	r2, [r3, #0]
 8009906:	e007      	b.n	8009918 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009916:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	7e9b      	ldrb	r3, [r3, #26]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d108      	bne.n	8009932 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f042 0220 	orr.w	r2, r2, #32
 800992e:	601a      	str	r2, [r3, #0]
 8009930:	e007      	b.n	8009942 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f022 0220 	bic.w	r2, r2, #32
 8009940:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	7edb      	ldrb	r3, [r3, #27]
 8009946:	2b01      	cmp	r3, #1
 8009948:	d108      	bne.n	800995c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f022 0210 	bic.w	r2, r2, #16
 8009958:	601a      	str	r2, [r3, #0]
 800995a:	e007      	b.n	800996c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f042 0210 	orr.w	r2, r2, #16
 800996a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	7f1b      	ldrb	r3, [r3, #28]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d108      	bne.n	8009986 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f042 0208 	orr.w	r2, r2, #8
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	e007      	b.n	8009996 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f022 0208 	bic.w	r2, r2, #8
 8009994:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	7f5b      	ldrb	r3, [r3, #29]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d108      	bne.n	80099b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f042 0204 	orr.w	r2, r2, #4
 80099ac:	601a      	str	r2, [r3, #0]
 80099ae:	e007      	b.n	80099c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f022 0204 	bic.w	r2, r2, #4
 80099be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	689a      	ldr	r2, [r3, #8]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	431a      	orrs	r2, r3
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	431a      	orrs	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	695b      	ldr	r3, [r3, #20]
 80099d4:	ea42 0103 	orr.w	r1, r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	1e5a      	subs	r2, r3, #1
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	430a      	orrs	r2, r1
 80099e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
	...

08009a00 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b087      	sub	sp, #28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a16:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8009a18:	7cfb      	ldrb	r3, [r7, #19]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d003      	beq.n	8009a26 <HAL_CAN_ConfigFilter+0x26>
 8009a1e:	7cfb      	ldrb	r3, [r7, #19]
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	f040 80c7 	bne.w	8009bb4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a69      	ldr	r2, [pc, #420]	; (8009bd0 <HAL_CAN_ConfigFilter+0x1d0>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d001      	beq.n	8009a34 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8009a30:	4b68      	ldr	r3, [pc, #416]	; (8009bd4 <HAL_CAN_ConfigFilter+0x1d4>)
 8009a32:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a3a:	f043 0201 	orr.w	r2, r3, #1
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	4a63      	ldr	r2, [pc, #396]	; (8009bd4 <HAL_CAN_ConfigFilter+0x1d4>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d111      	bne.n	8009a70 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a52:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a66:	021b      	lsls	r3, r3, #8
 8009a68:	431a      	orrs	r2, r3
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	695b      	ldr	r3, [r3, #20]
 8009a74:	f003 031f 	and.w	r3, r3, #31
 8009a78:	2201      	movs	r2, #1
 8009a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a7e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	43db      	mvns	r3, r3
 8009a8a:	401a      	ands	r2, r3
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	69db      	ldr	r3, [r3, #28]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d123      	bne.n	8009ae2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	43db      	mvns	r3, r3
 8009aa4:	401a      	ands	r2, r3
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009ab8:	683a      	ldr	r2, [r7, #0]
 8009aba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009abc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	3248      	adds	r2, #72	; 0x48
 8009ac2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009ad6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009ad8:	6979      	ldr	r1, [r7, #20]
 8009ada:	3348      	adds	r3, #72	; 0x48
 8009adc:	00db      	lsls	r3, r3, #3
 8009ade:	440b      	add	r3, r1
 8009ae0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	69db      	ldr	r3, [r3, #28]
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d122      	bne.n	8009b30 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	431a      	orrs	r2, r3
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009b06:	683a      	ldr	r2, [r7, #0]
 8009b08:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009b0a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	3248      	adds	r2, #72	; 0x48
 8009b10:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009b24:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009b26:	6979      	ldr	r1, [r7, #20]
 8009b28:	3348      	adds	r3, #72	; 0x48
 8009b2a:	00db      	lsls	r3, r3, #3
 8009b2c:	440b      	add	r3, r1
 8009b2e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d109      	bne.n	8009b4c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	43db      	mvns	r3, r3
 8009b42:	401a      	ands	r2, r3
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8009b4a:	e007      	b.n	8009b5c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	431a      	orrs	r2, r3
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	691b      	ldr	r3, [r3, #16]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d109      	bne.n	8009b78 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	43db      	mvns	r3, r3
 8009b6e:	401a      	ands	r2, r3
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009b76:	e007      	b.n	8009b88 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	431a      	orrs	r2, r3
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	6a1b      	ldr	r3, [r3, #32]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d107      	bne.n	8009ba0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	431a      	orrs	r2, r3
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009ba6:	f023 0201 	bic.w	r2, r3, #1
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	e006      	b.n	8009bc2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
  }
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	371c      	adds	r7, #28
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	40003400 	.word	0x40003400
 8009bd4:	40006400 	.word	0x40006400

08009bd8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d12e      	bne.n	8009c4a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2202      	movs	r2, #2
 8009bf0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f022 0201 	bic.w	r2, r2, #1
 8009c02:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009c04:	f7ff fdd0 	bl	80097a8 <HAL_GetTick>
 8009c08:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009c0a:	e012      	b.n	8009c32 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009c0c:	f7ff fdcc 	bl	80097a8 <HAL_GetTick>
 8009c10:	4602      	mov	r2, r0
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	2b0a      	cmp	r3, #10
 8009c18:	d90b      	bls.n	8009c32 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2205      	movs	r2, #5
 8009c2a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e012      	b.n	8009c58 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	f003 0301 	and.w	r3, r3, #1
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1e5      	bne.n	8009c0c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	e006      	b.n	8009c58 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
  }
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	d133      	bne.n	8009cdc <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f042 0201 	orr.w	r2, r2, #1
 8009c82:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009c84:	f7ff fd90 	bl	80097a8 <HAL_GetTick>
 8009c88:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009c8a:	e012      	b.n	8009cb2 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009c8c:	f7ff fd8c 	bl	80097a8 <HAL_GetTick>
 8009c90:	4602      	mov	r2, r0
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	2b0a      	cmp	r3, #10
 8009c98:	d90b      	bls.n	8009cb2 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2205      	movs	r2, #5
 8009caa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e01b      	b.n	8009cea <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	f003 0301 	and.w	r3, r3, #1
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d0e5      	beq.n	8009c8c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f022 0202 	bic.w	r2, r2, #2
 8009cce:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	e006      	b.n	8009cea <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
  }
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8009cf2:	b480      	push	{r7}
 8009cf4:	b089      	sub	sp, #36	; 0x24
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	60f8      	str	r0, [r7, #12]
 8009cfa:	60b9      	str	r1, [r7, #8]
 8009cfc:	607a      	str	r2, [r7, #4]
 8009cfe:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d06:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009d10:	7ffb      	ldrb	r3, [r7, #31]
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d003      	beq.n	8009d1e <HAL_CAN_AddTxMessage+0x2c>
 8009d16:	7ffb      	ldrb	r3, [r7, #31]
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	f040 80ad 	bne.w	8009e78 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d10a      	bne.n	8009d3e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d105      	bne.n	8009d3e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f000 8095 	beq.w	8009e68 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	0e1b      	lsrs	r3, r3, #24
 8009d42:	f003 0303 	and.w	r3, r3, #3
 8009d46:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8009d48:	2201      	movs	r2, #1
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	409a      	lsls	r2, r3
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10d      	bne.n	8009d76 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009d64:	68f9      	ldr	r1, [r7, #12]
 8009d66:	6809      	ldr	r1, [r1, #0]
 8009d68:	431a      	orrs	r2, r3
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	3318      	adds	r3, #24
 8009d6e:	011b      	lsls	r3, r3, #4
 8009d70:	440b      	add	r3, r1
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	e00f      	b.n	8009d96 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009d80:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009d86:	68f9      	ldr	r1, [r7, #12]
 8009d88:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8009d8a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	3318      	adds	r3, #24
 8009d90:	011b      	lsls	r3, r3, #4
 8009d92:	440b      	add	r3, r1
 8009d94:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6819      	ldr	r1, [r3, #0]
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	691a      	ldr	r2, [r3, #16]
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	3318      	adds	r3, #24
 8009da2:	011b      	lsls	r3, r3, #4
 8009da4:	440b      	add	r3, r1
 8009da6:	3304      	adds	r3, #4
 8009da8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	7d1b      	ldrb	r3, [r3, #20]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d111      	bne.n	8009dd6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	3318      	adds	r3, #24
 8009dba:	011b      	lsls	r3, r3, #4
 8009dbc:	4413      	add	r3, r2
 8009dbe:	3304      	adds	r3, #4
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	6811      	ldr	r1, [r2, #0]
 8009dc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	3318      	adds	r3, #24
 8009dce:	011b      	lsls	r3, r3, #4
 8009dd0:	440b      	add	r3, r1
 8009dd2:	3304      	adds	r3, #4
 8009dd4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	3307      	adds	r3, #7
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	061a      	lsls	r2, r3, #24
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	3306      	adds	r3, #6
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	041b      	lsls	r3, r3, #16
 8009de6:	431a      	orrs	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	3305      	adds	r3, #5
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	021b      	lsls	r3, r3, #8
 8009df0:	4313      	orrs	r3, r2
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	3204      	adds	r2, #4
 8009df6:	7812      	ldrb	r2, [r2, #0]
 8009df8:	4610      	mov	r0, r2
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	6811      	ldr	r1, [r2, #0]
 8009dfe:	ea43 0200 	orr.w	r2, r3, r0
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	011b      	lsls	r3, r3, #4
 8009e06:	440b      	add	r3, r1
 8009e08:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8009e0c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	3303      	adds	r3, #3
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	061a      	lsls	r2, r3, #24
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	3302      	adds	r3, #2
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	041b      	lsls	r3, r3, #16
 8009e1e:	431a      	orrs	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	3301      	adds	r3, #1
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	021b      	lsls	r3, r3, #8
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	7812      	ldrb	r2, [r2, #0]
 8009e2e:	4610      	mov	r0, r2
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	6811      	ldr	r1, [r2, #0]
 8009e34:	ea43 0200 	orr.w	r2, r3, r0
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	011b      	lsls	r3, r3, #4
 8009e3c:	440b      	add	r3, r1
 8009e3e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009e42:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	3318      	adds	r3, #24
 8009e4c:	011b      	lsls	r3, r3, #4
 8009e4e:	4413      	add	r3, r2
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68fa      	ldr	r2, [r7, #12]
 8009e54:	6811      	ldr	r1, [r2, #0]
 8009e56:	f043 0201 	orr.w	r2, r3, #1
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	3318      	adds	r3, #24
 8009e5e:	011b      	lsls	r3, r3, #4
 8009e60:	440b      	add	r3, r1
 8009e62:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8009e64:	2300      	movs	r3, #0
 8009e66:	e00e      	b.n	8009e86 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	e006      	b.n	8009e86 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
  }
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3724      	adds	r7, #36	; 0x24
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8009e92:	b480      	push	{r7}
 8009e94:	b085      	sub	sp, #20
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ea4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8009ea6:	7afb      	ldrb	r3, [r7, #11]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d002      	beq.n	8009eb2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8009eac:	7afb      	ldrb	r3, [r7, #11]
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d11d      	bne.n	8009eee <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d002      	beq.n	8009ec6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d002      	beq.n	8009eee <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	3301      	adds	r3, #1
 8009eec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8009eee:	68fb      	ldr	r3, [r7, #12]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3714      	adds	r7, #20
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009efc:	b480      	push	{r7}
 8009efe:	b087      	sub	sp, #28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
 8009f08:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f10:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009f12:	7dfb      	ldrb	r3, [r7, #23]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d003      	beq.n	8009f20 <HAL_CAN_GetRxMessage+0x24>
 8009f18:	7dfb      	ldrb	r3, [r7, #23]
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	f040 8103 	bne.w	800a126 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d10e      	bne.n	8009f44 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	f003 0303 	and.w	r3, r3, #3
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d116      	bne.n	8009f62 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f38:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	e0f7      	b.n	800a134 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	f003 0303 	and.w	r3, r3, #3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d107      	bne.n	8009f62 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e0e8      	b.n	800a134 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	331b      	adds	r3, #27
 8009f6a:	011b      	lsls	r3, r3, #4
 8009f6c:	4413      	add	r3, r2
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0204 	and.w	r2, r3, #4
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10c      	bne.n	8009f9a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	331b      	adds	r3, #27
 8009f88:	011b      	lsls	r3, r3, #4
 8009f8a:	4413      	add	r3, r2
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	0d5b      	lsrs	r3, r3, #21
 8009f90:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	601a      	str	r2, [r3, #0]
 8009f98:	e00b      	b.n	8009fb2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	331b      	adds	r3, #27
 8009fa2:	011b      	lsls	r3, r3, #4
 8009fa4:	4413      	add	r3, r2
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	08db      	lsrs	r3, r3, #3
 8009faa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	331b      	adds	r3, #27
 8009fba:	011b      	lsls	r3, r3, #4
 8009fbc:	4413      	add	r3, r2
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f003 0202 	and.w	r2, r3, #2
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	331b      	adds	r3, #27
 8009fd0:	011b      	lsls	r3, r3, #4
 8009fd2:	4413      	add	r3, r2
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f003 0308 	and.w	r3, r3, #8
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d003      	beq.n	8009fe8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2208      	movs	r2, #8
 8009fe4:	611a      	str	r2, [r3, #16]
 8009fe6:	e00b      	b.n	800a000 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	331b      	adds	r3, #27
 8009ff0:	011b      	lsls	r3, r3, #4
 8009ff2:	4413      	add	r3, r2
 8009ff4:	3304      	adds	r3, #4
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 020f 	and.w	r2, r3, #15
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	331b      	adds	r3, #27
 800a008:	011b      	lsls	r3, r3, #4
 800a00a:	4413      	add	r3, r2
 800a00c:	3304      	adds	r3, #4
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	0a1b      	lsrs	r3, r3, #8
 800a012:	b2da      	uxtb	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	331b      	adds	r3, #27
 800a020:	011b      	lsls	r3, r3, #4
 800a022:	4413      	add	r3, r2
 800a024:	3304      	adds	r3, #4
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	0c1b      	lsrs	r3, r3, #16
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	011b      	lsls	r3, r3, #4
 800a038:	4413      	add	r3, r2
 800a03a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	b2da      	uxtb	r2, r3
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	011b      	lsls	r3, r3, #4
 800a04e:	4413      	add	r3, r2
 800a050:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	0a1a      	lsrs	r2, r3, #8
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	3301      	adds	r3, #1
 800a05c:	b2d2      	uxtb	r2, r2
 800a05e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	011b      	lsls	r3, r3, #4
 800a068:	4413      	add	r3, r2
 800a06a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	0c1a      	lsrs	r2, r3, #16
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	3302      	adds	r3, #2
 800a076:	b2d2      	uxtb	r2, r2
 800a078:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	011b      	lsls	r3, r3, #4
 800a082:	4413      	add	r3, r2
 800a084:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	0e1a      	lsrs	r2, r3, #24
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	3303      	adds	r3, #3
 800a090:	b2d2      	uxtb	r2, r2
 800a092:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	011b      	lsls	r3, r3, #4
 800a09c:	4413      	add	r3, r2
 800a09e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	b2d2      	uxtb	r2, r2
 800a0aa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	011b      	lsls	r3, r3, #4
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	0a1a      	lsrs	r2, r3, #8
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	3305      	adds	r3, #5
 800a0c2:	b2d2      	uxtb	r2, r2
 800a0c4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	011b      	lsls	r3, r3, #4
 800a0ce:	4413      	add	r3, r2
 800a0d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	0c1a      	lsrs	r2, r3, #16
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	3306      	adds	r3, #6
 800a0dc:	b2d2      	uxtb	r2, r2
 800a0de:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	011b      	lsls	r3, r3, #4
 800a0e8:	4413      	add	r3, r2
 800a0ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	0e1a      	lsrs	r2, r3, #24
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	3307      	adds	r3, #7
 800a0f6:	b2d2      	uxtb	r2, r2
 800a0f8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d108      	bne.n	800a112 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68da      	ldr	r2, [r3, #12]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f042 0220 	orr.w	r2, r2, #32
 800a10e:	60da      	str	r2, [r3, #12]
 800a110:	e007      	b.n	800a122 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	691a      	ldr	r2, [r3, #16]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f042 0220 	orr.w	r2, r2, #32
 800a120:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800a122:	2300      	movs	r3, #0
 800a124:	e006      	b.n	800a134 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a132:	2301      	movs	r3, #1
  }
}
 800a134:	4618      	mov	r0, r3
 800a136:	371c      	adds	r7, #28
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800a140:	b480      	push	{r7}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a150:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800a152:	7bfb      	ldrb	r3, [r7, #15]
 800a154:	2b01      	cmp	r3, #1
 800a156:	d002      	beq.n	800a15e <HAL_CAN_ActivateNotification+0x1e>
 800a158:	7bfb      	ldrb	r3, [r7, #15]
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	d109      	bne.n	800a172 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6959      	ldr	r1, [r3, #20]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	683a      	ldr	r2, [r7, #0]
 800a16a:	430a      	orrs	r2, r1
 800a16c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	e006      	b.n	800a180 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a176:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
  }
}
 800a180:	4618      	mov	r0, r3
 800a182:	3714      	adds	r7, #20
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08a      	sub	sp, #40	; 0x28
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800a194:	2300      	movs	r3, #0
 800a196:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	695b      	ldr	r3, [r3, #20]
 800a19e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	699b      	ldr	r3, [r3, #24]
 800a1c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800a1c8:	6a3b      	ldr	r3, [r7, #32]
 800a1ca:	f003 0301 	and.w	r3, r3, #1
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d07c      	beq.n	800a2cc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	f003 0301 	and.w	r3, r3, #1
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d023      	beq.n	800a224 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	f003 0302 	and.w	r3, r3, #2
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d003      	beq.n	800a1f6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7fe f9d0 	bl	8008594 <HAL_CAN_TxMailbox0CompleteCallback>
 800a1f4:	e016      	b.n	800a224 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	f003 0304 	and.w	r3, r3, #4
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d004      	beq.n	800a20a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a202:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a206:	627b      	str	r3, [r7, #36]	; 0x24
 800a208:	e00c      	b.n	800a224 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	f003 0308 	and.w	r3, r3, #8
 800a210:	2b00      	cmp	r3, #0
 800a212:	d004      	beq.n	800a21e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800a214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a216:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a21a:	627b      	str	r3, [r7, #36]	; 0x24
 800a21c:	e002      	b.n	800a224 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f96b 	bl	800a4fa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d024      	beq.n	800a278 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a236:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d003      	beq.n	800a24a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7fe f9b2 	bl	80085ac <HAL_CAN_TxMailbox1CompleteCallback>
 800a248:	e016      	b.n	800a278 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a250:	2b00      	cmp	r3, #0
 800a252:	d004      	beq.n	800a25e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a25a:	627b      	str	r3, [r7, #36]	; 0x24
 800a25c:	e00c      	b.n	800a278 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a264:	2b00      	cmp	r3, #0
 800a266:	d004      	beq.n	800a272 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800a268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a26e:	627b      	str	r3, [r7, #36]	; 0x24
 800a270:	e002      	b.n	800a278 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f94b 	bl	800a50e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d024      	beq.n	800a2cc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a28a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a292:	2b00      	cmp	r3, #0
 800a294:	d003      	beq.n	800a29e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f7fe f994 	bl	80085c4 <HAL_CAN_TxMailbox2CompleteCallback>
 800a29c:	e016      	b.n	800a2cc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d004      	beq.n	800a2b2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800a2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2ae:	627b      	str	r3, [r7, #36]	; 0x24
 800a2b0:	e00c      	b.n	800a2cc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d004      	beq.n	800a2c6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2c2:	627b      	str	r3, [r7, #36]	; 0x24
 800a2c4:	e002      	b.n	800a2cc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 f92b 	bl	800a522 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	f003 0308 	and.w	r3, r3, #8
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00c      	beq.n	800a2f0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	f003 0310 	and.w	r3, r3, #16
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d007      	beq.n	800a2f0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a2e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2210      	movs	r2, #16
 800a2ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	f003 0304 	and.w	r3, r3, #4
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00b      	beq.n	800a312 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	f003 0308 	and.w	r3, r3, #8
 800a300:	2b00      	cmp	r3, #0
 800a302:	d006      	beq.n	800a312 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2208      	movs	r2, #8
 800a30a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 f912 	bl	800a536 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800a312:	6a3b      	ldr	r3, [r7, #32]
 800a314:	f003 0302 	and.w	r3, r3, #2
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d009      	beq.n	800a330 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	f003 0303 	and.w	r3, r3, #3
 800a326:	2b00      	cmp	r3, #0
 800a328:	d002      	beq.n	800a330 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f7fe f8b8 	bl	80084a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800a330:	6a3b      	ldr	r3, [r7, #32]
 800a332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00c      	beq.n	800a354 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	f003 0310 	and.w	r3, r3, #16
 800a340:	2b00      	cmp	r3, #0
 800a342:	d007      	beq.n	800a354 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a34a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2210      	movs	r2, #16
 800a352:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800a354:	6a3b      	ldr	r3, [r7, #32]
 800a356:	f003 0320 	and.w	r3, r3, #32
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00b      	beq.n	800a376 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	f003 0308 	and.w	r3, r3, #8
 800a364:	2b00      	cmp	r3, #0
 800a366:	d006      	beq.n	800a376 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2208      	movs	r2, #8
 800a36e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 f8ea 	bl	800a54a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800a376:	6a3b      	ldr	r3, [r7, #32]
 800a378:	f003 0310 	and.w	r3, r3, #16
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d009      	beq.n	800a394 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	f003 0303 	and.w	r3, r3, #3
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d002      	beq.n	800a394 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7fe f893 	bl	80084ba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800a394:	6a3b      	ldr	r3, [r7, #32]
 800a396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00b      	beq.n	800a3b6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	f003 0310 	and.w	r3, r3, #16
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d006      	beq.n	800a3b6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2210      	movs	r2, #16
 800a3ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f8d4 	bl	800a55e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800a3b6:	6a3b      	ldr	r3, [r7, #32]
 800a3b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00b      	beq.n	800a3d8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	f003 0308 	and.w	r3, r3, #8
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d006      	beq.n	800a3d8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2208      	movs	r2, #8
 800a3d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 f8cd 	bl	800a572 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800a3d8:	6a3b      	ldr	r3, [r7, #32]
 800a3da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d07b      	beq.n	800a4da <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	f003 0304 	and.w	r3, r3, #4
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d072      	beq.n	800a4d2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800a3ec:	6a3b      	ldr	r3, [r7, #32]
 800a3ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d008      	beq.n	800a408 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d003      	beq.n	800a408 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800a400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a402:	f043 0301 	orr.w	r3, r3, #1
 800a406:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a408:	6a3b      	ldr	r3, [r7, #32]
 800a40a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d008      	beq.n	800a424 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d003      	beq.n	800a424 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	f043 0302 	orr.w	r3, r3, #2
 800a422:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a424:	6a3b      	ldr	r3, [r7, #32]
 800a426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d008      	beq.n	800a440 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a434:	2b00      	cmp	r3, #0
 800a436:	d003      	beq.n	800a440 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43a:	f043 0304 	orr.w	r3, r3, #4
 800a43e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a440:	6a3b      	ldr	r3, [r7, #32]
 800a442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a446:	2b00      	cmp	r3, #0
 800a448:	d043      	beq.n	800a4d2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a450:	2b00      	cmp	r3, #0
 800a452:	d03e      	beq.n	800a4d2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a45a:	2b60      	cmp	r3, #96	; 0x60
 800a45c:	d02b      	beq.n	800a4b6 <HAL_CAN_IRQHandler+0x32a>
 800a45e:	2b60      	cmp	r3, #96	; 0x60
 800a460:	d82e      	bhi.n	800a4c0 <HAL_CAN_IRQHandler+0x334>
 800a462:	2b50      	cmp	r3, #80	; 0x50
 800a464:	d022      	beq.n	800a4ac <HAL_CAN_IRQHandler+0x320>
 800a466:	2b50      	cmp	r3, #80	; 0x50
 800a468:	d82a      	bhi.n	800a4c0 <HAL_CAN_IRQHandler+0x334>
 800a46a:	2b40      	cmp	r3, #64	; 0x40
 800a46c:	d019      	beq.n	800a4a2 <HAL_CAN_IRQHandler+0x316>
 800a46e:	2b40      	cmp	r3, #64	; 0x40
 800a470:	d826      	bhi.n	800a4c0 <HAL_CAN_IRQHandler+0x334>
 800a472:	2b30      	cmp	r3, #48	; 0x30
 800a474:	d010      	beq.n	800a498 <HAL_CAN_IRQHandler+0x30c>
 800a476:	2b30      	cmp	r3, #48	; 0x30
 800a478:	d822      	bhi.n	800a4c0 <HAL_CAN_IRQHandler+0x334>
 800a47a:	2b10      	cmp	r3, #16
 800a47c:	d002      	beq.n	800a484 <HAL_CAN_IRQHandler+0x2f8>
 800a47e:	2b20      	cmp	r3, #32
 800a480:	d005      	beq.n	800a48e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800a482:	e01d      	b.n	800a4c0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	f043 0308 	orr.w	r3, r3, #8
 800a48a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a48c:	e019      	b.n	800a4c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800a48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a490:	f043 0310 	orr.w	r3, r3, #16
 800a494:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a496:	e014      	b.n	800a4c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800a498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49a:	f043 0320 	orr.w	r3, r3, #32
 800a49e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a4a0:	e00f      	b.n	800a4c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a4aa:	e00a      	b.n	800a4c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a4b4:	e005      	b.n	800a4c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a4be:	e000      	b.n	800a4c2 <HAL_CAN_IRQHandler+0x336>
            break;
 800a4c0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	699a      	ldr	r2, [r3, #24]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a4d0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2204      	movs	r2, #4
 800a4d8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d008      	beq.n	800a4f2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e6:	431a      	orrs	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 f84a 	bl	800a586 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800a4f2:	bf00      	nop
 800a4f4:	3728      	adds	r7, #40	; 0x28
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b083      	sub	sp, #12
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800a502:	bf00      	nop
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a50e:	b480      	push	{r7}
 800a510:	b083      	sub	sp, #12
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800a516:	bf00      	nop
 800a518:	370c      	adds	r7, #12
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a522:	b480      	push	{r7}
 800a524:	b083      	sub	sp, #12
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800a52a:	bf00      	nop
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800a536:	b480      	push	{r7}
 800a538:	b083      	sub	sp, #12
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800a53e:	bf00      	nop
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800a54a:	b480      	push	{r7}
 800a54c:	b083      	sub	sp, #12
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800a552:	bf00      	nop
 800a554:	370c      	adds	r7, #12
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800a55e:	b480      	push	{r7}
 800a560:	b083      	sub	sp, #12
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800a566:	bf00      	nop
 800a568:	370c      	adds	r7, #12
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800a572:	b480      	push	{r7}
 800a574:	b083      	sub	sp, #12
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800a57a:	bf00      	nop
 800a57c:	370c      	adds	r7, #12
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr

0800a586 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800a586:	b480      	push	{r7}
 800a588:	b083      	sub	sp, #12
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800a58e:	bf00      	nop
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
	...

0800a59c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f003 0307 	and.w	r3, r3, #7
 800a5aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a5ac:	4b0b      	ldr	r3, [pc, #44]	; (800a5dc <__NVIC_SetPriorityGrouping+0x40>)
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a5b2:	68ba      	ldr	r2, [r7, #8]
 800a5b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a5c4:	4b06      	ldr	r3, [pc, #24]	; (800a5e0 <__NVIC_SetPriorityGrouping+0x44>)
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a5ca:	4a04      	ldr	r2, [pc, #16]	; (800a5dc <__NVIC_SetPriorityGrouping+0x40>)
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	60d3      	str	r3, [r2, #12]
}
 800a5d0:	bf00      	nop
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr
 800a5dc:	e000ed00 	.word	0xe000ed00
 800a5e0:	05fa0000 	.word	0x05fa0000

0800a5e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a5e8:	4b04      	ldr	r3, [pc, #16]	; (800a5fc <__NVIC_GetPriorityGrouping+0x18>)
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	0a1b      	lsrs	r3, r3, #8
 800a5ee:	f003 0307 	and.w	r3, r3, #7
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr
 800a5fc:	e000ed00 	.word	0xe000ed00

0800a600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	4603      	mov	r3, r0
 800a608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a60a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	db0b      	blt.n	800a62a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a612:	79fb      	ldrb	r3, [r7, #7]
 800a614:	f003 021f 	and.w	r2, r3, #31
 800a618:	4907      	ldr	r1, [pc, #28]	; (800a638 <__NVIC_EnableIRQ+0x38>)
 800a61a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a61e:	095b      	lsrs	r3, r3, #5
 800a620:	2001      	movs	r0, #1
 800a622:	fa00 f202 	lsl.w	r2, r0, r2
 800a626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a62a:	bf00      	nop
 800a62c:	370c      	adds	r7, #12
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop
 800a638:	e000e100 	.word	0xe000e100

0800a63c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	4603      	mov	r3, r0
 800a644:	6039      	str	r1, [r7, #0]
 800a646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	db0a      	blt.n	800a666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	b2da      	uxtb	r2, r3
 800a654:	490c      	ldr	r1, [pc, #48]	; (800a688 <__NVIC_SetPriority+0x4c>)
 800a656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a65a:	0112      	lsls	r2, r2, #4
 800a65c:	b2d2      	uxtb	r2, r2
 800a65e:	440b      	add	r3, r1
 800a660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a664:	e00a      	b.n	800a67c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	b2da      	uxtb	r2, r3
 800a66a:	4908      	ldr	r1, [pc, #32]	; (800a68c <__NVIC_SetPriority+0x50>)
 800a66c:	79fb      	ldrb	r3, [r7, #7]
 800a66e:	f003 030f 	and.w	r3, r3, #15
 800a672:	3b04      	subs	r3, #4
 800a674:	0112      	lsls	r2, r2, #4
 800a676:	b2d2      	uxtb	r2, r2
 800a678:	440b      	add	r3, r1
 800a67a:	761a      	strb	r2, [r3, #24]
}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr
 800a688:	e000e100 	.word	0xe000e100
 800a68c:	e000ed00 	.word	0xe000ed00

0800a690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a690:	b480      	push	{r7}
 800a692:	b089      	sub	sp, #36	; 0x24
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f003 0307 	and.w	r3, r3, #7
 800a6a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	f1c3 0307 	rsb	r3, r3, #7
 800a6aa:	2b04      	cmp	r3, #4
 800a6ac:	bf28      	it	cs
 800a6ae:	2304      	movcs	r3, #4
 800a6b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	3304      	adds	r3, #4
 800a6b6:	2b06      	cmp	r3, #6
 800a6b8:	d902      	bls.n	800a6c0 <NVIC_EncodePriority+0x30>
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	3b03      	subs	r3, #3
 800a6be:	e000      	b.n	800a6c2 <NVIC_EncodePriority+0x32>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ce:	43da      	mvns	r2, r3
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	401a      	ands	r2, r3
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a6d8:	f04f 31ff 	mov.w	r1, #4294967295
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	fa01 f303 	lsl.w	r3, r1, r3
 800a6e2:	43d9      	mvns	r1, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a6e8:	4313      	orrs	r3, r2
         );
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3724      	adds	r7, #36	; 0x24
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
	...

0800a6f8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a6fc:	f3bf 8f4f 	dsb	sy
}
 800a700:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a702:	4b06      	ldr	r3, [pc, #24]	; (800a71c <__NVIC_SystemReset+0x24>)
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a70a:	4904      	ldr	r1, [pc, #16]	; (800a71c <__NVIC_SystemReset+0x24>)
 800a70c:	4b04      	ldr	r3, [pc, #16]	; (800a720 <__NVIC_SystemReset+0x28>)
 800a70e:	4313      	orrs	r3, r2
 800a710:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a712:	f3bf 8f4f 	dsb	sy
}
 800a716:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a718:	bf00      	nop
 800a71a:	e7fd      	b.n	800a718 <__NVIC_SystemReset+0x20>
 800a71c:	e000ed00 	.word	0xe000ed00
 800a720:	05fa0004 	.word	0x05fa0004

0800a724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	3b01      	subs	r3, #1
 800a730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a734:	d301      	bcc.n	800a73a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a736:	2301      	movs	r3, #1
 800a738:	e00f      	b.n	800a75a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a73a:	4a0a      	ldr	r2, [pc, #40]	; (800a764 <SysTick_Config+0x40>)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	3b01      	subs	r3, #1
 800a740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a742:	210f      	movs	r1, #15
 800a744:	f04f 30ff 	mov.w	r0, #4294967295
 800a748:	f7ff ff78 	bl	800a63c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a74c:	4b05      	ldr	r3, [pc, #20]	; (800a764 <SysTick_Config+0x40>)
 800a74e:	2200      	movs	r2, #0
 800a750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a752:	4b04      	ldr	r3, [pc, #16]	; (800a764 <SysTick_Config+0x40>)
 800a754:	2207      	movs	r2, #7
 800a756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3708      	adds	r7, #8
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	e000e010 	.word	0xe000e010

0800a768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f7ff ff13 	bl	800a59c <__NVIC_SetPriorityGrouping>
}
 800a776:	bf00      	nop
 800a778:	3708      	adds	r7, #8
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a77e:	b580      	push	{r7, lr}
 800a780:	b086      	sub	sp, #24
 800a782:	af00      	add	r7, sp, #0
 800a784:	4603      	mov	r3, r0
 800a786:	60b9      	str	r1, [r7, #8]
 800a788:	607a      	str	r2, [r7, #4]
 800a78a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a78c:	2300      	movs	r3, #0
 800a78e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a790:	f7ff ff28 	bl	800a5e4 <__NVIC_GetPriorityGrouping>
 800a794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	68b9      	ldr	r1, [r7, #8]
 800a79a:	6978      	ldr	r0, [r7, #20]
 800a79c:	f7ff ff78 	bl	800a690 <NVIC_EncodePriority>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7a6:	4611      	mov	r1, r2
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7ff ff47 	bl	800a63c <__NVIC_SetPriority>
}
 800a7ae:	bf00      	nop
 800a7b0:	3718      	adds	r7, #24
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b082      	sub	sp, #8
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	4603      	mov	r3, r0
 800a7be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a7c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7ff ff1b 	bl	800a600 <__NVIC_EnableIRQ>
}
 800a7ca:	bf00      	nop
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800a7d6:	f7ff ff8f 	bl	800a6f8 <__NVIC_SystemReset>

0800a7da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b082      	sub	sp, #8
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7ff ff9e 	bl	800a724 <SysTick_Config>
 800a7e8:	4603      	mov	r3, r0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
	...

0800a7f4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800a7f8:	f3bf 8f5f 	dmb	sy
}
 800a7fc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800a7fe:	4b07      	ldr	r3, [pc, #28]	; (800a81c <HAL_MPU_Disable+0x28>)
 800a800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a802:	4a06      	ldr	r2, [pc, #24]	; (800a81c <HAL_MPU_Disable+0x28>)
 800a804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a808:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800a80a:	4b05      	ldr	r3, [pc, #20]	; (800a820 <HAL_MPU_Disable+0x2c>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	605a      	str	r2, [r3, #4]
}
 800a810:	bf00      	nop
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	e000ed00 	.word	0xe000ed00
 800a820:	e000ed90 	.word	0xe000ed90

0800a824 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800a82c:	4a0b      	ldr	r2, [pc, #44]	; (800a85c <HAL_MPU_Enable+0x38>)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f043 0301 	orr.w	r3, r3, #1
 800a834:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800a836:	4b0a      	ldr	r3, [pc, #40]	; (800a860 <HAL_MPU_Enable+0x3c>)
 800a838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83a:	4a09      	ldr	r2, [pc, #36]	; (800a860 <HAL_MPU_Enable+0x3c>)
 800a83c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a840:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800a842:	f3bf 8f4f 	dsb	sy
}
 800a846:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a848:	f3bf 8f6f 	isb	sy
}
 800a84c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800a84e:	bf00      	nop
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	e000ed90 	.word	0xe000ed90
 800a860:	e000ed00 	.word	0xe000ed00

0800a864 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	785a      	ldrb	r2, [r3, #1]
 800a870:	4b1b      	ldr	r3, [pc, #108]	; (800a8e0 <HAL_MPU_ConfigRegion+0x7c>)
 800a872:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800a874:	4b1a      	ldr	r3, [pc, #104]	; (800a8e0 <HAL_MPU_ConfigRegion+0x7c>)
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	4a19      	ldr	r2, [pc, #100]	; (800a8e0 <HAL_MPU_ConfigRegion+0x7c>)
 800a87a:	f023 0301 	bic.w	r3, r3, #1
 800a87e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800a880:	4a17      	ldr	r2, [pc, #92]	; (800a8e0 <HAL_MPU_ConfigRegion+0x7c>)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	7b1b      	ldrb	r3, [r3, #12]
 800a88c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	7adb      	ldrb	r3, [r3, #11]
 800a892:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a894:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	7a9b      	ldrb	r3, [r3, #10]
 800a89a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a89c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	7b5b      	ldrb	r3, [r3, #13]
 800a8a2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a8a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	7b9b      	ldrb	r3, [r3, #14]
 800a8aa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a8ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	7bdb      	ldrb	r3, [r3, #15]
 800a8b2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a8b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	7a5b      	ldrb	r3, [r3, #9]
 800a8ba:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a8bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	7a1b      	ldrb	r3, [r3, #8]
 800a8c2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a8c4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	7812      	ldrb	r2, [r2, #0]
 800a8ca:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a8cc:	4a04      	ldr	r2, [pc, #16]	; (800a8e0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a8ce:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a8d0:	6113      	str	r3, [r2, #16]
}
 800a8d2:	bf00      	nop
 800a8d4:	370c      	adds	r7, #12
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	e000ed90 	.word	0xe000ed90

0800a8e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b089      	sub	sp, #36	; 0x24
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800a8fe:	2300      	movs	r3, #0
 800a900:	61fb      	str	r3, [r7, #28]
 800a902:	e175      	b.n	800abf0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a904:	2201      	movs	r2, #1
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	fa02 f303 	lsl.w	r3, r2, r3
 800a90c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	697a      	ldr	r2, [r7, #20]
 800a914:	4013      	ands	r3, r2
 800a916:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800a918:	693a      	ldr	r2, [r7, #16]
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	f040 8164 	bne.w	800abea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	f003 0303 	and.w	r3, r3, #3
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d005      	beq.n	800a93a <HAL_GPIO_Init+0x56>
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	f003 0303 	and.w	r3, r3, #3
 800a936:	2b02      	cmp	r3, #2
 800a938:	d130      	bne.n	800a99c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	005b      	lsls	r3, r3, #1
 800a944:	2203      	movs	r2, #3
 800a946:	fa02 f303 	lsl.w	r3, r2, r3
 800a94a:	43db      	mvns	r3, r3
 800a94c:	69ba      	ldr	r2, [r7, #24]
 800a94e:	4013      	ands	r3, r2
 800a950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	68da      	ldr	r2, [r3, #12]
 800a956:	69fb      	ldr	r3, [r7, #28]
 800a958:	005b      	lsls	r3, r3, #1
 800a95a:	fa02 f303 	lsl.w	r3, r2, r3
 800a95e:	69ba      	ldr	r2, [r7, #24]
 800a960:	4313      	orrs	r3, r2
 800a962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	69ba      	ldr	r2, [r7, #24]
 800a968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a970:	2201      	movs	r2, #1
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	fa02 f303 	lsl.w	r3, r2, r3
 800a978:	43db      	mvns	r3, r3
 800a97a:	69ba      	ldr	r2, [r7, #24]
 800a97c:	4013      	ands	r3, r2
 800a97e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	091b      	lsrs	r3, r3, #4
 800a986:	f003 0201 	and.w	r2, r3, #1
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	fa02 f303 	lsl.w	r3, r2, r3
 800a990:	69ba      	ldr	r2, [r7, #24]
 800a992:	4313      	orrs	r3, r2
 800a994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	69ba      	ldr	r2, [r7, #24]
 800a99a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	f003 0303 	and.w	r3, r3, #3
 800a9a4:	2b03      	cmp	r3, #3
 800a9a6:	d017      	beq.n	800a9d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	005b      	lsls	r3, r3, #1
 800a9b2:	2203      	movs	r2, #3
 800a9b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b8:	43db      	mvns	r3, r3
 800a9ba:	69ba      	ldr	r2, [r7, #24]
 800a9bc:	4013      	ands	r3, r2
 800a9be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	689a      	ldr	r2, [r3, #8]
 800a9c4:	69fb      	ldr	r3, [r7, #28]
 800a9c6:	005b      	lsls	r3, r3, #1
 800a9c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9cc:	69ba      	ldr	r2, [r7, #24]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	69ba      	ldr	r2, [r7, #24]
 800a9d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	f003 0303 	and.w	r3, r3, #3
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	d123      	bne.n	800aa2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	08da      	lsrs	r2, r3, #3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	3208      	adds	r2, #8
 800a9ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	f003 0307 	and.w	r3, r3, #7
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	220f      	movs	r2, #15
 800a9fc:	fa02 f303 	lsl.w	r3, r2, r3
 800aa00:	43db      	mvns	r3, r3
 800aa02:	69ba      	ldr	r2, [r7, #24]
 800aa04:	4013      	ands	r3, r2
 800aa06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	691a      	ldr	r2, [r3, #16]
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	f003 0307 	and.w	r3, r3, #7
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	fa02 f303 	lsl.w	r3, r2, r3
 800aa18:	69ba      	ldr	r2, [r7, #24]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	08da      	lsrs	r2, r3, #3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	3208      	adds	r2, #8
 800aa26:	69b9      	ldr	r1, [r7, #24]
 800aa28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	005b      	lsls	r3, r3, #1
 800aa36:	2203      	movs	r2, #3
 800aa38:	fa02 f303 	lsl.w	r3, r2, r3
 800aa3c:	43db      	mvns	r3, r3
 800aa3e:	69ba      	ldr	r2, [r7, #24]
 800aa40:	4013      	ands	r3, r2
 800aa42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	f003 0203 	and.w	r2, r3, #3
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	005b      	lsls	r3, r3, #1
 800aa50:	fa02 f303 	lsl.w	r3, r2, r3
 800aa54:	69ba      	ldr	r2, [r7, #24]
 800aa56:	4313      	orrs	r3, r2
 800aa58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	69ba      	ldr	r2, [r7, #24]
 800aa5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f000 80be 	beq.w	800abea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa6e:	4b66      	ldr	r3, [pc, #408]	; (800ac08 <HAL_GPIO_Init+0x324>)
 800aa70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa72:	4a65      	ldr	r2, [pc, #404]	; (800ac08 <HAL_GPIO_Init+0x324>)
 800aa74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa78:	6453      	str	r3, [r2, #68]	; 0x44
 800aa7a:	4b63      	ldr	r3, [pc, #396]	; (800ac08 <HAL_GPIO_Init+0x324>)
 800aa7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa82:	60fb      	str	r3, [r7, #12]
 800aa84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800aa86:	4a61      	ldr	r2, [pc, #388]	; (800ac0c <HAL_GPIO_Init+0x328>)
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	089b      	lsrs	r3, r3, #2
 800aa8c:	3302      	adds	r3, #2
 800aa8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	f003 0303 	and.w	r3, r3, #3
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	220f      	movs	r2, #15
 800aa9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa2:	43db      	mvns	r3, r3
 800aaa4:	69ba      	ldr	r2, [r7, #24]
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a58      	ldr	r2, [pc, #352]	; (800ac10 <HAL_GPIO_Init+0x32c>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d037      	beq.n	800ab22 <HAL_GPIO_Init+0x23e>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a57      	ldr	r2, [pc, #348]	; (800ac14 <HAL_GPIO_Init+0x330>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d031      	beq.n	800ab1e <HAL_GPIO_Init+0x23a>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4a56      	ldr	r2, [pc, #344]	; (800ac18 <HAL_GPIO_Init+0x334>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d02b      	beq.n	800ab1a <HAL_GPIO_Init+0x236>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4a55      	ldr	r2, [pc, #340]	; (800ac1c <HAL_GPIO_Init+0x338>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d025      	beq.n	800ab16 <HAL_GPIO_Init+0x232>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a54      	ldr	r2, [pc, #336]	; (800ac20 <HAL_GPIO_Init+0x33c>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d01f      	beq.n	800ab12 <HAL_GPIO_Init+0x22e>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a53      	ldr	r2, [pc, #332]	; (800ac24 <HAL_GPIO_Init+0x340>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d019      	beq.n	800ab0e <HAL_GPIO_Init+0x22a>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4a52      	ldr	r2, [pc, #328]	; (800ac28 <HAL_GPIO_Init+0x344>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d013      	beq.n	800ab0a <HAL_GPIO_Init+0x226>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a51      	ldr	r2, [pc, #324]	; (800ac2c <HAL_GPIO_Init+0x348>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d00d      	beq.n	800ab06 <HAL_GPIO_Init+0x222>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a50      	ldr	r2, [pc, #320]	; (800ac30 <HAL_GPIO_Init+0x34c>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d007      	beq.n	800ab02 <HAL_GPIO_Init+0x21e>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4a4f      	ldr	r2, [pc, #316]	; (800ac34 <HAL_GPIO_Init+0x350>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d101      	bne.n	800aafe <HAL_GPIO_Init+0x21a>
 800aafa:	2309      	movs	r3, #9
 800aafc:	e012      	b.n	800ab24 <HAL_GPIO_Init+0x240>
 800aafe:	230a      	movs	r3, #10
 800ab00:	e010      	b.n	800ab24 <HAL_GPIO_Init+0x240>
 800ab02:	2308      	movs	r3, #8
 800ab04:	e00e      	b.n	800ab24 <HAL_GPIO_Init+0x240>
 800ab06:	2307      	movs	r3, #7
 800ab08:	e00c      	b.n	800ab24 <HAL_GPIO_Init+0x240>
 800ab0a:	2306      	movs	r3, #6
 800ab0c:	e00a      	b.n	800ab24 <HAL_GPIO_Init+0x240>
 800ab0e:	2305      	movs	r3, #5
 800ab10:	e008      	b.n	800ab24 <HAL_GPIO_Init+0x240>
 800ab12:	2304      	movs	r3, #4
 800ab14:	e006      	b.n	800ab24 <HAL_GPIO_Init+0x240>
 800ab16:	2303      	movs	r3, #3
 800ab18:	e004      	b.n	800ab24 <HAL_GPIO_Init+0x240>
 800ab1a:	2302      	movs	r3, #2
 800ab1c:	e002      	b.n	800ab24 <HAL_GPIO_Init+0x240>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e000      	b.n	800ab24 <HAL_GPIO_Init+0x240>
 800ab22:	2300      	movs	r3, #0
 800ab24:	69fa      	ldr	r2, [r7, #28]
 800ab26:	f002 0203 	and.w	r2, r2, #3
 800ab2a:	0092      	lsls	r2, r2, #2
 800ab2c:	4093      	lsls	r3, r2
 800ab2e:	69ba      	ldr	r2, [r7, #24]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800ab34:	4935      	ldr	r1, [pc, #212]	; (800ac0c <HAL_GPIO_Init+0x328>)
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	089b      	lsrs	r3, r3, #2
 800ab3a:	3302      	adds	r3, #2
 800ab3c:	69ba      	ldr	r2, [r7, #24]
 800ab3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ab42:	4b3d      	ldr	r3, [pc, #244]	; (800ac38 <HAL_GPIO_Init+0x354>)
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	43db      	mvns	r3, r3
 800ab4c:	69ba      	ldr	r2, [r7, #24]
 800ab4e:	4013      	ands	r3, r2
 800ab50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d003      	beq.n	800ab66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800ab5e:	69ba      	ldr	r2, [r7, #24]
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ab66:	4a34      	ldr	r2, [pc, #208]	; (800ac38 <HAL_GPIO_Init+0x354>)
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ab6c:	4b32      	ldr	r3, [pc, #200]	; (800ac38 <HAL_GPIO_Init+0x354>)
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	43db      	mvns	r3, r3
 800ab76:	69ba      	ldr	r2, [r7, #24]
 800ab78:	4013      	ands	r3, r2
 800ab7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d003      	beq.n	800ab90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800ab88:	69ba      	ldr	r2, [r7, #24]
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ab90:	4a29      	ldr	r2, [pc, #164]	; (800ac38 <HAL_GPIO_Init+0x354>)
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800ab96:	4b28      	ldr	r3, [pc, #160]	; (800ac38 <HAL_GPIO_Init+0x354>)
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	43db      	mvns	r3, r3
 800aba0:	69ba      	ldr	r2, [r7, #24]
 800aba2:	4013      	ands	r3, r2
 800aba4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800abb2:	69ba      	ldr	r2, [r7, #24]
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800abba:	4a1f      	ldr	r2, [pc, #124]	; (800ac38 <HAL_GPIO_Init+0x354>)
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800abc0:	4b1d      	ldr	r3, [pc, #116]	; (800ac38 <HAL_GPIO_Init+0x354>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	43db      	mvns	r3, r3
 800abca:	69ba      	ldr	r2, [r7, #24]
 800abcc:	4013      	ands	r3, r2
 800abce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d003      	beq.n	800abe4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800abdc:	69ba      	ldr	r2, [r7, #24]
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800abe4:	4a14      	ldr	r2, [pc, #80]	; (800ac38 <HAL_GPIO_Init+0x354>)
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	3301      	adds	r3, #1
 800abee:	61fb      	str	r3, [r7, #28]
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	2b0f      	cmp	r3, #15
 800abf4:	f67f ae86 	bls.w	800a904 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800abf8:	bf00      	nop
 800abfa:	bf00      	nop
 800abfc:	3724      	adds	r7, #36	; 0x24
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	40023800 	.word	0x40023800
 800ac0c:	40013800 	.word	0x40013800
 800ac10:	40020000 	.word	0x40020000
 800ac14:	40020400 	.word	0x40020400
 800ac18:	40020800 	.word	0x40020800
 800ac1c:	40020c00 	.word	0x40020c00
 800ac20:	40021000 	.word	0x40021000
 800ac24:	40021400 	.word	0x40021400
 800ac28:	40021800 	.word	0x40021800
 800ac2c:	40021c00 	.word	0x40021c00
 800ac30:	40022000 	.word	0x40022000
 800ac34:	40022400 	.word	0x40022400
 800ac38:	40013c00 	.word	0x40013c00

0800ac3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b086      	sub	sp, #24
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800ac44:	2300      	movs	r3, #0
 800ac46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d101      	bne.n	800ac52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e29b      	b.n	800b18a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f003 0301 	and.w	r3, r3, #1
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f000 8087 	beq.w	800ad6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ac60:	4b96      	ldr	r3, [pc, #600]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	f003 030c 	and.w	r3, r3, #12
 800ac68:	2b04      	cmp	r3, #4
 800ac6a:	d00c      	beq.n	800ac86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac6c:	4b93      	ldr	r3, [pc, #588]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	f003 030c 	and.w	r3, r3, #12
 800ac74:	2b08      	cmp	r3, #8
 800ac76:	d112      	bne.n	800ac9e <HAL_RCC_OscConfig+0x62>
 800ac78:	4b90      	ldr	r3, [pc, #576]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac84:	d10b      	bne.n	800ac9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac86:	4b8d      	ldr	r3, [pc, #564]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d06c      	beq.n	800ad6c <HAL_RCC_OscConfig+0x130>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d168      	bne.n	800ad6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e275      	b.n	800b18a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aca6:	d106      	bne.n	800acb6 <HAL_RCC_OscConfig+0x7a>
 800aca8:	4b84      	ldr	r3, [pc, #528]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a83      	ldr	r2, [pc, #524]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800acae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acb2:	6013      	str	r3, [r2, #0]
 800acb4:	e02e      	b.n	800ad14 <HAL_RCC_OscConfig+0xd8>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10c      	bne.n	800acd8 <HAL_RCC_OscConfig+0x9c>
 800acbe:	4b7f      	ldr	r3, [pc, #508]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a7e      	ldr	r2, [pc, #504]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800acc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acc8:	6013      	str	r3, [r2, #0]
 800acca:	4b7c      	ldr	r3, [pc, #496]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a7b      	ldr	r2, [pc, #492]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800acd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800acd4:	6013      	str	r3, [r2, #0]
 800acd6:	e01d      	b.n	800ad14 <HAL_RCC_OscConfig+0xd8>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ace0:	d10c      	bne.n	800acfc <HAL_RCC_OscConfig+0xc0>
 800ace2:	4b76      	ldr	r3, [pc, #472]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a75      	ldr	r2, [pc, #468]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ace8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800acec:	6013      	str	r3, [r2, #0]
 800acee:	4b73      	ldr	r3, [pc, #460]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a72      	ldr	r2, [pc, #456]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800acf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acf8:	6013      	str	r3, [r2, #0]
 800acfa:	e00b      	b.n	800ad14 <HAL_RCC_OscConfig+0xd8>
 800acfc:	4b6f      	ldr	r3, [pc, #444]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a6e      	ldr	r2, [pc, #440]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ad02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad06:	6013      	str	r3, [r2, #0]
 800ad08:	4b6c      	ldr	r3, [pc, #432]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a6b      	ldr	r2, [pc, #428]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ad0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d013      	beq.n	800ad44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad1c:	f7fe fd44 	bl	80097a8 <HAL_GetTick>
 800ad20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad22:	e008      	b.n	800ad36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad24:	f7fe fd40 	bl	80097a8 <HAL_GetTick>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	1ad3      	subs	r3, r2, r3
 800ad2e:	2b64      	cmp	r3, #100	; 0x64
 800ad30:	d901      	bls.n	800ad36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ad32:	2303      	movs	r3, #3
 800ad34:	e229      	b.n	800b18a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad36:	4b61      	ldr	r3, [pc, #388]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d0f0      	beq.n	800ad24 <HAL_RCC_OscConfig+0xe8>
 800ad42:	e014      	b.n	800ad6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad44:	f7fe fd30 	bl	80097a8 <HAL_GetTick>
 800ad48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad4a:	e008      	b.n	800ad5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad4c:	f7fe fd2c 	bl	80097a8 <HAL_GetTick>
 800ad50:	4602      	mov	r2, r0
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	1ad3      	subs	r3, r2, r3
 800ad56:	2b64      	cmp	r3, #100	; 0x64
 800ad58:	d901      	bls.n	800ad5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ad5a:	2303      	movs	r3, #3
 800ad5c:	e215      	b.n	800b18a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad5e:	4b57      	ldr	r3, [pc, #348]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1f0      	bne.n	800ad4c <HAL_RCC_OscConfig+0x110>
 800ad6a:	e000      	b.n	800ad6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f003 0302 	and.w	r3, r3, #2
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d069      	beq.n	800ae4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ad7a:	4b50      	ldr	r3, [pc, #320]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	f003 030c 	and.w	r3, r3, #12
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00b      	beq.n	800ad9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad86:	4b4d      	ldr	r3, [pc, #308]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	f003 030c 	and.w	r3, r3, #12
 800ad8e:	2b08      	cmp	r3, #8
 800ad90:	d11c      	bne.n	800adcc <HAL_RCC_OscConfig+0x190>
 800ad92:	4b4a      	ldr	r3, [pc, #296]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d116      	bne.n	800adcc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad9e:	4b47      	ldr	r3, [pc, #284]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 0302 	and.w	r3, r3, #2
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d005      	beq.n	800adb6 <HAL_RCC_OscConfig+0x17a>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d001      	beq.n	800adb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	e1e9      	b.n	800b18a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adb6:	4b41      	ldr	r3, [pc, #260]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	00db      	lsls	r3, r3, #3
 800adc4:	493d      	ldr	r1, [pc, #244]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800adc6:	4313      	orrs	r3, r2
 800adc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800adca:	e040      	b.n	800ae4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d023      	beq.n	800ae1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800add4:	4b39      	ldr	r3, [pc, #228]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a38      	ldr	r2, [pc, #224]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800adda:	f043 0301 	orr.w	r3, r3, #1
 800adde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ade0:	f7fe fce2 	bl	80097a8 <HAL_GetTick>
 800ade4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ade6:	e008      	b.n	800adfa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ade8:	f7fe fcde 	bl	80097a8 <HAL_GetTick>
 800adec:	4602      	mov	r2, r0
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	2b02      	cmp	r3, #2
 800adf4:	d901      	bls.n	800adfa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800adf6:	2303      	movs	r3, #3
 800adf8:	e1c7      	b.n	800b18a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adfa:	4b30      	ldr	r3, [pc, #192]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 0302 	and.w	r3, r3, #2
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d0f0      	beq.n	800ade8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae06:	4b2d      	ldr	r3, [pc, #180]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	00db      	lsls	r3, r3, #3
 800ae14:	4929      	ldr	r1, [pc, #164]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ae16:	4313      	orrs	r3, r2
 800ae18:	600b      	str	r3, [r1, #0]
 800ae1a:	e018      	b.n	800ae4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae1c:	4b27      	ldr	r3, [pc, #156]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a26      	ldr	r2, [pc, #152]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ae22:	f023 0301 	bic.w	r3, r3, #1
 800ae26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae28:	f7fe fcbe 	bl	80097a8 <HAL_GetTick>
 800ae2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae2e:	e008      	b.n	800ae42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae30:	f7fe fcba 	bl	80097a8 <HAL_GetTick>
 800ae34:	4602      	mov	r2, r0
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d901      	bls.n	800ae42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ae3e:	2303      	movs	r3, #3
 800ae40:	e1a3      	b.n	800b18a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae42:	4b1e      	ldr	r3, [pc, #120]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f003 0302 	and.w	r3, r3, #2
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1f0      	bne.n	800ae30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f003 0308 	and.w	r3, r3, #8
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d038      	beq.n	800aecc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	695b      	ldr	r3, [r3, #20]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d019      	beq.n	800ae96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae62:	4b16      	ldr	r3, [pc, #88]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ae64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae66:	4a15      	ldr	r2, [pc, #84]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ae68:	f043 0301 	orr.w	r3, r3, #1
 800ae6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae6e:	f7fe fc9b 	bl	80097a8 <HAL_GetTick>
 800ae72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae74:	e008      	b.n	800ae88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae76:	f7fe fc97 	bl	80097a8 <HAL_GetTick>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	1ad3      	subs	r3, r2, r3
 800ae80:	2b02      	cmp	r3, #2
 800ae82:	d901      	bls.n	800ae88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ae84:	2303      	movs	r3, #3
 800ae86:	e180      	b.n	800b18a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae88:	4b0c      	ldr	r3, [pc, #48]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ae8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae8c:	f003 0302 	and.w	r3, r3, #2
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d0f0      	beq.n	800ae76 <HAL_RCC_OscConfig+0x23a>
 800ae94:	e01a      	b.n	800aecc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae96:	4b09      	ldr	r3, [pc, #36]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ae98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae9a:	4a08      	ldr	r2, [pc, #32]	; (800aebc <HAL_RCC_OscConfig+0x280>)
 800ae9c:	f023 0301 	bic.w	r3, r3, #1
 800aea0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aea2:	f7fe fc81 	bl	80097a8 <HAL_GetTick>
 800aea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aea8:	e00a      	b.n	800aec0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aeaa:	f7fe fc7d 	bl	80097a8 <HAL_GetTick>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d903      	bls.n	800aec0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	e166      	b.n	800b18a <HAL_RCC_OscConfig+0x54e>
 800aebc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aec0:	4b92      	ldr	r3, [pc, #584]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800aec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aec4:	f003 0302 	and.w	r3, r3, #2
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d1ee      	bne.n	800aeaa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f003 0304 	and.w	r3, r3, #4
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f000 80a4 	beq.w	800b022 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aeda:	4b8c      	ldr	r3, [pc, #560]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800aedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10d      	bne.n	800af02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800aee6:	4b89      	ldr	r3, [pc, #548]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800aee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeea:	4a88      	ldr	r2, [pc, #544]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800aeec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aef0:	6413      	str	r3, [r2, #64]	; 0x40
 800aef2:	4b86      	ldr	r3, [pc, #536]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800aef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aefa:	60bb      	str	r3, [r7, #8]
 800aefc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aefe:	2301      	movs	r3, #1
 800af00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af02:	4b83      	ldr	r3, [pc, #524]	; (800b110 <HAL_RCC_OscConfig+0x4d4>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d118      	bne.n	800af40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800af0e:	4b80      	ldr	r3, [pc, #512]	; (800b110 <HAL_RCC_OscConfig+0x4d4>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a7f      	ldr	r2, [pc, #508]	; (800b110 <HAL_RCC_OscConfig+0x4d4>)
 800af14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af1a:	f7fe fc45 	bl	80097a8 <HAL_GetTick>
 800af1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af20:	e008      	b.n	800af34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af22:	f7fe fc41 	bl	80097a8 <HAL_GetTick>
 800af26:	4602      	mov	r2, r0
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	2b64      	cmp	r3, #100	; 0x64
 800af2e:	d901      	bls.n	800af34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800af30:	2303      	movs	r3, #3
 800af32:	e12a      	b.n	800b18a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af34:	4b76      	ldr	r3, [pc, #472]	; (800b110 <HAL_RCC_OscConfig+0x4d4>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d0f0      	beq.n	800af22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d106      	bne.n	800af56 <HAL_RCC_OscConfig+0x31a>
 800af48:	4b70      	ldr	r3, [pc, #448]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800af4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af4c:	4a6f      	ldr	r2, [pc, #444]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800af4e:	f043 0301 	orr.w	r3, r3, #1
 800af52:	6713      	str	r3, [r2, #112]	; 0x70
 800af54:	e02d      	b.n	800afb2 <HAL_RCC_OscConfig+0x376>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d10c      	bne.n	800af78 <HAL_RCC_OscConfig+0x33c>
 800af5e:	4b6b      	ldr	r3, [pc, #428]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800af60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af62:	4a6a      	ldr	r2, [pc, #424]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800af64:	f023 0301 	bic.w	r3, r3, #1
 800af68:	6713      	str	r3, [r2, #112]	; 0x70
 800af6a:	4b68      	ldr	r3, [pc, #416]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800af6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af6e:	4a67      	ldr	r2, [pc, #412]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800af70:	f023 0304 	bic.w	r3, r3, #4
 800af74:	6713      	str	r3, [r2, #112]	; 0x70
 800af76:	e01c      	b.n	800afb2 <HAL_RCC_OscConfig+0x376>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	2b05      	cmp	r3, #5
 800af7e:	d10c      	bne.n	800af9a <HAL_RCC_OscConfig+0x35e>
 800af80:	4b62      	ldr	r3, [pc, #392]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800af82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af84:	4a61      	ldr	r2, [pc, #388]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800af86:	f043 0304 	orr.w	r3, r3, #4
 800af8a:	6713      	str	r3, [r2, #112]	; 0x70
 800af8c:	4b5f      	ldr	r3, [pc, #380]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800af8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af90:	4a5e      	ldr	r2, [pc, #376]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800af92:	f043 0301 	orr.w	r3, r3, #1
 800af96:	6713      	str	r3, [r2, #112]	; 0x70
 800af98:	e00b      	b.n	800afb2 <HAL_RCC_OscConfig+0x376>
 800af9a:	4b5c      	ldr	r3, [pc, #368]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800af9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af9e:	4a5b      	ldr	r2, [pc, #364]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800afa0:	f023 0301 	bic.w	r3, r3, #1
 800afa4:	6713      	str	r3, [r2, #112]	; 0x70
 800afa6:	4b59      	ldr	r3, [pc, #356]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800afa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afaa:	4a58      	ldr	r2, [pc, #352]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800afac:	f023 0304 	bic.w	r3, r3, #4
 800afb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d015      	beq.n	800afe6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afba:	f7fe fbf5 	bl	80097a8 <HAL_GetTick>
 800afbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afc0:	e00a      	b.n	800afd8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afc2:	f7fe fbf1 	bl	80097a8 <HAL_GetTick>
 800afc6:	4602      	mov	r2, r0
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	1ad3      	subs	r3, r2, r3
 800afcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d901      	bls.n	800afd8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800afd4:	2303      	movs	r3, #3
 800afd6:	e0d8      	b.n	800b18a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afd8:	4b4c      	ldr	r3, [pc, #304]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800afda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afdc:	f003 0302 	and.w	r3, r3, #2
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d0ee      	beq.n	800afc2 <HAL_RCC_OscConfig+0x386>
 800afe4:	e014      	b.n	800b010 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afe6:	f7fe fbdf 	bl	80097a8 <HAL_GetTick>
 800afea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800afec:	e00a      	b.n	800b004 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afee:	f7fe fbdb 	bl	80097a8 <HAL_GetTick>
 800aff2:	4602      	mov	r2, r0
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	1ad3      	subs	r3, r2, r3
 800aff8:	f241 3288 	movw	r2, #5000	; 0x1388
 800affc:	4293      	cmp	r3, r2
 800affe:	d901      	bls.n	800b004 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b000:	2303      	movs	r3, #3
 800b002:	e0c2      	b.n	800b18a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b004:	4b41      	ldr	r3, [pc, #260]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800b006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b008:	f003 0302 	and.w	r3, r3, #2
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d1ee      	bne.n	800afee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b010:	7dfb      	ldrb	r3, [r7, #23]
 800b012:	2b01      	cmp	r3, #1
 800b014:	d105      	bne.n	800b022 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b016:	4b3d      	ldr	r3, [pc, #244]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800b018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01a:	4a3c      	ldr	r2, [pc, #240]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800b01c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b020:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	699b      	ldr	r3, [r3, #24]
 800b026:	2b00      	cmp	r3, #0
 800b028:	f000 80ae 	beq.w	800b188 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b02c:	4b37      	ldr	r3, [pc, #220]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	f003 030c 	and.w	r3, r3, #12
 800b034:	2b08      	cmp	r3, #8
 800b036:	d06d      	beq.n	800b114 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d14b      	bne.n	800b0d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b040:	4b32      	ldr	r3, [pc, #200]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a31      	ldr	r2, [pc, #196]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800b046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b04a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b04c:	f7fe fbac 	bl	80097a8 <HAL_GetTick>
 800b050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b052:	e008      	b.n	800b066 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b054:	f7fe fba8 	bl	80097a8 <HAL_GetTick>
 800b058:	4602      	mov	r2, r0
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	1ad3      	subs	r3, r2, r3
 800b05e:	2b02      	cmp	r3, #2
 800b060:	d901      	bls.n	800b066 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b062:	2303      	movs	r3, #3
 800b064:	e091      	b.n	800b18a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b066:	4b29      	ldr	r3, [pc, #164]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d1f0      	bne.n	800b054 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	69da      	ldr	r2, [r3, #28]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a1b      	ldr	r3, [r3, #32]
 800b07a:	431a      	orrs	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b080:	019b      	lsls	r3, r3, #6
 800b082:	431a      	orrs	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b088:	085b      	lsrs	r3, r3, #1
 800b08a:	3b01      	subs	r3, #1
 800b08c:	041b      	lsls	r3, r3, #16
 800b08e:	431a      	orrs	r2, r3
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b094:	061b      	lsls	r3, r3, #24
 800b096:	431a      	orrs	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09c:	071b      	lsls	r3, r3, #28
 800b09e:	491b      	ldr	r1, [pc, #108]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b0a4:	4b19      	ldr	r3, [pc, #100]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a18      	ldr	r2, [pc, #96]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800b0aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0b0:	f7fe fb7a 	bl	80097a8 <HAL_GetTick>
 800b0b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0b6:	e008      	b.n	800b0ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0b8:	f7fe fb76 	bl	80097a8 <HAL_GetTick>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	1ad3      	subs	r3, r2, r3
 800b0c2:	2b02      	cmp	r3, #2
 800b0c4:	d901      	bls.n	800b0ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800b0c6:	2303      	movs	r3, #3
 800b0c8:	e05f      	b.n	800b18a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0ca:	4b10      	ldr	r3, [pc, #64]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d0f0      	beq.n	800b0b8 <HAL_RCC_OscConfig+0x47c>
 800b0d6:	e057      	b.n	800b188 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0d8:	4b0c      	ldr	r3, [pc, #48]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a0b      	ldr	r2, [pc, #44]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800b0de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b0e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0e4:	f7fe fb60 	bl	80097a8 <HAL_GetTick>
 800b0e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0ea:	e008      	b.n	800b0fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0ec:	f7fe fb5c 	bl	80097a8 <HAL_GetTick>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	1ad3      	subs	r3, r2, r3
 800b0f6:	2b02      	cmp	r3, #2
 800b0f8:	d901      	bls.n	800b0fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	e045      	b.n	800b18a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0fe:	4b03      	ldr	r3, [pc, #12]	; (800b10c <HAL_RCC_OscConfig+0x4d0>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b106:	2b00      	cmp	r3, #0
 800b108:	d1f0      	bne.n	800b0ec <HAL_RCC_OscConfig+0x4b0>
 800b10a:	e03d      	b.n	800b188 <HAL_RCC_OscConfig+0x54c>
 800b10c:	40023800 	.word	0x40023800
 800b110:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b114:	4b1f      	ldr	r3, [pc, #124]	; (800b194 <HAL_RCC_OscConfig+0x558>)
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	699b      	ldr	r3, [r3, #24]
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d030      	beq.n	800b184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d129      	bne.n	800b184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d122      	bne.n	800b184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b13e:	68fa      	ldr	r2, [r7, #12]
 800b140:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b144:	4013      	ands	r3, r2
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b14a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d119      	bne.n	800b184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b15a:	085b      	lsrs	r3, r3, #1
 800b15c:	3b01      	subs	r3, #1
 800b15e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b160:	429a      	cmp	r2, r3
 800b162:	d10f      	bne.n	800b184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b16e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b170:	429a      	cmp	r2, r3
 800b172:	d107      	bne.n	800b184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b17e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b180:	429a      	cmp	r2, r3
 800b182:	d001      	beq.n	800b188 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800b184:	2301      	movs	r3, #1
 800b186:	e000      	b.n	800b18a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3718      	adds	r7, #24
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	40023800 	.word	0x40023800

0800b198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d101      	bne.n	800b1b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e0d0      	b.n	800b352 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b1b0:	4b6a      	ldr	r3, [pc, #424]	; (800b35c <HAL_RCC_ClockConfig+0x1c4>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f003 030f 	and.w	r3, r3, #15
 800b1b8:	683a      	ldr	r2, [r7, #0]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d910      	bls.n	800b1e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1be:	4b67      	ldr	r3, [pc, #412]	; (800b35c <HAL_RCC_ClockConfig+0x1c4>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f023 020f 	bic.w	r2, r3, #15
 800b1c6:	4965      	ldr	r1, [pc, #404]	; (800b35c <HAL_RCC_ClockConfig+0x1c4>)
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1ce:	4b63      	ldr	r3, [pc, #396]	; (800b35c <HAL_RCC_ClockConfig+0x1c4>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f003 030f 	and.w	r3, r3, #15
 800b1d6:	683a      	ldr	r2, [r7, #0]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d001      	beq.n	800b1e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e0b8      	b.n	800b352 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f003 0302 	and.w	r3, r3, #2
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d020      	beq.n	800b22e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 0304 	and.w	r3, r3, #4
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d005      	beq.n	800b204 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b1f8:	4b59      	ldr	r3, [pc, #356]	; (800b360 <HAL_RCC_ClockConfig+0x1c8>)
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	4a58      	ldr	r2, [pc, #352]	; (800b360 <HAL_RCC_ClockConfig+0x1c8>)
 800b1fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b202:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f003 0308 	and.w	r3, r3, #8
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d005      	beq.n	800b21c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b210:	4b53      	ldr	r3, [pc, #332]	; (800b360 <HAL_RCC_ClockConfig+0x1c8>)
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	4a52      	ldr	r2, [pc, #328]	; (800b360 <HAL_RCC_ClockConfig+0x1c8>)
 800b216:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b21a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b21c:	4b50      	ldr	r3, [pc, #320]	; (800b360 <HAL_RCC_ClockConfig+0x1c8>)
 800b21e:	689b      	ldr	r3, [r3, #8]
 800b220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	494d      	ldr	r1, [pc, #308]	; (800b360 <HAL_RCC_ClockConfig+0x1c8>)
 800b22a:	4313      	orrs	r3, r2
 800b22c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f003 0301 	and.w	r3, r3, #1
 800b236:	2b00      	cmp	r3, #0
 800b238:	d040      	beq.n	800b2bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d107      	bne.n	800b252 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b242:	4b47      	ldr	r3, [pc, #284]	; (800b360 <HAL_RCC_ClockConfig+0x1c8>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d115      	bne.n	800b27a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b24e:	2301      	movs	r3, #1
 800b250:	e07f      	b.n	800b352 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	2b02      	cmp	r3, #2
 800b258:	d107      	bne.n	800b26a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b25a:	4b41      	ldr	r3, [pc, #260]	; (800b360 <HAL_RCC_ClockConfig+0x1c8>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b262:	2b00      	cmp	r3, #0
 800b264:	d109      	bne.n	800b27a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b266:	2301      	movs	r3, #1
 800b268:	e073      	b.n	800b352 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b26a:	4b3d      	ldr	r3, [pc, #244]	; (800b360 <HAL_RCC_ClockConfig+0x1c8>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f003 0302 	and.w	r3, r3, #2
 800b272:	2b00      	cmp	r3, #0
 800b274:	d101      	bne.n	800b27a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	e06b      	b.n	800b352 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b27a:	4b39      	ldr	r3, [pc, #228]	; (800b360 <HAL_RCC_ClockConfig+0x1c8>)
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	f023 0203 	bic.w	r2, r3, #3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	4936      	ldr	r1, [pc, #216]	; (800b360 <HAL_RCC_ClockConfig+0x1c8>)
 800b288:	4313      	orrs	r3, r2
 800b28a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b28c:	f7fe fa8c 	bl	80097a8 <HAL_GetTick>
 800b290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b292:	e00a      	b.n	800b2aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b294:	f7fe fa88 	bl	80097a8 <HAL_GetTick>
 800b298:	4602      	mov	r2, r0
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	1ad3      	subs	r3, r2, r3
 800b29e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d901      	bls.n	800b2aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b2a6:	2303      	movs	r3, #3
 800b2a8:	e053      	b.n	800b352 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2aa:	4b2d      	ldr	r3, [pc, #180]	; (800b360 <HAL_RCC_ClockConfig+0x1c8>)
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	f003 020c 	and.w	r2, r3, #12
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d1eb      	bne.n	800b294 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b2bc:	4b27      	ldr	r3, [pc, #156]	; (800b35c <HAL_RCC_ClockConfig+0x1c4>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f003 030f 	and.w	r3, r3, #15
 800b2c4:	683a      	ldr	r2, [r7, #0]
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d210      	bcs.n	800b2ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2ca:	4b24      	ldr	r3, [pc, #144]	; (800b35c <HAL_RCC_ClockConfig+0x1c4>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f023 020f 	bic.w	r2, r3, #15
 800b2d2:	4922      	ldr	r1, [pc, #136]	; (800b35c <HAL_RCC_ClockConfig+0x1c4>)
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2da:	4b20      	ldr	r3, [pc, #128]	; (800b35c <HAL_RCC_ClockConfig+0x1c4>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f003 030f 	and.w	r3, r3, #15
 800b2e2:	683a      	ldr	r2, [r7, #0]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d001      	beq.n	800b2ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e032      	b.n	800b352 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f003 0304 	and.w	r3, r3, #4
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d008      	beq.n	800b30a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b2f8:	4b19      	ldr	r3, [pc, #100]	; (800b360 <HAL_RCC_ClockConfig+0x1c8>)
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	4916      	ldr	r1, [pc, #88]	; (800b360 <HAL_RCC_ClockConfig+0x1c8>)
 800b306:	4313      	orrs	r3, r2
 800b308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f003 0308 	and.w	r3, r3, #8
 800b312:	2b00      	cmp	r3, #0
 800b314:	d009      	beq.n	800b32a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b316:	4b12      	ldr	r3, [pc, #72]	; (800b360 <HAL_RCC_ClockConfig+0x1c8>)
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	691b      	ldr	r3, [r3, #16]
 800b322:	00db      	lsls	r3, r3, #3
 800b324:	490e      	ldr	r1, [pc, #56]	; (800b360 <HAL_RCC_ClockConfig+0x1c8>)
 800b326:	4313      	orrs	r3, r2
 800b328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b32a:	f000 f821 	bl	800b370 <HAL_RCC_GetSysClockFreq>
 800b32e:	4602      	mov	r2, r0
 800b330:	4b0b      	ldr	r3, [pc, #44]	; (800b360 <HAL_RCC_ClockConfig+0x1c8>)
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	091b      	lsrs	r3, r3, #4
 800b336:	f003 030f 	and.w	r3, r3, #15
 800b33a:	490a      	ldr	r1, [pc, #40]	; (800b364 <HAL_RCC_ClockConfig+0x1cc>)
 800b33c:	5ccb      	ldrb	r3, [r1, r3]
 800b33e:	fa22 f303 	lsr.w	r3, r2, r3
 800b342:	4a09      	ldr	r2, [pc, #36]	; (800b368 <HAL_RCC_ClockConfig+0x1d0>)
 800b344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b346:	4b09      	ldr	r3, [pc, #36]	; (800b36c <HAL_RCC_ClockConfig+0x1d4>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7fe f9e8 	bl	8009720 <HAL_InitTick>

  return HAL_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	40023c00 	.word	0x40023c00
 800b360:	40023800 	.word	0x40023800
 800b364:	0800cec4 	.word	0x0800cec4
 800b368:	20000218 	.word	0x20000218
 800b36c:	2000021c 	.word	0x2000021c

0800b370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b374:	b090      	sub	sp, #64	; 0x40
 800b376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b378:	2300      	movs	r3, #0
 800b37a:	637b      	str	r3, [r7, #52]	; 0x34
 800b37c:	2300      	movs	r3, #0
 800b37e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b380:	2300      	movs	r3, #0
 800b382:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800b384:	2300      	movs	r3, #0
 800b386:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b388:	4b59      	ldr	r3, [pc, #356]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	f003 030c 	and.w	r3, r3, #12
 800b390:	2b08      	cmp	r3, #8
 800b392:	d00d      	beq.n	800b3b0 <HAL_RCC_GetSysClockFreq+0x40>
 800b394:	2b08      	cmp	r3, #8
 800b396:	f200 80a1 	bhi.w	800b4dc <HAL_RCC_GetSysClockFreq+0x16c>
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d002      	beq.n	800b3a4 <HAL_RCC_GetSysClockFreq+0x34>
 800b39e:	2b04      	cmp	r3, #4
 800b3a0:	d003      	beq.n	800b3aa <HAL_RCC_GetSysClockFreq+0x3a>
 800b3a2:	e09b      	b.n	800b4dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b3a4:	4b53      	ldr	r3, [pc, #332]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x184>)
 800b3a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b3a8:	e09b      	b.n	800b4e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b3aa:	4b53      	ldr	r3, [pc, #332]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0x188>)
 800b3ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b3ae:	e098      	b.n	800b4e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b3b0:	4b4f      	ldr	r3, [pc, #316]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b3ba:	4b4d      	ldr	r3, [pc, #308]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d028      	beq.n	800b418 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b3c6:	4b4a      	ldr	r3, [pc, #296]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	099b      	lsrs	r3, r3, #6
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	623b      	str	r3, [r7, #32]
 800b3d0:	627a      	str	r2, [r7, #36]	; 0x24
 800b3d2:	6a3b      	ldr	r3, [r7, #32]
 800b3d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b3d8:	2100      	movs	r1, #0
 800b3da:	4b47      	ldr	r3, [pc, #284]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0x188>)
 800b3dc:	fb03 f201 	mul.w	r2, r3, r1
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	fb00 f303 	mul.w	r3, r0, r3
 800b3e6:	4413      	add	r3, r2
 800b3e8:	4a43      	ldr	r2, [pc, #268]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0x188>)
 800b3ea:	fba0 1202 	umull	r1, r2, r0, r2
 800b3ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3f0:	460a      	mov	r2, r1
 800b3f2:	62ba      	str	r2, [r7, #40]	; 0x28
 800b3f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3f6:	4413      	add	r3, r2
 800b3f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	61bb      	str	r3, [r7, #24]
 800b400:	61fa      	str	r2, [r7, #28]
 800b402:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b406:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b40a:	f7f4 ff71 	bl	80002f0 <__aeabi_uldivmod>
 800b40e:	4602      	mov	r2, r0
 800b410:	460b      	mov	r3, r1
 800b412:	4613      	mov	r3, r2
 800b414:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b416:	e053      	b.n	800b4c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b418:	4b35      	ldr	r3, [pc, #212]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	099b      	lsrs	r3, r3, #6
 800b41e:	2200      	movs	r2, #0
 800b420:	613b      	str	r3, [r7, #16]
 800b422:	617a      	str	r2, [r7, #20]
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b42a:	f04f 0b00 	mov.w	fp, #0
 800b42e:	4652      	mov	r2, sl
 800b430:	465b      	mov	r3, fp
 800b432:	f04f 0000 	mov.w	r0, #0
 800b436:	f04f 0100 	mov.w	r1, #0
 800b43a:	0159      	lsls	r1, r3, #5
 800b43c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b440:	0150      	lsls	r0, r2, #5
 800b442:	4602      	mov	r2, r0
 800b444:	460b      	mov	r3, r1
 800b446:	ebb2 080a 	subs.w	r8, r2, sl
 800b44a:	eb63 090b 	sbc.w	r9, r3, fp
 800b44e:	f04f 0200 	mov.w	r2, #0
 800b452:	f04f 0300 	mov.w	r3, #0
 800b456:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b45a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b45e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b462:	ebb2 0408 	subs.w	r4, r2, r8
 800b466:	eb63 0509 	sbc.w	r5, r3, r9
 800b46a:	f04f 0200 	mov.w	r2, #0
 800b46e:	f04f 0300 	mov.w	r3, #0
 800b472:	00eb      	lsls	r3, r5, #3
 800b474:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b478:	00e2      	lsls	r2, r4, #3
 800b47a:	4614      	mov	r4, r2
 800b47c:	461d      	mov	r5, r3
 800b47e:	eb14 030a 	adds.w	r3, r4, sl
 800b482:	603b      	str	r3, [r7, #0]
 800b484:	eb45 030b 	adc.w	r3, r5, fp
 800b488:	607b      	str	r3, [r7, #4]
 800b48a:	f04f 0200 	mov.w	r2, #0
 800b48e:	f04f 0300 	mov.w	r3, #0
 800b492:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b496:	4629      	mov	r1, r5
 800b498:	028b      	lsls	r3, r1, #10
 800b49a:	4621      	mov	r1, r4
 800b49c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b4a0:	4621      	mov	r1, r4
 800b4a2:	028a      	lsls	r2, r1, #10
 800b4a4:	4610      	mov	r0, r2
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	60bb      	str	r3, [r7, #8]
 800b4ae:	60fa      	str	r2, [r7, #12]
 800b4b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b4b4:	f7f4 ff1c 	bl	80002f0 <__aeabi_uldivmod>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4613      	mov	r3, r2
 800b4be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b4c0:	4b0b      	ldr	r3, [pc, #44]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	0c1b      	lsrs	r3, r3, #16
 800b4c6:	f003 0303 	and.w	r3, r3, #3
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	005b      	lsls	r3, r3, #1
 800b4ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800b4d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b4da:	e002      	b.n	800b4e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b4dc:	4b05      	ldr	r3, [pc, #20]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x184>)
 800b4de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b4e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3740      	adds	r7, #64	; 0x40
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b4ee:	bf00      	nop
 800b4f0:	40023800 	.word	0x40023800
 800b4f4:	00f42400 	.word	0x00f42400
 800b4f8:	017d7840 	.word	0x017d7840

0800b4fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d101      	bne.n	800b50e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b50a:	2301      	movs	r3, #1
 800b50c:	e049      	b.n	800b5a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b514:	b2db      	uxtb	r3, r3
 800b516:	2b00      	cmp	r3, #0
 800b518:	d106      	bne.n	800b528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7fd ff5e 	bl	80093e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2202      	movs	r2, #2
 800b52c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	3304      	adds	r3, #4
 800b538:	4619      	mov	r1, r3
 800b53a:	4610      	mov	r0, r2
 800b53c:	f000 f9de 	bl	800b8fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2201      	movs	r2, #1
 800b544:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2201      	movs	r2, #1
 800b554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2201      	movs	r2, #1
 800b55c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2201      	movs	r2, #1
 800b564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2201      	movs	r2, #1
 800b56c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2201      	movs	r2, #1
 800b574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2201      	movs	r2, #1
 800b584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2201      	movs	r2, #1
 800b58c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3708      	adds	r7, #8
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
	...

0800b5ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b085      	sub	sp, #20
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d001      	beq.n	800b5c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	e054      	b.n	800b66e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2202      	movs	r2, #2
 800b5c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	68da      	ldr	r2, [r3, #12]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f042 0201 	orr.w	r2, r2, #1
 800b5da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a26      	ldr	r2, [pc, #152]	; (800b67c <HAL_TIM_Base_Start_IT+0xd0>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d022      	beq.n	800b62c <HAL_TIM_Base_Start_IT+0x80>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5ee:	d01d      	beq.n	800b62c <HAL_TIM_Base_Start_IT+0x80>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a22      	ldr	r2, [pc, #136]	; (800b680 <HAL_TIM_Base_Start_IT+0xd4>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d018      	beq.n	800b62c <HAL_TIM_Base_Start_IT+0x80>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a21      	ldr	r2, [pc, #132]	; (800b684 <HAL_TIM_Base_Start_IT+0xd8>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d013      	beq.n	800b62c <HAL_TIM_Base_Start_IT+0x80>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a1f      	ldr	r2, [pc, #124]	; (800b688 <HAL_TIM_Base_Start_IT+0xdc>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d00e      	beq.n	800b62c <HAL_TIM_Base_Start_IT+0x80>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4a1e      	ldr	r2, [pc, #120]	; (800b68c <HAL_TIM_Base_Start_IT+0xe0>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d009      	beq.n	800b62c <HAL_TIM_Base_Start_IT+0x80>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4a1c      	ldr	r2, [pc, #112]	; (800b690 <HAL_TIM_Base_Start_IT+0xe4>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d004      	beq.n	800b62c <HAL_TIM_Base_Start_IT+0x80>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4a1b      	ldr	r2, [pc, #108]	; (800b694 <HAL_TIM_Base_Start_IT+0xe8>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d115      	bne.n	800b658 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	689a      	ldr	r2, [r3, #8]
 800b632:	4b19      	ldr	r3, [pc, #100]	; (800b698 <HAL_TIM_Base_Start_IT+0xec>)
 800b634:	4013      	ands	r3, r2
 800b636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2b06      	cmp	r3, #6
 800b63c:	d015      	beq.n	800b66a <HAL_TIM_Base_Start_IT+0xbe>
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b644:	d011      	beq.n	800b66a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f042 0201 	orr.w	r2, r2, #1
 800b654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b656:	e008      	b.n	800b66a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f042 0201 	orr.w	r2, r2, #1
 800b666:	601a      	str	r2, [r3, #0]
 800b668:	e000      	b.n	800b66c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b66a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b66c:	2300      	movs	r3, #0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3714      	adds	r7, #20
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	40010000 	.word	0x40010000
 800b680:	40000400 	.word	0x40000400
 800b684:	40000800 	.word	0x40000800
 800b688:	40000c00 	.word	0x40000c00
 800b68c:	40010400 	.word	0x40010400
 800b690:	40014000 	.word	0x40014000
 800b694:	40001800 	.word	0x40001800
 800b698:	00010007 	.word	0x00010007

0800b69c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	691b      	ldr	r3, [r3, #16]
 800b6b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	f003 0302 	and.w	r3, r3, #2
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d020      	beq.n	800b700 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f003 0302 	and.w	r3, r3, #2
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d01b      	beq.n	800b700 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f06f 0202 	mvn.w	r2, #2
 800b6d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	699b      	ldr	r3, [r3, #24]
 800b6de:	f003 0303 	and.w	r3, r3, #3
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d003      	beq.n	800b6ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f8e9 	bl	800b8be <HAL_TIM_IC_CaptureCallback>
 800b6ec:	e005      	b.n	800b6fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 f8db 	bl	800b8aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 f8ec 	bl	800b8d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	f003 0304 	and.w	r3, r3, #4
 800b706:	2b00      	cmp	r3, #0
 800b708:	d020      	beq.n	800b74c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f003 0304 	and.w	r3, r3, #4
 800b710:	2b00      	cmp	r3, #0
 800b712:	d01b      	beq.n	800b74c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f06f 0204 	mvn.w	r2, #4
 800b71c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2202      	movs	r2, #2
 800b722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	699b      	ldr	r3, [r3, #24]
 800b72a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d003      	beq.n	800b73a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f8c3 	bl	800b8be <HAL_TIM_IC_CaptureCallback>
 800b738:	e005      	b.n	800b746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f8b5 	bl	800b8aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 f8c6 	bl	800b8d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	f003 0308 	and.w	r3, r3, #8
 800b752:	2b00      	cmp	r3, #0
 800b754:	d020      	beq.n	800b798 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	f003 0308 	and.w	r3, r3, #8
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d01b      	beq.n	800b798 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f06f 0208 	mvn.w	r2, #8
 800b768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2204      	movs	r2, #4
 800b76e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	69db      	ldr	r3, [r3, #28]
 800b776:	f003 0303 	and.w	r3, r3, #3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d003      	beq.n	800b786 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 f89d 	bl	800b8be <HAL_TIM_IC_CaptureCallback>
 800b784:	e005      	b.n	800b792 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 f88f 	bl	800b8aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 f8a0 	bl	800b8d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	f003 0310 	and.w	r3, r3, #16
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d020      	beq.n	800b7e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f003 0310 	and.w	r3, r3, #16
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d01b      	beq.n	800b7e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f06f 0210 	mvn.w	r2, #16
 800b7b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2208      	movs	r2, #8
 800b7ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	69db      	ldr	r3, [r3, #28]
 800b7c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d003      	beq.n	800b7d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f877 	bl	800b8be <HAL_TIM_IC_CaptureCallback>
 800b7d0:	e005      	b.n	800b7de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f869 	bl	800b8aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f87a 	bl	800b8d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	f003 0301 	and.w	r3, r3, #1
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d00c      	beq.n	800b808 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f003 0301 	and.w	r3, r3, #1
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d007      	beq.n	800b808 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f06f 0201 	mvn.w	r2, #1
 800b800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f7fc f952 	bl	8007aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d104      	bne.n	800b81c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00c      	beq.n	800b836 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b822:	2b00      	cmp	r3, #0
 800b824:	d007      	beq.n	800b836 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800b82e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 f919 	bl	800ba68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d00c      	beq.n	800b85a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b846:	2b00      	cmp	r3, #0
 800b848:	d007      	beq.n	800b85a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 f911 	bl	800ba7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00c      	beq.n	800b87e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d007      	beq.n	800b87e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 f834 	bl	800b8e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	f003 0320 	and.w	r3, r3, #32
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00c      	beq.n	800b8a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f003 0320 	and.w	r3, r3, #32
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d007      	beq.n	800b8a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f06f 0220 	mvn.w	r2, #32
 800b89a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 f8d9 	bl	800ba54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b8a2:	bf00      	nop
 800b8a4:	3710      	adds	r7, #16
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}

0800b8aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b8aa:	b480      	push	{r7}
 800b8ac:	b083      	sub	sp, #12
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b8b2:	bf00      	nop
 800b8b4:	370c      	adds	r7, #12
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr

0800b8be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b8be:	b480      	push	{r7}
 800b8c0:	b083      	sub	sp, #12
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b8c6:	bf00      	nop
 800b8c8:	370c      	adds	r7, #12
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr

0800b8d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b8d2:	b480      	push	{r7}
 800b8d4:	b083      	sub	sp, #12
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b8da:	bf00      	nop
 800b8dc:	370c      	adds	r7, #12
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr

0800b8e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b8e6:	b480      	push	{r7}
 800b8e8:	b083      	sub	sp, #12
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b8ee:	bf00      	nop
 800b8f0:	370c      	adds	r7, #12
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr
	...

0800b8fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	4a46      	ldr	r2, [pc, #280]	; (800ba28 <TIM_Base_SetConfig+0x12c>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d013      	beq.n	800b93c <TIM_Base_SetConfig+0x40>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b91a:	d00f      	beq.n	800b93c <TIM_Base_SetConfig+0x40>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	4a43      	ldr	r2, [pc, #268]	; (800ba2c <TIM_Base_SetConfig+0x130>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d00b      	beq.n	800b93c <TIM_Base_SetConfig+0x40>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4a42      	ldr	r2, [pc, #264]	; (800ba30 <TIM_Base_SetConfig+0x134>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d007      	beq.n	800b93c <TIM_Base_SetConfig+0x40>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	4a41      	ldr	r2, [pc, #260]	; (800ba34 <TIM_Base_SetConfig+0x138>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d003      	beq.n	800b93c <TIM_Base_SetConfig+0x40>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4a40      	ldr	r2, [pc, #256]	; (800ba38 <TIM_Base_SetConfig+0x13c>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d108      	bne.n	800b94e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	4313      	orrs	r3, r2
 800b94c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	4a35      	ldr	r2, [pc, #212]	; (800ba28 <TIM_Base_SetConfig+0x12c>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d02b      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b95c:	d027      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	4a32      	ldr	r2, [pc, #200]	; (800ba2c <TIM_Base_SetConfig+0x130>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d023      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	4a31      	ldr	r2, [pc, #196]	; (800ba30 <TIM_Base_SetConfig+0x134>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d01f      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	4a30      	ldr	r2, [pc, #192]	; (800ba34 <TIM_Base_SetConfig+0x138>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d01b      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	4a2f      	ldr	r2, [pc, #188]	; (800ba38 <TIM_Base_SetConfig+0x13c>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d017      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	4a2e      	ldr	r2, [pc, #184]	; (800ba3c <TIM_Base_SetConfig+0x140>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d013      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	4a2d      	ldr	r2, [pc, #180]	; (800ba40 <TIM_Base_SetConfig+0x144>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d00f      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	4a2c      	ldr	r2, [pc, #176]	; (800ba44 <TIM_Base_SetConfig+0x148>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d00b      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	4a2b      	ldr	r2, [pc, #172]	; (800ba48 <TIM_Base_SetConfig+0x14c>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d007      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	4a2a      	ldr	r2, [pc, #168]	; (800ba4c <TIM_Base_SetConfig+0x150>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d003      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	4a29      	ldr	r2, [pc, #164]	; (800ba50 <TIM_Base_SetConfig+0x154>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d108      	bne.n	800b9c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	695b      	ldr	r3, [r3, #20]
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	689a      	ldr	r2, [r3, #8]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	4a10      	ldr	r2, [pc, #64]	; (800ba28 <TIM_Base_SetConfig+0x12c>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d003      	beq.n	800b9f4 <TIM_Base_SetConfig+0xf8>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	4a12      	ldr	r2, [pc, #72]	; (800ba38 <TIM_Base_SetConfig+0x13c>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d103      	bne.n	800b9fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	691a      	ldr	r2, [r3, #16]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	691b      	ldr	r3, [r3, #16]
 800ba06:	f003 0301 	and.w	r3, r3, #1
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d105      	bne.n	800ba1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	691b      	ldr	r3, [r3, #16]
 800ba12:	f023 0201 	bic.w	r2, r3, #1
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	611a      	str	r2, [r3, #16]
  }
}
 800ba1a:	bf00      	nop
 800ba1c:	3714      	adds	r7, #20
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	40010000 	.word	0x40010000
 800ba2c:	40000400 	.word	0x40000400
 800ba30:	40000800 	.word	0x40000800
 800ba34:	40000c00 	.word	0x40000c00
 800ba38:	40010400 	.word	0x40010400
 800ba3c:	40014000 	.word	0x40014000
 800ba40:	40014400 	.word	0x40014400
 800ba44:	40014800 	.word	0x40014800
 800ba48:	40001800 	.word	0x40001800
 800ba4c:	40001c00 	.word	0x40001c00
 800ba50:	40002000 	.word	0x40002000

0800ba54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b083      	sub	sp, #12
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba5c:	bf00      	nop
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba70:	bf00      	nop
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ba84:	bf00      	nop
 800ba86:	370c      	adds	r7, #12
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <calloc>:
 800ba90:	4b02      	ldr	r3, [pc, #8]	; (800ba9c <calloc+0xc>)
 800ba92:	460a      	mov	r2, r1
 800ba94:	4601      	mov	r1, r0
 800ba96:	6818      	ldr	r0, [r3, #0]
 800ba98:	f000 b802 	b.w	800baa0 <_calloc_r>
 800ba9c:	2000027c 	.word	0x2000027c

0800baa0 <_calloc_r>:
 800baa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800baa2:	fba1 2402 	umull	r2, r4, r1, r2
 800baa6:	b94c      	cbnz	r4, 800babc <_calloc_r+0x1c>
 800baa8:	4611      	mov	r1, r2
 800baaa:	9201      	str	r2, [sp, #4]
 800baac:	f000 f836 	bl	800bb1c <_malloc_r>
 800bab0:	9a01      	ldr	r2, [sp, #4]
 800bab2:	4605      	mov	r5, r0
 800bab4:	b930      	cbnz	r0, 800bac4 <_calloc_r+0x24>
 800bab6:	4628      	mov	r0, r5
 800bab8:	b003      	add	sp, #12
 800baba:	bd30      	pop	{r4, r5, pc}
 800babc:	220c      	movs	r2, #12
 800babe:	6002      	str	r2, [r0, #0]
 800bac0:	2500      	movs	r5, #0
 800bac2:	e7f8      	b.n	800bab6 <_calloc_r+0x16>
 800bac4:	4621      	mov	r1, r4
 800bac6:	f000 fb87 	bl	800c1d8 <memset>
 800baca:	e7f4      	b.n	800bab6 <_calloc_r+0x16>

0800bacc <free>:
 800bacc:	4b02      	ldr	r3, [pc, #8]	; (800bad8 <free+0xc>)
 800bace:	4601      	mov	r1, r0
 800bad0:	6818      	ldr	r0, [r3, #0]
 800bad2:	f000 bc19 	b.w	800c308 <_free_r>
 800bad6:	bf00      	nop
 800bad8:	2000027c 	.word	0x2000027c

0800badc <sbrk_aligned>:
 800badc:	b570      	push	{r4, r5, r6, lr}
 800bade:	4e0e      	ldr	r6, [pc, #56]	; (800bb18 <sbrk_aligned+0x3c>)
 800bae0:	460c      	mov	r4, r1
 800bae2:	6831      	ldr	r1, [r6, #0]
 800bae4:	4605      	mov	r5, r0
 800bae6:	b911      	cbnz	r1, 800baee <sbrk_aligned+0x12>
 800bae8:	f000 fbb2 	bl	800c250 <_sbrk_r>
 800baec:	6030      	str	r0, [r6, #0]
 800baee:	4621      	mov	r1, r4
 800baf0:	4628      	mov	r0, r5
 800baf2:	f000 fbad 	bl	800c250 <_sbrk_r>
 800baf6:	1c43      	adds	r3, r0, #1
 800baf8:	d00a      	beq.n	800bb10 <sbrk_aligned+0x34>
 800bafa:	1cc4      	adds	r4, r0, #3
 800bafc:	f024 0403 	bic.w	r4, r4, #3
 800bb00:	42a0      	cmp	r0, r4
 800bb02:	d007      	beq.n	800bb14 <sbrk_aligned+0x38>
 800bb04:	1a21      	subs	r1, r4, r0
 800bb06:	4628      	mov	r0, r5
 800bb08:	f000 fba2 	bl	800c250 <_sbrk_r>
 800bb0c:	3001      	adds	r0, #1
 800bb0e:	d101      	bne.n	800bb14 <sbrk_aligned+0x38>
 800bb10:	f04f 34ff 	mov.w	r4, #4294967295
 800bb14:	4620      	mov	r0, r4
 800bb16:	bd70      	pop	{r4, r5, r6, pc}
 800bb18:	20000398 	.word	0x20000398

0800bb1c <_malloc_r>:
 800bb1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb20:	1ccd      	adds	r5, r1, #3
 800bb22:	f025 0503 	bic.w	r5, r5, #3
 800bb26:	3508      	adds	r5, #8
 800bb28:	2d0c      	cmp	r5, #12
 800bb2a:	bf38      	it	cc
 800bb2c:	250c      	movcc	r5, #12
 800bb2e:	2d00      	cmp	r5, #0
 800bb30:	4607      	mov	r7, r0
 800bb32:	db01      	blt.n	800bb38 <_malloc_r+0x1c>
 800bb34:	42a9      	cmp	r1, r5
 800bb36:	d905      	bls.n	800bb44 <_malloc_r+0x28>
 800bb38:	230c      	movs	r3, #12
 800bb3a:	603b      	str	r3, [r7, #0]
 800bb3c:	2600      	movs	r6, #0
 800bb3e:	4630      	mov	r0, r6
 800bb40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bc18 <_malloc_r+0xfc>
 800bb48:	f000 f868 	bl	800bc1c <__malloc_lock>
 800bb4c:	f8d8 3000 	ldr.w	r3, [r8]
 800bb50:	461c      	mov	r4, r3
 800bb52:	bb5c      	cbnz	r4, 800bbac <_malloc_r+0x90>
 800bb54:	4629      	mov	r1, r5
 800bb56:	4638      	mov	r0, r7
 800bb58:	f7ff ffc0 	bl	800badc <sbrk_aligned>
 800bb5c:	1c43      	adds	r3, r0, #1
 800bb5e:	4604      	mov	r4, r0
 800bb60:	d155      	bne.n	800bc0e <_malloc_r+0xf2>
 800bb62:	f8d8 4000 	ldr.w	r4, [r8]
 800bb66:	4626      	mov	r6, r4
 800bb68:	2e00      	cmp	r6, #0
 800bb6a:	d145      	bne.n	800bbf8 <_malloc_r+0xdc>
 800bb6c:	2c00      	cmp	r4, #0
 800bb6e:	d048      	beq.n	800bc02 <_malloc_r+0xe6>
 800bb70:	6823      	ldr	r3, [r4, #0]
 800bb72:	4631      	mov	r1, r6
 800bb74:	4638      	mov	r0, r7
 800bb76:	eb04 0903 	add.w	r9, r4, r3
 800bb7a:	f000 fb69 	bl	800c250 <_sbrk_r>
 800bb7e:	4581      	cmp	r9, r0
 800bb80:	d13f      	bne.n	800bc02 <_malloc_r+0xe6>
 800bb82:	6821      	ldr	r1, [r4, #0]
 800bb84:	1a6d      	subs	r5, r5, r1
 800bb86:	4629      	mov	r1, r5
 800bb88:	4638      	mov	r0, r7
 800bb8a:	f7ff ffa7 	bl	800badc <sbrk_aligned>
 800bb8e:	3001      	adds	r0, #1
 800bb90:	d037      	beq.n	800bc02 <_malloc_r+0xe6>
 800bb92:	6823      	ldr	r3, [r4, #0]
 800bb94:	442b      	add	r3, r5
 800bb96:	6023      	str	r3, [r4, #0]
 800bb98:	f8d8 3000 	ldr.w	r3, [r8]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d038      	beq.n	800bc12 <_malloc_r+0xf6>
 800bba0:	685a      	ldr	r2, [r3, #4]
 800bba2:	42a2      	cmp	r2, r4
 800bba4:	d12b      	bne.n	800bbfe <_malloc_r+0xe2>
 800bba6:	2200      	movs	r2, #0
 800bba8:	605a      	str	r2, [r3, #4]
 800bbaa:	e00f      	b.n	800bbcc <_malloc_r+0xb0>
 800bbac:	6822      	ldr	r2, [r4, #0]
 800bbae:	1b52      	subs	r2, r2, r5
 800bbb0:	d41f      	bmi.n	800bbf2 <_malloc_r+0xd6>
 800bbb2:	2a0b      	cmp	r2, #11
 800bbb4:	d917      	bls.n	800bbe6 <_malloc_r+0xca>
 800bbb6:	1961      	adds	r1, r4, r5
 800bbb8:	42a3      	cmp	r3, r4
 800bbba:	6025      	str	r5, [r4, #0]
 800bbbc:	bf18      	it	ne
 800bbbe:	6059      	strne	r1, [r3, #4]
 800bbc0:	6863      	ldr	r3, [r4, #4]
 800bbc2:	bf08      	it	eq
 800bbc4:	f8c8 1000 	streq.w	r1, [r8]
 800bbc8:	5162      	str	r2, [r4, r5]
 800bbca:	604b      	str	r3, [r1, #4]
 800bbcc:	4638      	mov	r0, r7
 800bbce:	f104 060b 	add.w	r6, r4, #11
 800bbd2:	f000 f829 	bl	800bc28 <__malloc_unlock>
 800bbd6:	f026 0607 	bic.w	r6, r6, #7
 800bbda:	1d23      	adds	r3, r4, #4
 800bbdc:	1af2      	subs	r2, r6, r3
 800bbde:	d0ae      	beq.n	800bb3e <_malloc_r+0x22>
 800bbe0:	1b9b      	subs	r3, r3, r6
 800bbe2:	50a3      	str	r3, [r4, r2]
 800bbe4:	e7ab      	b.n	800bb3e <_malloc_r+0x22>
 800bbe6:	42a3      	cmp	r3, r4
 800bbe8:	6862      	ldr	r2, [r4, #4]
 800bbea:	d1dd      	bne.n	800bba8 <_malloc_r+0x8c>
 800bbec:	f8c8 2000 	str.w	r2, [r8]
 800bbf0:	e7ec      	b.n	800bbcc <_malloc_r+0xb0>
 800bbf2:	4623      	mov	r3, r4
 800bbf4:	6864      	ldr	r4, [r4, #4]
 800bbf6:	e7ac      	b.n	800bb52 <_malloc_r+0x36>
 800bbf8:	4634      	mov	r4, r6
 800bbfa:	6876      	ldr	r6, [r6, #4]
 800bbfc:	e7b4      	b.n	800bb68 <_malloc_r+0x4c>
 800bbfe:	4613      	mov	r3, r2
 800bc00:	e7cc      	b.n	800bb9c <_malloc_r+0x80>
 800bc02:	230c      	movs	r3, #12
 800bc04:	603b      	str	r3, [r7, #0]
 800bc06:	4638      	mov	r0, r7
 800bc08:	f000 f80e 	bl	800bc28 <__malloc_unlock>
 800bc0c:	e797      	b.n	800bb3e <_malloc_r+0x22>
 800bc0e:	6025      	str	r5, [r4, #0]
 800bc10:	e7dc      	b.n	800bbcc <_malloc_r+0xb0>
 800bc12:	605b      	str	r3, [r3, #4]
 800bc14:	deff      	udf	#255	; 0xff
 800bc16:	bf00      	nop
 800bc18:	20000394 	.word	0x20000394

0800bc1c <__malloc_lock>:
 800bc1c:	4801      	ldr	r0, [pc, #4]	; (800bc24 <__malloc_lock+0x8>)
 800bc1e:	f000 bb63 	b.w	800c2e8 <__retarget_lock_acquire_recursive>
 800bc22:	bf00      	nop
 800bc24:	200004dc 	.word	0x200004dc

0800bc28 <__malloc_unlock>:
 800bc28:	4801      	ldr	r0, [pc, #4]	; (800bc30 <__malloc_unlock+0x8>)
 800bc2a:	f000 bb5e 	b.w	800c2ea <__retarget_lock_release_recursive>
 800bc2e:	bf00      	nop
 800bc30:	200004dc 	.word	0x200004dc

0800bc34 <__sflush_r>:
 800bc34:	898a      	ldrh	r2, [r1, #12]
 800bc36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc3a:	4605      	mov	r5, r0
 800bc3c:	0710      	lsls	r0, r2, #28
 800bc3e:	460c      	mov	r4, r1
 800bc40:	d458      	bmi.n	800bcf4 <__sflush_r+0xc0>
 800bc42:	684b      	ldr	r3, [r1, #4]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	dc05      	bgt.n	800bc54 <__sflush_r+0x20>
 800bc48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	dc02      	bgt.n	800bc54 <__sflush_r+0x20>
 800bc4e:	2000      	movs	r0, #0
 800bc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc56:	2e00      	cmp	r6, #0
 800bc58:	d0f9      	beq.n	800bc4e <__sflush_r+0x1a>
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc60:	682f      	ldr	r7, [r5, #0]
 800bc62:	6a21      	ldr	r1, [r4, #32]
 800bc64:	602b      	str	r3, [r5, #0]
 800bc66:	d032      	beq.n	800bcce <__sflush_r+0x9a>
 800bc68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc6a:	89a3      	ldrh	r3, [r4, #12]
 800bc6c:	075a      	lsls	r2, r3, #29
 800bc6e:	d505      	bpl.n	800bc7c <__sflush_r+0x48>
 800bc70:	6863      	ldr	r3, [r4, #4]
 800bc72:	1ac0      	subs	r0, r0, r3
 800bc74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc76:	b10b      	cbz	r3, 800bc7c <__sflush_r+0x48>
 800bc78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc7a:	1ac0      	subs	r0, r0, r3
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	4602      	mov	r2, r0
 800bc80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc82:	6a21      	ldr	r1, [r4, #32]
 800bc84:	4628      	mov	r0, r5
 800bc86:	47b0      	blx	r6
 800bc88:	1c43      	adds	r3, r0, #1
 800bc8a:	89a3      	ldrh	r3, [r4, #12]
 800bc8c:	d106      	bne.n	800bc9c <__sflush_r+0x68>
 800bc8e:	6829      	ldr	r1, [r5, #0]
 800bc90:	291d      	cmp	r1, #29
 800bc92:	d82b      	bhi.n	800bcec <__sflush_r+0xb8>
 800bc94:	4a29      	ldr	r2, [pc, #164]	; (800bd3c <__sflush_r+0x108>)
 800bc96:	410a      	asrs	r2, r1
 800bc98:	07d6      	lsls	r6, r2, #31
 800bc9a:	d427      	bmi.n	800bcec <__sflush_r+0xb8>
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	6062      	str	r2, [r4, #4]
 800bca0:	04d9      	lsls	r1, r3, #19
 800bca2:	6922      	ldr	r2, [r4, #16]
 800bca4:	6022      	str	r2, [r4, #0]
 800bca6:	d504      	bpl.n	800bcb2 <__sflush_r+0x7e>
 800bca8:	1c42      	adds	r2, r0, #1
 800bcaa:	d101      	bne.n	800bcb0 <__sflush_r+0x7c>
 800bcac:	682b      	ldr	r3, [r5, #0]
 800bcae:	b903      	cbnz	r3, 800bcb2 <__sflush_r+0x7e>
 800bcb0:	6560      	str	r0, [r4, #84]	; 0x54
 800bcb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcb4:	602f      	str	r7, [r5, #0]
 800bcb6:	2900      	cmp	r1, #0
 800bcb8:	d0c9      	beq.n	800bc4e <__sflush_r+0x1a>
 800bcba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcbe:	4299      	cmp	r1, r3
 800bcc0:	d002      	beq.n	800bcc8 <__sflush_r+0x94>
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	f000 fb20 	bl	800c308 <_free_r>
 800bcc8:	2000      	movs	r0, #0
 800bcca:	6360      	str	r0, [r4, #52]	; 0x34
 800bccc:	e7c0      	b.n	800bc50 <__sflush_r+0x1c>
 800bcce:	2301      	movs	r3, #1
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	47b0      	blx	r6
 800bcd4:	1c41      	adds	r1, r0, #1
 800bcd6:	d1c8      	bne.n	800bc6a <__sflush_r+0x36>
 800bcd8:	682b      	ldr	r3, [r5, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d0c5      	beq.n	800bc6a <__sflush_r+0x36>
 800bcde:	2b1d      	cmp	r3, #29
 800bce0:	d001      	beq.n	800bce6 <__sflush_r+0xb2>
 800bce2:	2b16      	cmp	r3, #22
 800bce4:	d101      	bne.n	800bcea <__sflush_r+0xb6>
 800bce6:	602f      	str	r7, [r5, #0]
 800bce8:	e7b1      	b.n	800bc4e <__sflush_r+0x1a>
 800bcea:	89a3      	ldrh	r3, [r4, #12]
 800bcec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcf0:	81a3      	strh	r3, [r4, #12]
 800bcf2:	e7ad      	b.n	800bc50 <__sflush_r+0x1c>
 800bcf4:	690f      	ldr	r7, [r1, #16]
 800bcf6:	2f00      	cmp	r7, #0
 800bcf8:	d0a9      	beq.n	800bc4e <__sflush_r+0x1a>
 800bcfa:	0793      	lsls	r3, r2, #30
 800bcfc:	680e      	ldr	r6, [r1, #0]
 800bcfe:	bf08      	it	eq
 800bd00:	694b      	ldreq	r3, [r1, #20]
 800bd02:	600f      	str	r7, [r1, #0]
 800bd04:	bf18      	it	ne
 800bd06:	2300      	movne	r3, #0
 800bd08:	eba6 0807 	sub.w	r8, r6, r7
 800bd0c:	608b      	str	r3, [r1, #8]
 800bd0e:	f1b8 0f00 	cmp.w	r8, #0
 800bd12:	dd9c      	ble.n	800bc4e <__sflush_r+0x1a>
 800bd14:	6a21      	ldr	r1, [r4, #32]
 800bd16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd18:	4643      	mov	r3, r8
 800bd1a:	463a      	mov	r2, r7
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	47b0      	blx	r6
 800bd20:	2800      	cmp	r0, #0
 800bd22:	dc06      	bgt.n	800bd32 <__sflush_r+0xfe>
 800bd24:	89a3      	ldrh	r3, [r4, #12]
 800bd26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd2a:	81a3      	strh	r3, [r4, #12]
 800bd2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd30:	e78e      	b.n	800bc50 <__sflush_r+0x1c>
 800bd32:	4407      	add	r7, r0
 800bd34:	eba8 0800 	sub.w	r8, r8, r0
 800bd38:	e7e9      	b.n	800bd0e <__sflush_r+0xda>
 800bd3a:	bf00      	nop
 800bd3c:	dfbffffe 	.word	0xdfbffffe

0800bd40 <_fflush_r>:
 800bd40:	b538      	push	{r3, r4, r5, lr}
 800bd42:	690b      	ldr	r3, [r1, #16]
 800bd44:	4605      	mov	r5, r0
 800bd46:	460c      	mov	r4, r1
 800bd48:	b913      	cbnz	r3, 800bd50 <_fflush_r+0x10>
 800bd4a:	2500      	movs	r5, #0
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	bd38      	pop	{r3, r4, r5, pc}
 800bd50:	b118      	cbz	r0, 800bd5a <_fflush_r+0x1a>
 800bd52:	6a03      	ldr	r3, [r0, #32]
 800bd54:	b90b      	cbnz	r3, 800bd5a <_fflush_r+0x1a>
 800bd56:	f000 f8a9 	bl	800beac <__sinit>
 800bd5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d0f3      	beq.n	800bd4a <_fflush_r+0xa>
 800bd62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd64:	07d0      	lsls	r0, r2, #31
 800bd66:	d404      	bmi.n	800bd72 <_fflush_r+0x32>
 800bd68:	0599      	lsls	r1, r3, #22
 800bd6a:	d402      	bmi.n	800bd72 <_fflush_r+0x32>
 800bd6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd6e:	f000 fabb 	bl	800c2e8 <__retarget_lock_acquire_recursive>
 800bd72:	4628      	mov	r0, r5
 800bd74:	4621      	mov	r1, r4
 800bd76:	f7ff ff5d 	bl	800bc34 <__sflush_r>
 800bd7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd7c:	07da      	lsls	r2, r3, #31
 800bd7e:	4605      	mov	r5, r0
 800bd80:	d4e4      	bmi.n	800bd4c <_fflush_r+0xc>
 800bd82:	89a3      	ldrh	r3, [r4, #12]
 800bd84:	059b      	lsls	r3, r3, #22
 800bd86:	d4e1      	bmi.n	800bd4c <_fflush_r+0xc>
 800bd88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd8a:	f000 faae 	bl	800c2ea <__retarget_lock_release_recursive>
 800bd8e:	e7dd      	b.n	800bd4c <_fflush_r+0xc>

0800bd90 <fflush>:
 800bd90:	4601      	mov	r1, r0
 800bd92:	b920      	cbnz	r0, 800bd9e <fflush+0xe>
 800bd94:	4a04      	ldr	r2, [pc, #16]	; (800bda8 <fflush+0x18>)
 800bd96:	4905      	ldr	r1, [pc, #20]	; (800bdac <fflush+0x1c>)
 800bd98:	4805      	ldr	r0, [pc, #20]	; (800bdb0 <fflush+0x20>)
 800bd9a:	f000 b89f 	b.w	800bedc <_fwalk_sglue>
 800bd9e:	4b05      	ldr	r3, [pc, #20]	; (800bdb4 <fflush+0x24>)
 800bda0:	6818      	ldr	r0, [r3, #0]
 800bda2:	f7ff bfcd 	b.w	800bd40 <_fflush_r>
 800bda6:	bf00      	nop
 800bda8:	20000224 	.word	0x20000224
 800bdac:	0800bd41 	.word	0x0800bd41
 800bdb0:	20000230 	.word	0x20000230
 800bdb4:	2000027c 	.word	0x2000027c

0800bdb8 <std>:
 800bdb8:	2300      	movs	r3, #0
 800bdba:	b510      	push	{r4, lr}
 800bdbc:	4604      	mov	r4, r0
 800bdbe:	e9c0 3300 	strd	r3, r3, [r0]
 800bdc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bdc6:	6083      	str	r3, [r0, #8]
 800bdc8:	8181      	strh	r1, [r0, #12]
 800bdca:	6643      	str	r3, [r0, #100]	; 0x64
 800bdcc:	81c2      	strh	r2, [r0, #14]
 800bdce:	6183      	str	r3, [r0, #24]
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	2208      	movs	r2, #8
 800bdd4:	305c      	adds	r0, #92	; 0x5c
 800bdd6:	f000 f9ff 	bl	800c1d8 <memset>
 800bdda:	4b05      	ldr	r3, [pc, #20]	; (800bdf0 <std+0x38>)
 800bddc:	6263      	str	r3, [r4, #36]	; 0x24
 800bdde:	4b05      	ldr	r3, [pc, #20]	; (800bdf4 <std+0x3c>)
 800bde0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bde2:	4b05      	ldr	r3, [pc, #20]	; (800bdf8 <std+0x40>)
 800bde4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bde6:	4b05      	ldr	r3, [pc, #20]	; (800bdfc <std+0x44>)
 800bde8:	6224      	str	r4, [r4, #32]
 800bdea:	6323      	str	r3, [r4, #48]	; 0x30
 800bdec:	bd10      	pop	{r4, pc}
 800bdee:	bf00      	nop
 800bdf0:	0800bff5 	.word	0x0800bff5
 800bdf4:	0800c017 	.word	0x0800c017
 800bdf8:	0800c04f 	.word	0x0800c04f
 800bdfc:	0800c073 	.word	0x0800c073

0800be00 <stdio_exit_handler>:
 800be00:	4a02      	ldr	r2, [pc, #8]	; (800be0c <stdio_exit_handler+0xc>)
 800be02:	4903      	ldr	r1, [pc, #12]	; (800be10 <stdio_exit_handler+0x10>)
 800be04:	4803      	ldr	r0, [pc, #12]	; (800be14 <stdio_exit_handler+0x14>)
 800be06:	f000 b869 	b.w	800bedc <_fwalk_sglue>
 800be0a:	bf00      	nop
 800be0c:	20000224 	.word	0x20000224
 800be10:	0800bd41 	.word	0x0800bd41
 800be14:	20000230 	.word	0x20000230

0800be18 <cleanup_stdio>:
 800be18:	6841      	ldr	r1, [r0, #4]
 800be1a:	4b0c      	ldr	r3, [pc, #48]	; (800be4c <cleanup_stdio+0x34>)
 800be1c:	4299      	cmp	r1, r3
 800be1e:	b510      	push	{r4, lr}
 800be20:	4604      	mov	r4, r0
 800be22:	d001      	beq.n	800be28 <cleanup_stdio+0x10>
 800be24:	f7ff ff8c 	bl	800bd40 <_fflush_r>
 800be28:	68a1      	ldr	r1, [r4, #8]
 800be2a:	4b09      	ldr	r3, [pc, #36]	; (800be50 <cleanup_stdio+0x38>)
 800be2c:	4299      	cmp	r1, r3
 800be2e:	d002      	beq.n	800be36 <cleanup_stdio+0x1e>
 800be30:	4620      	mov	r0, r4
 800be32:	f7ff ff85 	bl	800bd40 <_fflush_r>
 800be36:	68e1      	ldr	r1, [r4, #12]
 800be38:	4b06      	ldr	r3, [pc, #24]	; (800be54 <cleanup_stdio+0x3c>)
 800be3a:	4299      	cmp	r1, r3
 800be3c:	d004      	beq.n	800be48 <cleanup_stdio+0x30>
 800be3e:	4620      	mov	r0, r4
 800be40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be44:	f7ff bf7c 	b.w	800bd40 <_fflush_r>
 800be48:	bd10      	pop	{r4, pc}
 800be4a:	bf00      	nop
 800be4c:	2000039c 	.word	0x2000039c
 800be50:	20000404 	.word	0x20000404
 800be54:	2000046c 	.word	0x2000046c

0800be58 <global_stdio_init.part.0>:
 800be58:	b510      	push	{r4, lr}
 800be5a:	4b0b      	ldr	r3, [pc, #44]	; (800be88 <global_stdio_init.part.0+0x30>)
 800be5c:	4c0b      	ldr	r4, [pc, #44]	; (800be8c <global_stdio_init.part.0+0x34>)
 800be5e:	4a0c      	ldr	r2, [pc, #48]	; (800be90 <global_stdio_init.part.0+0x38>)
 800be60:	601a      	str	r2, [r3, #0]
 800be62:	4620      	mov	r0, r4
 800be64:	2200      	movs	r2, #0
 800be66:	2104      	movs	r1, #4
 800be68:	f7ff ffa6 	bl	800bdb8 <std>
 800be6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800be70:	2201      	movs	r2, #1
 800be72:	2109      	movs	r1, #9
 800be74:	f7ff ffa0 	bl	800bdb8 <std>
 800be78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800be7c:	2202      	movs	r2, #2
 800be7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be82:	2112      	movs	r1, #18
 800be84:	f7ff bf98 	b.w	800bdb8 <std>
 800be88:	200004d4 	.word	0x200004d4
 800be8c:	2000039c 	.word	0x2000039c
 800be90:	0800be01 	.word	0x0800be01

0800be94 <__sfp_lock_acquire>:
 800be94:	4801      	ldr	r0, [pc, #4]	; (800be9c <__sfp_lock_acquire+0x8>)
 800be96:	f000 ba27 	b.w	800c2e8 <__retarget_lock_acquire_recursive>
 800be9a:	bf00      	nop
 800be9c:	200004dd 	.word	0x200004dd

0800bea0 <__sfp_lock_release>:
 800bea0:	4801      	ldr	r0, [pc, #4]	; (800bea8 <__sfp_lock_release+0x8>)
 800bea2:	f000 ba22 	b.w	800c2ea <__retarget_lock_release_recursive>
 800bea6:	bf00      	nop
 800bea8:	200004dd 	.word	0x200004dd

0800beac <__sinit>:
 800beac:	b510      	push	{r4, lr}
 800beae:	4604      	mov	r4, r0
 800beb0:	f7ff fff0 	bl	800be94 <__sfp_lock_acquire>
 800beb4:	6a23      	ldr	r3, [r4, #32]
 800beb6:	b11b      	cbz	r3, 800bec0 <__sinit+0x14>
 800beb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bebc:	f7ff bff0 	b.w	800bea0 <__sfp_lock_release>
 800bec0:	4b04      	ldr	r3, [pc, #16]	; (800bed4 <__sinit+0x28>)
 800bec2:	6223      	str	r3, [r4, #32]
 800bec4:	4b04      	ldr	r3, [pc, #16]	; (800bed8 <__sinit+0x2c>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d1f5      	bne.n	800beb8 <__sinit+0xc>
 800becc:	f7ff ffc4 	bl	800be58 <global_stdio_init.part.0>
 800bed0:	e7f2      	b.n	800beb8 <__sinit+0xc>
 800bed2:	bf00      	nop
 800bed4:	0800be19 	.word	0x0800be19
 800bed8:	200004d4 	.word	0x200004d4

0800bedc <_fwalk_sglue>:
 800bedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bee0:	4607      	mov	r7, r0
 800bee2:	4688      	mov	r8, r1
 800bee4:	4614      	mov	r4, r2
 800bee6:	2600      	movs	r6, #0
 800bee8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800beec:	f1b9 0901 	subs.w	r9, r9, #1
 800bef0:	d505      	bpl.n	800befe <_fwalk_sglue+0x22>
 800bef2:	6824      	ldr	r4, [r4, #0]
 800bef4:	2c00      	cmp	r4, #0
 800bef6:	d1f7      	bne.n	800bee8 <_fwalk_sglue+0xc>
 800bef8:	4630      	mov	r0, r6
 800befa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800befe:	89ab      	ldrh	r3, [r5, #12]
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d907      	bls.n	800bf14 <_fwalk_sglue+0x38>
 800bf04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	d003      	beq.n	800bf14 <_fwalk_sglue+0x38>
 800bf0c:	4629      	mov	r1, r5
 800bf0e:	4638      	mov	r0, r7
 800bf10:	47c0      	blx	r8
 800bf12:	4306      	orrs	r6, r0
 800bf14:	3568      	adds	r5, #104	; 0x68
 800bf16:	e7e9      	b.n	800beec <_fwalk_sglue+0x10>

0800bf18 <iprintf>:
 800bf18:	b40f      	push	{r0, r1, r2, r3}
 800bf1a:	b507      	push	{r0, r1, r2, lr}
 800bf1c:	4906      	ldr	r1, [pc, #24]	; (800bf38 <iprintf+0x20>)
 800bf1e:	ab04      	add	r3, sp, #16
 800bf20:	6808      	ldr	r0, [r1, #0]
 800bf22:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf26:	6881      	ldr	r1, [r0, #8]
 800bf28:	9301      	str	r3, [sp, #4]
 800bf2a:	f000 fa63 	bl	800c3f4 <_vfiprintf_r>
 800bf2e:	b003      	add	sp, #12
 800bf30:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf34:	b004      	add	sp, #16
 800bf36:	4770      	bx	lr
 800bf38:	2000027c 	.word	0x2000027c

0800bf3c <_puts_r>:
 800bf3c:	6a03      	ldr	r3, [r0, #32]
 800bf3e:	b570      	push	{r4, r5, r6, lr}
 800bf40:	6884      	ldr	r4, [r0, #8]
 800bf42:	4605      	mov	r5, r0
 800bf44:	460e      	mov	r6, r1
 800bf46:	b90b      	cbnz	r3, 800bf4c <_puts_r+0x10>
 800bf48:	f7ff ffb0 	bl	800beac <__sinit>
 800bf4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf4e:	07db      	lsls	r3, r3, #31
 800bf50:	d405      	bmi.n	800bf5e <_puts_r+0x22>
 800bf52:	89a3      	ldrh	r3, [r4, #12]
 800bf54:	0598      	lsls	r0, r3, #22
 800bf56:	d402      	bmi.n	800bf5e <_puts_r+0x22>
 800bf58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf5a:	f000 f9c5 	bl	800c2e8 <__retarget_lock_acquire_recursive>
 800bf5e:	89a3      	ldrh	r3, [r4, #12]
 800bf60:	0719      	lsls	r1, r3, #28
 800bf62:	d513      	bpl.n	800bf8c <_puts_r+0x50>
 800bf64:	6923      	ldr	r3, [r4, #16]
 800bf66:	b18b      	cbz	r3, 800bf8c <_puts_r+0x50>
 800bf68:	3e01      	subs	r6, #1
 800bf6a:	68a3      	ldr	r3, [r4, #8]
 800bf6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf70:	3b01      	subs	r3, #1
 800bf72:	60a3      	str	r3, [r4, #8]
 800bf74:	b9e9      	cbnz	r1, 800bfb2 <_puts_r+0x76>
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	da2e      	bge.n	800bfd8 <_puts_r+0x9c>
 800bf7a:	4622      	mov	r2, r4
 800bf7c:	210a      	movs	r1, #10
 800bf7e:	4628      	mov	r0, r5
 800bf80:	f000 f87b 	bl	800c07a <__swbuf_r>
 800bf84:	3001      	adds	r0, #1
 800bf86:	d007      	beq.n	800bf98 <_puts_r+0x5c>
 800bf88:	250a      	movs	r5, #10
 800bf8a:	e007      	b.n	800bf9c <_puts_r+0x60>
 800bf8c:	4621      	mov	r1, r4
 800bf8e:	4628      	mov	r0, r5
 800bf90:	f000 f8b0 	bl	800c0f4 <__swsetup_r>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	d0e7      	beq.n	800bf68 <_puts_r+0x2c>
 800bf98:	f04f 35ff 	mov.w	r5, #4294967295
 800bf9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf9e:	07da      	lsls	r2, r3, #31
 800bfa0:	d405      	bmi.n	800bfae <_puts_r+0x72>
 800bfa2:	89a3      	ldrh	r3, [r4, #12]
 800bfa4:	059b      	lsls	r3, r3, #22
 800bfa6:	d402      	bmi.n	800bfae <_puts_r+0x72>
 800bfa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfaa:	f000 f99e 	bl	800c2ea <__retarget_lock_release_recursive>
 800bfae:	4628      	mov	r0, r5
 800bfb0:	bd70      	pop	{r4, r5, r6, pc}
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	da04      	bge.n	800bfc0 <_puts_r+0x84>
 800bfb6:	69a2      	ldr	r2, [r4, #24]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	dc06      	bgt.n	800bfca <_puts_r+0x8e>
 800bfbc:	290a      	cmp	r1, #10
 800bfbe:	d004      	beq.n	800bfca <_puts_r+0x8e>
 800bfc0:	6823      	ldr	r3, [r4, #0]
 800bfc2:	1c5a      	adds	r2, r3, #1
 800bfc4:	6022      	str	r2, [r4, #0]
 800bfc6:	7019      	strb	r1, [r3, #0]
 800bfc8:	e7cf      	b.n	800bf6a <_puts_r+0x2e>
 800bfca:	4622      	mov	r2, r4
 800bfcc:	4628      	mov	r0, r5
 800bfce:	f000 f854 	bl	800c07a <__swbuf_r>
 800bfd2:	3001      	adds	r0, #1
 800bfd4:	d1c9      	bne.n	800bf6a <_puts_r+0x2e>
 800bfd6:	e7df      	b.n	800bf98 <_puts_r+0x5c>
 800bfd8:	6823      	ldr	r3, [r4, #0]
 800bfda:	250a      	movs	r5, #10
 800bfdc:	1c5a      	adds	r2, r3, #1
 800bfde:	6022      	str	r2, [r4, #0]
 800bfe0:	701d      	strb	r5, [r3, #0]
 800bfe2:	e7db      	b.n	800bf9c <_puts_r+0x60>

0800bfe4 <puts>:
 800bfe4:	4b02      	ldr	r3, [pc, #8]	; (800bff0 <puts+0xc>)
 800bfe6:	4601      	mov	r1, r0
 800bfe8:	6818      	ldr	r0, [r3, #0]
 800bfea:	f7ff bfa7 	b.w	800bf3c <_puts_r>
 800bfee:	bf00      	nop
 800bff0:	2000027c 	.word	0x2000027c

0800bff4 <__sread>:
 800bff4:	b510      	push	{r4, lr}
 800bff6:	460c      	mov	r4, r1
 800bff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bffc:	f000 f916 	bl	800c22c <_read_r>
 800c000:	2800      	cmp	r0, #0
 800c002:	bfab      	itete	ge
 800c004:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c006:	89a3      	ldrhlt	r3, [r4, #12]
 800c008:	181b      	addge	r3, r3, r0
 800c00a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c00e:	bfac      	ite	ge
 800c010:	6563      	strge	r3, [r4, #84]	; 0x54
 800c012:	81a3      	strhlt	r3, [r4, #12]
 800c014:	bd10      	pop	{r4, pc}

0800c016 <__swrite>:
 800c016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c01a:	461f      	mov	r7, r3
 800c01c:	898b      	ldrh	r3, [r1, #12]
 800c01e:	05db      	lsls	r3, r3, #23
 800c020:	4605      	mov	r5, r0
 800c022:	460c      	mov	r4, r1
 800c024:	4616      	mov	r6, r2
 800c026:	d505      	bpl.n	800c034 <__swrite+0x1e>
 800c028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c02c:	2302      	movs	r3, #2
 800c02e:	2200      	movs	r2, #0
 800c030:	f000 f8ea 	bl	800c208 <_lseek_r>
 800c034:	89a3      	ldrh	r3, [r4, #12]
 800c036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c03a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c03e:	81a3      	strh	r3, [r4, #12]
 800c040:	4632      	mov	r2, r6
 800c042:	463b      	mov	r3, r7
 800c044:	4628      	mov	r0, r5
 800c046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c04a:	f000 b911 	b.w	800c270 <_write_r>

0800c04e <__sseek>:
 800c04e:	b510      	push	{r4, lr}
 800c050:	460c      	mov	r4, r1
 800c052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c056:	f000 f8d7 	bl	800c208 <_lseek_r>
 800c05a:	1c43      	adds	r3, r0, #1
 800c05c:	89a3      	ldrh	r3, [r4, #12]
 800c05e:	bf15      	itete	ne
 800c060:	6560      	strne	r0, [r4, #84]	; 0x54
 800c062:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c066:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c06a:	81a3      	strheq	r3, [r4, #12]
 800c06c:	bf18      	it	ne
 800c06e:	81a3      	strhne	r3, [r4, #12]
 800c070:	bd10      	pop	{r4, pc}

0800c072 <__sclose>:
 800c072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c076:	f000 b8b7 	b.w	800c1e8 <_close_r>

0800c07a <__swbuf_r>:
 800c07a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07c:	460e      	mov	r6, r1
 800c07e:	4614      	mov	r4, r2
 800c080:	4605      	mov	r5, r0
 800c082:	b118      	cbz	r0, 800c08c <__swbuf_r+0x12>
 800c084:	6a03      	ldr	r3, [r0, #32]
 800c086:	b90b      	cbnz	r3, 800c08c <__swbuf_r+0x12>
 800c088:	f7ff ff10 	bl	800beac <__sinit>
 800c08c:	69a3      	ldr	r3, [r4, #24]
 800c08e:	60a3      	str	r3, [r4, #8]
 800c090:	89a3      	ldrh	r3, [r4, #12]
 800c092:	071a      	lsls	r2, r3, #28
 800c094:	d525      	bpl.n	800c0e2 <__swbuf_r+0x68>
 800c096:	6923      	ldr	r3, [r4, #16]
 800c098:	b31b      	cbz	r3, 800c0e2 <__swbuf_r+0x68>
 800c09a:	6823      	ldr	r3, [r4, #0]
 800c09c:	6922      	ldr	r2, [r4, #16]
 800c09e:	1a98      	subs	r0, r3, r2
 800c0a0:	6963      	ldr	r3, [r4, #20]
 800c0a2:	b2f6      	uxtb	r6, r6
 800c0a4:	4283      	cmp	r3, r0
 800c0a6:	4637      	mov	r7, r6
 800c0a8:	dc04      	bgt.n	800c0b4 <__swbuf_r+0x3a>
 800c0aa:	4621      	mov	r1, r4
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	f7ff fe47 	bl	800bd40 <_fflush_r>
 800c0b2:	b9e0      	cbnz	r0, 800c0ee <__swbuf_r+0x74>
 800c0b4:	68a3      	ldr	r3, [r4, #8]
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	60a3      	str	r3, [r4, #8]
 800c0ba:	6823      	ldr	r3, [r4, #0]
 800c0bc:	1c5a      	adds	r2, r3, #1
 800c0be:	6022      	str	r2, [r4, #0]
 800c0c0:	701e      	strb	r6, [r3, #0]
 800c0c2:	6962      	ldr	r2, [r4, #20]
 800c0c4:	1c43      	adds	r3, r0, #1
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d004      	beq.n	800c0d4 <__swbuf_r+0x5a>
 800c0ca:	89a3      	ldrh	r3, [r4, #12]
 800c0cc:	07db      	lsls	r3, r3, #31
 800c0ce:	d506      	bpl.n	800c0de <__swbuf_r+0x64>
 800c0d0:	2e0a      	cmp	r6, #10
 800c0d2:	d104      	bne.n	800c0de <__swbuf_r+0x64>
 800c0d4:	4621      	mov	r1, r4
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	f7ff fe32 	bl	800bd40 <_fflush_r>
 800c0dc:	b938      	cbnz	r0, 800c0ee <__swbuf_r+0x74>
 800c0de:	4638      	mov	r0, r7
 800c0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	f000 f805 	bl	800c0f4 <__swsetup_r>
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	d0d5      	beq.n	800c09a <__swbuf_r+0x20>
 800c0ee:	f04f 37ff 	mov.w	r7, #4294967295
 800c0f2:	e7f4      	b.n	800c0de <__swbuf_r+0x64>

0800c0f4 <__swsetup_r>:
 800c0f4:	b538      	push	{r3, r4, r5, lr}
 800c0f6:	4b2a      	ldr	r3, [pc, #168]	; (800c1a0 <__swsetup_r+0xac>)
 800c0f8:	4605      	mov	r5, r0
 800c0fa:	6818      	ldr	r0, [r3, #0]
 800c0fc:	460c      	mov	r4, r1
 800c0fe:	b118      	cbz	r0, 800c108 <__swsetup_r+0x14>
 800c100:	6a03      	ldr	r3, [r0, #32]
 800c102:	b90b      	cbnz	r3, 800c108 <__swsetup_r+0x14>
 800c104:	f7ff fed2 	bl	800beac <__sinit>
 800c108:	89a3      	ldrh	r3, [r4, #12]
 800c10a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c10e:	0718      	lsls	r0, r3, #28
 800c110:	d422      	bmi.n	800c158 <__swsetup_r+0x64>
 800c112:	06d9      	lsls	r1, r3, #27
 800c114:	d407      	bmi.n	800c126 <__swsetup_r+0x32>
 800c116:	2309      	movs	r3, #9
 800c118:	602b      	str	r3, [r5, #0]
 800c11a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c11e:	81a3      	strh	r3, [r4, #12]
 800c120:	f04f 30ff 	mov.w	r0, #4294967295
 800c124:	e034      	b.n	800c190 <__swsetup_r+0x9c>
 800c126:	0758      	lsls	r0, r3, #29
 800c128:	d512      	bpl.n	800c150 <__swsetup_r+0x5c>
 800c12a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c12c:	b141      	cbz	r1, 800c140 <__swsetup_r+0x4c>
 800c12e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c132:	4299      	cmp	r1, r3
 800c134:	d002      	beq.n	800c13c <__swsetup_r+0x48>
 800c136:	4628      	mov	r0, r5
 800c138:	f000 f8e6 	bl	800c308 <_free_r>
 800c13c:	2300      	movs	r3, #0
 800c13e:	6363      	str	r3, [r4, #52]	; 0x34
 800c140:	89a3      	ldrh	r3, [r4, #12]
 800c142:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c146:	81a3      	strh	r3, [r4, #12]
 800c148:	2300      	movs	r3, #0
 800c14a:	6063      	str	r3, [r4, #4]
 800c14c:	6923      	ldr	r3, [r4, #16]
 800c14e:	6023      	str	r3, [r4, #0]
 800c150:	89a3      	ldrh	r3, [r4, #12]
 800c152:	f043 0308 	orr.w	r3, r3, #8
 800c156:	81a3      	strh	r3, [r4, #12]
 800c158:	6923      	ldr	r3, [r4, #16]
 800c15a:	b94b      	cbnz	r3, 800c170 <__swsetup_r+0x7c>
 800c15c:	89a3      	ldrh	r3, [r4, #12]
 800c15e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c166:	d003      	beq.n	800c170 <__swsetup_r+0x7c>
 800c168:	4621      	mov	r1, r4
 800c16a:	4628      	mov	r0, r5
 800c16c:	f000 fc12 	bl	800c994 <__smakebuf_r>
 800c170:	89a0      	ldrh	r0, [r4, #12]
 800c172:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c176:	f010 0301 	ands.w	r3, r0, #1
 800c17a:	d00a      	beq.n	800c192 <__swsetup_r+0x9e>
 800c17c:	2300      	movs	r3, #0
 800c17e:	60a3      	str	r3, [r4, #8]
 800c180:	6963      	ldr	r3, [r4, #20]
 800c182:	425b      	negs	r3, r3
 800c184:	61a3      	str	r3, [r4, #24]
 800c186:	6923      	ldr	r3, [r4, #16]
 800c188:	b943      	cbnz	r3, 800c19c <__swsetup_r+0xa8>
 800c18a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c18e:	d1c4      	bne.n	800c11a <__swsetup_r+0x26>
 800c190:	bd38      	pop	{r3, r4, r5, pc}
 800c192:	0781      	lsls	r1, r0, #30
 800c194:	bf58      	it	pl
 800c196:	6963      	ldrpl	r3, [r4, #20]
 800c198:	60a3      	str	r3, [r4, #8]
 800c19a:	e7f4      	b.n	800c186 <__swsetup_r+0x92>
 800c19c:	2000      	movs	r0, #0
 800c19e:	e7f7      	b.n	800c190 <__swsetup_r+0x9c>
 800c1a0:	2000027c 	.word	0x2000027c

0800c1a4 <memmove>:
 800c1a4:	4288      	cmp	r0, r1
 800c1a6:	b510      	push	{r4, lr}
 800c1a8:	eb01 0402 	add.w	r4, r1, r2
 800c1ac:	d902      	bls.n	800c1b4 <memmove+0x10>
 800c1ae:	4284      	cmp	r4, r0
 800c1b0:	4623      	mov	r3, r4
 800c1b2:	d807      	bhi.n	800c1c4 <memmove+0x20>
 800c1b4:	1e43      	subs	r3, r0, #1
 800c1b6:	42a1      	cmp	r1, r4
 800c1b8:	d008      	beq.n	800c1cc <memmove+0x28>
 800c1ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1c2:	e7f8      	b.n	800c1b6 <memmove+0x12>
 800c1c4:	4402      	add	r2, r0
 800c1c6:	4601      	mov	r1, r0
 800c1c8:	428a      	cmp	r2, r1
 800c1ca:	d100      	bne.n	800c1ce <memmove+0x2a>
 800c1cc:	bd10      	pop	{r4, pc}
 800c1ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1d6:	e7f7      	b.n	800c1c8 <memmove+0x24>

0800c1d8 <memset>:
 800c1d8:	4402      	add	r2, r0
 800c1da:	4603      	mov	r3, r0
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d100      	bne.n	800c1e2 <memset+0xa>
 800c1e0:	4770      	bx	lr
 800c1e2:	f803 1b01 	strb.w	r1, [r3], #1
 800c1e6:	e7f9      	b.n	800c1dc <memset+0x4>

0800c1e8 <_close_r>:
 800c1e8:	b538      	push	{r3, r4, r5, lr}
 800c1ea:	4d06      	ldr	r5, [pc, #24]	; (800c204 <_close_r+0x1c>)
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	4608      	mov	r0, r1
 800c1f2:	602b      	str	r3, [r5, #0]
 800c1f4:	f7fd f9e1 	bl	80095ba <_close>
 800c1f8:	1c43      	adds	r3, r0, #1
 800c1fa:	d102      	bne.n	800c202 <_close_r+0x1a>
 800c1fc:	682b      	ldr	r3, [r5, #0]
 800c1fe:	b103      	cbz	r3, 800c202 <_close_r+0x1a>
 800c200:	6023      	str	r3, [r4, #0]
 800c202:	bd38      	pop	{r3, r4, r5, pc}
 800c204:	200004d8 	.word	0x200004d8

0800c208 <_lseek_r>:
 800c208:	b538      	push	{r3, r4, r5, lr}
 800c20a:	4d07      	ldr	r5, [pc, #28]	; (800c228 <_lseek_r+0x20>)
 800c20c:	4604      	mov	r4, r0
 800c20e:	4608      	mov	r0, r1
 800c210:	4611      	mov	r1, r2
 800c212:	2200      	movs	r2, #0
 800c214:	602a      	str	r2, [r5, #0]
 800c216:	461a      	mov	r2, r3
 800c218:	f7fd f9f6 	bl	8009608 <_lseek>
 800c21c:	1c43      	adds	r3, r0, #1
 800c21e:	d102      	bne.n	800c226 <_lseek_r+0x1e>
 800c220:	682b      	ldr	r3, [r5, #0]
 800c222:	b103      	cbz	r3, 800c226 <_lseek_r+0x1e>
 800c224:	6023      	str	r3, [r4, #0]
 800c226:	bd38      	pop	{r3, r4, r5, pc}
 800c228:	200004d8 	.word	0x200004d8

0800c22c <_read_r>:
 800c22c:	b538      	push	{r3, r4, r5, lr}
 800c22e:	4d07      	ldr	r5, [pc, #28]	; (800c24c <_read_r+0x20>)
 800c230:	4604      	mov	r4, r0
 800c232:	4608      	mov	r0, r1
 800c234:	4611      	mov	r1, r2
 800c236:	2200      	movs	r2, #0
 800c238:	602a      	str	r2, [r5, #0]
 800c23a:	461a      	mov	r2, r3
 800c23c:	f7fd f984 	bl	8009548 <_read>
 800c240:	1c43      	adds	r3, r0, #1
 800c242:	d102      	bne.n	800c24a <_read_r+0x1e>
 800c244:	682b      	ldr	r3, [r5, #0]
 800c246:	b103      	cbz	r3, 800c24a <_read_r+0x1e>
 800c248:	6023      	str	r3, [r4, #0]
 800c24a:	bd38      	pop	{r3, r4, r5, pc}
 800c24c:	200004d8 	.word	0x200004d8

0800c250 <_sbrk_r>:
 800c250:	b538      	push	{r3, r4, r5, lr}
 800c252:	4d06      	ldr	r5, [pc, #24]	; (800c26c <_sbrk_r+0x1c>)
 800c254:	2300      	movs	r3, #0
 800c256:	4604      	mov	r4, r0
 800c258:	4608      	mov	r0, r1
 800c25a:	602b      	str	r3, [r5, #0]
 800c25c:	f7fd f9e2 	bl	8009624 <_sbrk>
 800c260:	1c43      	adds	r3, r0, #1
 800c262:	d102      	bne.n	800c26a <_sbrk_r+0x1a>
 800c264:	682b      	ldr	r3, [r5, #0]
 800c266:	b103      	cbz	r3, 800c26a <_sbrk_r+0x1a>
 800c268:	6023      	str	r3, [r4, #0]
 800c26a:	bd38      	pop	{r3, r4, r5, pc}
 800c26c:	200004d8 	.word	0x200004d8

0800c270 <_write_r>:
 800c270:	b538      	push	{r3, r4, r5, lr}
 800c272:	4d07      	ldr	r5, [pc, #28]	; (800c290 <_write_r+0x20>)
 800c274:	4604      	mov	r4, r0
 800c276:	4608      	mov	r0, r1
 800c278:	4611      	mov	r1, r2
 800c27a:	2200      	movs	r2, #0
 800c27c:	602a      	str	r2, [r5, #0]
 800c27e:	461a      	mov	r2, r3
 800c280:	f7fd f97f 	bl	8009582 <_write>
 800c284:	1c43      	adds	r3, r0, #1
 800c286:	d102      	bne.n	800c28e <_write_r+0x1e>
 800c288:	682b      	ldr	r3, [r5, #0]
 800c28a:	b103      	cbz	r3, 800c28e <_write_r+0x1e>
 800c28c:	6023      	str	r3, [r4, #0]
 800c28e:	bd38      	pop	{r3, r4, r5, pc}
 800c290:	200004d8 	.word	0x200004d8

0800c294 <__errno>:
 800c294:	4b01      	ldr	r3, [pc, #4]	; (800c29c <__errno+0x8>)
 800c296:	6818      	ldr	r0, [r3, #0]
 800c298:	4770      	bx	lr
 800c29a:	bf00      	nop
 800c29c:	2000027c 	.word	0x2000027c

0800c2a0 <__libc_init_array>:
 800c2a0:	b570      	push	{r4, r5, r6, lr}
 800c2a2:	4d0d      	ldr	r5, [pc, #52]	; (800c2d8 <__libc_init_array+0x38>)
 800c2a4:	4c0d      	ldr	r4, [pc, #52]	; (800c2dc <__libc_init_array+0x3c>)
 800c2a6:	1b64      	subs	r4, r4, r5
 800c2a8:	10a4      	asrs	r4, r4, #2
 800c2aa:	2600      	movs	r6, #0
 800c2ac:	42a6      	cmp	r6, r4
 800c2ae:	d109      	bne.n	800c2c4 <__libc_init_array+0x24>
 800c2b0:	4d0b      	ldr	r5, [pc, #44]	; (800c2e0 <__libc_init_array+0x40>)
 800c2b2:	4c0c      	ldr	r4, [pc, #48]	; (800c2e4 <__libc_init_array+0x44>)
 800c2b4:	f000 fbcc 	bl	800ca50 <_init>
 800c2b8:	1b64      	subs	r4, r4, r5
 800c2ba:	10a4      	asrs	r4, r4, #2
 800c2bc:	2600      	movs	r6, #0
 800c2be:	42a6      	cmp	r6, r4
 800c2c0:	d105      	bne.n	800c2ce <__libc_init_array+0x2e>
 800c2c2:	bd70      	pop	{r4, r5, r6, pc}
 800c2c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2c8:	4798      	blx	r3
 800c2ca:	3601      	adds	r6, #1
 800c2cc:	e7ee      	b.n	800c2ac <__libc_init_array+0xc>
 800c2ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2d2:	4798      	blx	r3
 800c2d4:	3601      	adds	r6, #1
 800c2d6:	e7f2      	b.n	800c2be <__libc_init_array+0x1e>
 800c2d8:	0800cf10 	.word	0x0800cf10
 800c2dc:	0800cf10 	.word	0x0800cf10
 800c2e0:	0800cf10 	.word	0x0800cf10
 800c2e4:	0800cf14 	.word	0x0800cf14

0800c2e8 <__retarget_lock_acquire_recursive>:
 800c2e8:	4770      	bx	lr

0800c2ea <__retarget_lock_release_recursive>:
 800c2ea:	4770      	bx	lr

0800c2ec <memcpy>:
 800c2ec:	440a      	add	r2, r1
 800c2ee:	4291      	cmp	r1, r2
 800c2f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2f4:	d100      	bne.n	800c2f8 <memcpy+0xc>
 800c2f6:	4770      	bx	lr
 800c2f8:	b510      	push	{r4, lr}
 800c2fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c302:	4291      	cmp	r1, r2
 800c304:	d1f9      	bne.n	800c2fa <memcpy+0xe>
 800c306:	bd10      	pop	{r4, pc}

0800c308 <_free_r>:
 800c308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c30a:	2900      	cmp	r1, #0
 800c30c:	d044      	beq.n	800c398 <_free_r+0x90>
 800c30e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c312:	9001      	str	r0, [sp, #4]
 800c314:	2b00      	cmp	r3, #0
 800c316:	f1a1 0404 	sub.w	r4, r1, #4
 800c31a:	bfb8      	it	lt
 800c31c:	18e4      	addlt	r4, r4, r3
 800c31e:	f7ff fc7d 	bl	800bc1c <__malloc_lock>
 800c322:	4a1e      	ldr	r2, [pc, #120]	; (800c39c <_free_r+0x94>)
 800c324:	9801      	ldr	r0, [sp, #4]
 800c326:	6813      	ldr	r3, [r2, #0]
 800c328:	b933      	cbnz	r3, 800c338 <_free_r+0x30>
 800c32a:	6063      	str	r3, [r4, #4]
 800c32c:	6014      	str	r4, [r2, #0]
 800c32e:	b003      	add	sp, #12
 800c330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c334:	f7ff bc78 	b.w	800bc28 <__malloc_unlock>
 800c338:	42a3      	cmp	r3, r4
 800c33a:	d908      	bls.n	800c34e <_free_r+0x46>
 800c33c:	6825      	ldr	r5, [r4, #0]
 800c33e:	1961      	adds	r1, r4, r5
 800c340:	428b      	cmp	r3, r1
 800c342:	bf01      	itttt	eq
 800c344:	6819      	ldreq	r1, [r3, #0]
 800c346:	685b      	ldreq	r3, [r3, #4]
 800c348:	1949      	addeq	r1, r1, r5
 800c34a:	6021      	streq	r1, [r4, #0]
 800c34c:	e7ed      	b.n	800c32a <_free_r+0x22>
 800c34e:	461a      	mov	r2, r3
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	b10b      	cbz	r3, 800c358 <_free_r+0x50>
 800c354:	42a3      	cmp	r3, r4
 800c356:	d9fa      	bls.n	800c34e <_free_r+0x46>
 800c358:	6811      	ldr	r1, [r2, #0]
 800c35a:	1855      	adds	r5, r2, r1
 800c35c:	42a5      	cmp	r5, r4
 800c35e:	d10b      	bne.n	800c378 <_free_r+0x70>
 800c360:	6824      	ldr	r4, [r4, #0]
 800c362:	4421      	add	r1, r4
 800c364:	1854      	adds	r4, r2, r1
 800c366:	42a3      	cmp	r3, r4
 800c368:	6011      	str	r1, [r2, #0]
 800c36a:	d1e0      	bne.n	800c32e <_free_r+0x26>
 800c36c:	681c      	ldr	r4, [r3, #0]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	6053      	str	r3, [r2, #4]
 800c372:	440c      	add	r4, r1
 800c374:	6014      	str	r4, [r2, #0]
 800c376:	e7da      	b.n	800c32e <_free_r+0x26>
 800c378:	d902      	bls.n	800c380 <_free_r+0x78>
 800c37a:	230c      	movs	r3, #12
 800c37c:	6003      	str	r3, [r0, #0]
 800c37e:	e7d6      	b.n	800c32e <_free_r+0x26>
 800c380:	6825      	ldr	r5, [r4, #0]
 800c382:	1961      	adds	r1, r4, r5
 800c384:	428b      	cmp	r3, r1
 800c386:	bf04      	itt	eq
 800c388:	6819      	ldreq	r1, [r3, #0]
 800c38a:	685b      	ldreq	r3, [r3, #4]
 800c38c:	6063      	str	r3, [r4, #4]
 800c38e:	bf04      	itt	eq
 800c390:	1949      	addeq	r1, r1, r5
 800c392:	6021      	streq	r1, [r4, #0]
 800c394:	6054      	str	r4, [r2, #4]
 800c396:	e7ca      	b.n	800c32e <_free_r+0x26>
 800c398:	b003      	add	sp, #12
 800c39a:	bd30      	pop	{r4, r5, pc}
 800c39c:	20000394 	.word	0x20000394

0800c3a0 <__sfputc_r>:
 800c3a0:	6893      	ldr	r3, [r2, #8]
 800c3a2:	3b01      	subs	r3, #1
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	b410      	push	{r4}
 800c3a8:	6093      	str	r3, [r2, #8]
 800c3aa:	da08      	bge.n	800c3be <__sfputc_r+0x1e>
 800c3ac:	6994      	ldr	r4, [r2, #24]
 800c3ae:	42a3      	cmp	r3, r4
 800c3b0:	db01      	blt.n	800c3b6 <__sfputc_r+0x16>
 800c3b2:	290a      	cmp	r1, #10
 800c3b4:	d103      	bne.n	800c3be <__sfputc_r+0x1e>
 800c3b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3ba:	f7ff be5e 	b.w	800c07a <__swbuf_r>
 800c3be:	6813      	ldr	r3, [r2, #0]
 800c3c0:	1c58      	adds	r0, r3, #1
 800c3c2:	6010      	str	r0, [r2, #0]
 800c3c4:	7019      	strb	r1, [r3, #0]
 800c3c6:	4608      	mov	r0, r1
 800c3c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <__sfputs_r>:
 800c3ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3d0:	4606      	mov	r6, r0
 800c3d2:	460f      	mov	r7, r1
 800c3d4:	4614      	mov	r4, r2
 800c3d6:	18d5      	adds	r5, r2, r3
 800c3d8:	42ac      	cmp	r4, r5
 800c3da:	d101      	bne.n	800c3e0 <__sfputs_r+0x12>
 800c3dc:	2000      	movs	r0, #0
 800c3de:	e007      	b.n	800c3f0 <__sfputs_r+0x22>
 800c3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3e4:	463a      	mov	r2, r7
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	f7ff ffda 	bl	800c3a0 <__sfputc_r>
 800c3ec:	1c43      	adds	r3, r0, #1
 800c3ee:	d1f3      	bne.n	800c3d8 <__sfputs_r+0xa>
 800c3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c3f4 <_vfiprintf_r>:
 800c3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f8:	460d      	mov	r5, r1
 800c3fa:	b09d      	sub	sp, #116	; 0x74
 800c3fc:	4614      	mov	r4, r2
 800c3fe:	4698      	mov	r8, r3
 800c400:	4606      	mov	r6, r0
 800c402:	b118      	cbz	r0, 800c40c <_vfiprintf_r+0x18>
 800c404:	6a03      	ldr	r3, [r0, #32]
 800c406:	b90b      	cbnz	r3, 800c40c <_vfiprintf_r+0x18>
 800c408:	f7ff fd50 	bl	800beac <__sinit>
 800c40c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c40e:	07d9      	lsls	r1, r3, #31
 800c410:	d405      	bmi.n	800c41e <_vfiprintf_r+0x2a>
 800c412:	89ab      	ldrh	r3, [r5, #12]
 800c414:	059a      	lsls	r2, r3, #22
 800c416:	d402      	bmi.n	800c41e <_vfiprintf_r+0x2a>
 800c418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c41a:	f7ff ff65 	bl	800c2e8 <__retarget_lock_acquire_recursive>
 800c41e:	89ab      	ldrh	r3, [r5, #12]
 800c420:	071b      	lsls	r3, r3, #28
 800c422:	d501      	bpl.n	800c428 <_vfiprintf_r+0x34>
 800c424:	692b      	ldr	r3, [r5, #16]
 800c426:	b99b      	cbnz	r3, 800c450 <_vfiprintf_r+0x5c>
 800c428:	4629      	mov	r1, r5
 800c42a:	4630      	mov	r0, r6
 800c42c:	f7ff fe62 	bl	800c0f4 <__swsetup_r>
 800c430:	b170      	cbz	r0, 800c450 <_vfiprintf_r+0x5c>
 800c432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c434:	07dc      	lsls	r4, r3, #31
 800c436:	d504      	bpl.n	800c442 <_vfiprintf_r+0x4e>
 800c438:	f04f 30ff 	mov.w	r0, #4294967295
 800c43c:	b01d      	add	sp, #116	; 0x74
 800c43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c442:	89ab      	ldrh	r3, [r5, #12]
 800c444:	0598      	lsls	r0, r3, #22
 800c446:	d4f7      	bmi.n	800c438 <_vfiprintf_r+0x44>
 800c448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c44a:	f7ff ff4e 	bl	800c2ea <__retarget_lock_release_recursive>
 800c44e:	e7f3      	b.n	800c438 <_vfiprintf_r+0x44>
 800c450:	2300      	movs	r3, #0
 800c452:	9309      	str	r3, [sp, #36]	; 0x24
 800c454:	2320      	movs	r3, #32
 800c456:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c45a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c45e:	2330      	movs	r3, #48	; 0x30
 800c460:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c614 <_vfiprintf_r+0x220>
 800c464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c468:	f04f 0901 	mov.w	r9, #1
 800c46c:	4623      	mov	r3, r4
 800c46e:	469a      	mov	sl, r3
 800c470:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c474:	b10a      	cbz	r2, 800c47a <_vfiprintf_r+0x86>
 800c476:	2a25      	cmp	r2, #37	; 0x25
 800c478:	d1f9      	bne.n	800c46e <_vfiprintf_r+0x7a>
 800c47a:	ebba 0b04 	subs.w	fp, sl, r4
 800c47e:	d00b      	beq.n	800c498 <_vfiprintf_r+0xa4>
 800c480:	465b      	mov	r3, fp
 800c482:	4622      	mov	r2, r4
 800c484:	4629      	mov	r1, r5
 800c486:	4630      	mov	r0, r6
 800c488:	f7ff ffa1 	bl	800c3ce <__sfputs_r>
 800c48c:	3001      	adds	r0, #1
 800c48e:	f000 80a9 	beq.w	800c5e4 <_vfiprintf_r+0x1f0>
 800c492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c494:	445a      	add	r2, fp
 800c496:	9209      	str	r2, [sp, #36]	; 0x24
 800c498:	f89a 3000 	ldrb.w	r3, [sl]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f000 80a1 	beq.w	800c5e4 <_vfiprintf_r+0x1f0>
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c4a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4ac:	f10a 0a01 	add.w	sl, sl, #1
 800c4b0:	9304      	str	r3, [sp, #16]
 800c4b2:	9307      	str	r3, [sp, #28]
 800c4b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4b8:	931a      	str	r3, [sp, #104]	; 0x68
 800c4ba:	4654      	mov	r4, sl
 800c4bc:	2205      	movs	r2, #5
 800c4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4c2:	4854      	ldr	r0, [pc, #336]	; (800c614 <_vfiprintf_r+0x220>)
 800c4c4:	f7f3 fec4 	bl	8000250 <memchr>
 800c4c8:	9a04      	ldr	r2, [sp, #16]
 800c4ca:	b9d8      	cbnz	r0, 800c504 <_vfiprintf_r+0x110>
 800c4cc:	06d1      	lsls	r1, r2, #27
 800c4ce:	bf44      	itt	mi
 800c4d0:	2320      	movmi	r3, #32
 800c4d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4d6:	0713      	lsls	r3, r2, #28
 800c4d8:	bf44      	itt	mi
 800c4da:	232b      	movmi	r3, #43	; 0x2b
 800c4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c4e4:	2b2a      	cmp	r3, #42	; 0x2a
 800c4e6:	d015      	beq.n	800c514 <_vfiprintf_r+0x120>
 800c4e8:	9a07      	ldr	r2, [sp, #28]
 800c4ea:	4654      	mov	r4, sl
 800c4ec:	2000      	movs	r0, #0
 800c4ee:	f04f 0c0a 	mov.w	ip, #10
 800c4f2:	4621      	mov	r1, r4
 800c4f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4f8:	3b30      	subs	r3, #48	; 0x30
 800c4fa:	2b09      	cmp	r3, #9
 800c4fc:	d94d      	bls.n	800c59a <_vfiprintf_r+0x1a6>
 800c4fe:	b1b0      	cbz	r0, 800c52e <_vfiprintf_r+0x13a>
 800c500:	9207      	str	r2, [sp, #28]
 800c502:	e014      	b.n	800c52e <_vfiprintf_r+0x13a>
 800c504:	eba0 0308 	sub.w	r3, r0, r8
 800c508:	fa09 f303 	lsl.w	r3, r9, r3
 800c50c:	4313      	orrs	r3, r2
 800c50e:	9304      	str	r3, [sp, #16]
 800c510:	46a2      	mov	sl, r4
 800c512:	e7d2      	b.n	800c4ba <_vfiprintf_r+0xc6>
 800c514:	9b03      	ldr	r3, [sp, #12]
 800c516:	1d19      	adds	r1, r3, #4
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	9103      	str	r1, [sp, #12]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	bfbb      	ittet	lt
 800c520:	425b      	neglt	r3, r3
 800c522:	f042 0202 	orrlt.w	r2, r2, #2
 800c526:	9307      	strge	r3, [sp, #28]
 800c528:	9307      	strlt	r3, [sp, #28]
 800c52a:	bfb8      	it	lt
 800c52c:	9204      	strlt	r2, [sp, #16]
 800c52e:	7823      	ldrb	r3, [r4, #0]
 800c530:	2b2e      	cmp	r3, #46	; 0x2e
 800c532:	d10c      	bne.n	800c54e <_vfiprintf_r+0x15a>
 800c534:	7863      	ldrb	r3, [r4, #1]
 800c536:	2b2a      	cmp	r3, #42	; 0x2a
 800c538:	d134      	bne.n	800c5a4 <_vfiprintf_r+0x1b0>
 800c53a:	9b03      	ldr	r3, [sp, #12]
 800c53c:	1d1a      	adds	r2, r3, #4
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	9203      	str	r2, [sp, #12]
 800c542:	2b00      	cmp	r3, #0
 800c544:	bfb8      	it	lt
 800c546:	f04f 33ff 	movlt.w	r3, #4294967295
 800c54a:	3402      	adds	r4, #2
 800c54c:	9305      	str	r3, [sp, #20]
 800c54e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c624 <_vfiprintf_r+0x230>
 800c552:	7821      	ldrb	r1, [r4, #0]
 800c554:	2203      	movs	r2, #3
 800c556:	4650      	mov	r0, sl
 800c558:	f7f3 fe7a 	bl	8000250 <memchr>
 800c55c:	b138      	cbz	r0, 800c56e <_vfiprintf_r+0x17a>
 800c55e:	9b04      	ldr	r3, [sp, #16]
 800c560:	eba0 000a 	sub.w	r0, r0, sl
 800c564:	2240      	movs	r2, #64	; 0x40
 800c566:	4082      	lsls	r2, r0
 800c568:	4313      	orrs	r3, r2
 800c56a:	3401      	adds	r4, #1
 800c56c:	9304      	str	r3, [sp, #16]
 800c56e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c572:	4829      	ldr	r0, [pc, #164]	; (800c618 <_vfiprintf_r+0x224>)
 800c574:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c578:	2206      	movs	r2, #6
 800c57a:	f7f3 fe69 	bl	8000250 <memchr>
 800c57e:	2800      	cmp	r0, #0
 800c580:	d03f      	beq.n	800c602 <_vfiprintf_r+0x20e>
 800c582:	4b26      	ldr	r3, [pc, #152]	; (800c61c <_vfiprintf_r+0x228>)
 800c584:	bb1b      	cbnz	r3, 800c5ce <_vfiprintf_r+0x1da>
 800c586:	9b03      	ldr	r3, [sp, #12]
 800c588:	3307      	adds	r3, #7
 800c58a:	f023 0307 	bic.w	r3, r3, #7
 800c58e:	3308      	adds	r3, #8
 800c590:	9303      	str	r3, [sp, #12]
 800c592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c594:	443b      	add	r3, r7
 800c596:	9309      	str	r3, [sp, #36]	; 0x24
 800c598:	e768      	b.n	800c46c <_vfiprintf_r+0x78>
 800c59a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c59e:	460c      	mov	r4, r1
 800c5a0:	2001      	movs	r0, #1
 800c5a2:	e7a6      	b.n	800c4f2 <_vfiprintf_r+0xfe>
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	3401      	adds	r4, #1
 800c5a8:	9305      	str	r3, [sp, #20]
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	f04f 0c0a 	mov.w	ip, #10
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5b6:	3a30      	subs	r2, #48	; 0x30
 800c5b8:	2a09      	cmp	r2, #9
 800c5ba:	d903      	bls.n	800c5c4 <_vfiprintf_r+0x1d0>
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d0c6      	beq.n	800c54e <_vfiprintf_r+0x15a>
 800c5c0:	9105      	str	r1, [sp, #20]
 800c5c2:	e7c4      	b.n	800c54e <_vfiprintf_r+0x15a>
 800c5c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e7f0      	b.n	800c5b0 <_vfiprintf_r+0x1bc>
 800c5ce:	ab03      	add	r3, sp, #12
 800c5d0:	9300      	str	r3, [sp, #0]
 800c5d2:	462a      	mov	r2, r5
 800c5d4:	4b12      	ldr	r3, [pc, #72]	; (800c620 <_vfiprintf_r+0x22c>)
 800c5d6:	a904      	add	r1, sp, #16
 800c5d8:	4630      	mov	r0, r6
 800c5da:	f3af 8000 	nop.w
 800c5de:	4607      	mov	r7, r0
 800c5e0:	1c78      	adds	r0, r7, #1
 800c5e2:	d1d6      	bne.n	800c592 <_vfiprintf_r+0x19e>
 800c5e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5e6:	07d9      	lsls	r1, r3, #31
 800c5e8:	d405      	bmi.n	800c5f6 <_vfiprintf_r+0x202>
 800c5ea:	89ab      	ldrh	r3, [r5, #12]
 800c5ec:	059a      	lsls	r2, r3, #22
 800c5ee:	d402      	bmi.n	800c5f6 <_vfiprintf_r+0x202>
 800c5f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5f2:	f7ff fe7a 	bl	800c2ea <__retarget_lock_release_recursive>
 800c5f6:	89ab      	ldrh	r3, [r5, #12]
 800c5f8:	065b      	lsls	r3, r3, #25
 800c5fa:	f53f af1d 	bmi.w	800c438 <_vfiprintf_r+0x44>
 800c5fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c600:	e71c      	b.n	800c43c <_vfiprintf_r+0x48>
 800c602:	ab03      	add	r3, sp, #12
 800c604:	9300      	str	r3, [sp, #0]
 800c606:	462a      	mov	r2, r5
 800c608:	4b05      	ldr	r3, [pc, #20]	; (800c620 <_vfiprintf_r+0x22c>)
 800c60a:	a904      	add	r1, sp, #16
 800c60c:	4630      	mov	r0, r6
 800c60e:	f000 f879 	bl	800c704 <_printf_i>
 800c612:	e7e4      	b.n	800c5de <_vfiprintf_r+0x1ea>
 800c614:	0800ced4 	.word	0x0800ced4
 800c618:	0800cede 	.word	0x0800cede
 800c61c:	00000000 	.word	0x00000000
 800c620:	0800c3cf 	.word	0x0800c3cf
 800c624:	0800ceda 	.word	0x0800ceda

0800c628 <_printf_common>:
 800c628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c62c:	4616      	mov	r6, r2
 800c62e:	4699      	mov	r9, r3
 800c630:	688a      	ldr	r2, [r1, #8]
 800c632:	690b      	ldr	r3, [r1, #16]
 800c634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c638:	4293      	cmp	r3, r2
 800c63a:	bfb8      	it	lt
 800c63c:	4613      	movlt	r3, r2
 800c63e:	6033      	str	r3, [r6, #0]
 800c640:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c644:	4607      	mov	r7, r0
 800c646:	460c      	mov	r4, r1
 800c648:	b10a      	cbz	r2, 800c64e <_printf_common+0x26>
 800c64a:	3301      	adds	r3, #1
 800c64c:	6033      	str	r3, [r6, #0]
 800c64e:	6823      	ldr	r3, [r4, #0]
 800c650:	0699      	lsls	r1, r3, #26
 800c652:	bf42      	ittt	mi
 800c654:	6833      	ldrmi	r3, [r6, #0]
 800c656:	3302      	addmi	r3, #2
 800c658:	6033      	strmi	r3, [r6, #0]
 800c65a:	6825      	ldr	r5, [r4, #0]
 800c65c:	f015 0506 	ands.w	r5, r5, #6
 800c660:	d106      	bne.n	800c670 <_printf_common+0x48>
 800c662:	f104 0a19 	add.w	sl, r4, #25
 800c666:	68e3      	ldr	r3, [r4, #12]
 800c668:	6832      	ldr	r2, [r6, #0]
 800c66a:	1a9b      	subs	r3, r3, r2
 800c66c:	42ab      	cmp	r3, r5
 800c66e:	dc26      	bgt.n	800c6be <_printf_common+0x96>
 800c670:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c674:	1e13      	subs	r3, r2, #0
 800c676:	6822      	ldr	r2, [r4, #0]
 800c678:	bf18      	it	ne
 800c67a:	2301      	movne	r3, #1
 800c67c:	0692      	lsls	r2, r2, #26
 800c67e:	d42b      	bmi.n	800c6d8 <_printf_common+0xb0>
 800c680:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c684:	4649      	mov	r1, r9
 800c686:	4638      	mov	r0, r7
 800c688:	47c0      	blx	r8
 800c68a:	3001      	adds	r0, #1
 800c68c:	d01e      	beq.n	800c6cc <_printf_common+0xa4>
 800c68e:	6823      	ldr	r3, [r4, #0]
 800c690:	6922      	ldr	r2, [r4, #16]
 800c692:	f003 0306 	and.w	r3, r3, #6
 800c696:	2b04      	cmp	r3, #4
 800c698:	bf02      	ittt	eq
 800c69a:	68e5      	ldreq	r5, [r4, #12]
 800c69c:	6833      	ldreq	r3, [r6, #0]
 800c69e:	1aed      	subeq	r5, r5, r3
 800c6a0:	68a3      	ldr	r3, [r4, #8]
 800c6a2:	bf0c      	ite	eq
 800c6a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6a8:	2500      	movne	r5, #0
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	bfc4      	itt	gt
 800c6ae:	1a9b      	subgt	r3, r3, r2
 800c6b0:	18ed      	addgt	r5, r5, r3
 800c6b2:	2600      	movs	r6, #0
 800c6b4:	341a      	adds	r4, #26
 800c6b6:	42b5      	cmp	r5, r6
 800c6b8:	d11a      	bne.n	800c6f0 <_printf_common+0xc8>
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	e008      	b.n	800c6d0 <_printf_common+0xa8>
 800c6be:	2301      	movs	r3, #1
 800c6c0:	4652      	mov	r2, sl
 800c6c2:	4649      	mov	r1, r9
 800c6c4:	4638      	mov	r0, r7
 800c6c6:	47c0      	blx	r8
 800c6c8:	3001      	adds	r0, #1
 800c6ca:	d103      	bne.n	800c6d4 <_printf_common+0xac>
 800c6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6d4:	3501      	adds	r5, #1
 800c6d6:	e7c6      	b.n	800c666 <_printf_common+0x3e>
 800c6d8:	18e1      	adds	r1, r4, r3
 800c6da:	1c5a      	adds	r2, r3, #1
 800c6dc:	2030      	movs	r0, #48	; 0x30
 800c6de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6e2:	4422      	add	r2, r4
 800c6e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6ec:	3302      	adds	r3, #2
 800c6ee:	e7c7      	b.n	800c680 <_printf_common+0x58>
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	4622      	mov	r2, r4
 800c6f4:	4649      	mov	r1, r9
 800c6f6:	4638      	mov	r0, r7
 800c6f8:	47c0      	blx	r8
 800c6fa:	3001      	adds	r0, #1
 800c6fc:	d0e6      	beq.n	800c6cc <_printf_common+0xa4>
 800c6fe:	3601      	adds	r6, #1
 800c700:	e7d9      	b.n	800c6b6 <_printf_common+0x8e>
	...

0800c704 <_printf_i>:
 800c704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c708:	7e0f      	ldrb	r7, [r1, #24]
 800c70a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c70c:	2f78      	cmp	r7, #120	; 0x78
 800c70e:	4691      	mov	r9, r2
 800c710:	4680      	mov	r8, r0
 800c712:	460c      	mov	r4, r1
 800c714:	469a      	mov	sl, r3
 800c716:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c71a:	d807      	bhi.n	800c72c <_printf_i+0x28>
 800c71c:	2f62      	cmp	r7, #98	; 0x62
 800c71e:	d80a      	bhi.n	800c736 <_printf_i+0x32>
 800c720:	2f00      	cmp	r7, #0
 800c722:	f000 80d4 	beq.w	800c8ce <_printf_i+0x1ca>
 800c726:	2f58      	cmp	r7, #88	; 0x58
 800c728:	f000 80c0 	beq.w	800c8ac <_printf_i+0x1a8>
 800c72c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c730:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c734:	e03a      	b.n	800c7ac <_printf_i+0xa8>
 800c736:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c73a:	2b15      	cmp	r3, #21
 800c73c:	d8f6      	bhi.n	800c72c <_printf_i+0x28>
 800c73e:	a101      	add	r1, pc, #4	; (adr r1, 800c744 <_printf_i+0x40>)
 800c740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c744:	0800c79d 	.word	0x0800c79d
 800c748:	0800c7b1 	.word	0x0800c7b1
 800c74c:	0800c72d 	.word	0x0800c72d
 800c750:	0800c72d 	.word	0x0800c72d
 800c754:	0800c72d 	.word	0x0800c72d
 800c758:	0800c72d 	.word	0x0800c72d
 800c75c:	0800c7b1 	.word	0x0800c7b1
 800c760:	0800c72d 	.word	0x0800c72d
 800c764:	0800c72d 	.word	0x0800c72d
 800c768:	0800c72d 	.word	0x0800c72d
 800c76c:	0800c72d 	.word	0x0800c72d
 800c770:	0800c8b5 	.word	0x0800c8b5
 800c774:	0800c7dd 	.word	0x0800c7dd
 800c778:	0800c86f 	.word	0x0800c86f
 800c77c:	0800c72d 	.word	0x0800c72d
 800c780:	0800c72d 	.word	0x0800c72d
 800c784:	0800c8d7 	.word	0x0800c8d7
 800c788:	0800c72d 	.word	0x0800c72d
 800c78c:	0800c7dd 	.word	0x0800c7dd
 800c790:	0800c72d 	.word	0x0800c72d
 800c794:	0800c72d 	.word	0x0800c72d
 800c798:	0800c877 	.word	0x0800c877
 800c79c:	682b      	ldr	r3, [r5, #0]
 800c79e:	1d1a      	adds	r2, r3, #4
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	602a      	str	r2, [r5, #0]
 800c7a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	e09f      	b.n	800c8f0 <_printf_i+0x1ec>
 800c7b0:	6820      	ldr	r0, [r4, #0]
 800c7b2:	682b      	ldr	r3, [r5, #0]
 800c7b4:	0607      	lsls	r7, r0, #24
 800c7b6:	f103 0104 	add.w	r1, r3, #4
 800c7ba:	6029      	str	r1, [r5, #0]
 800c7bc:	d501      	bpl.n	800c7c2 <_printf_i+0xbe>
 800c7be:	681e      	ldr	r6, [r3, #0]
 800c7c0:	e003      	b.n	800c7ca <_printf_i+0xc6>
 800c7c2:	0646      	lsls	r6, r0, #25
 800c7c4:	d5fb      	bpl.n	800c7be <_printf_i+0xba>
 800c7c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c7ca:	2e00      	cmp	r6, #0
 800c7cc:	da03      	bge.n	800c7d6 <_printf_i+0xd2>
 800c7ce:	232d      	movs	r3, #45	; 0x2d
 800c7d0:	4276      	negs	r6, r6
 800c7d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7d6:	485a      	ldr	r0, [pc, #360]	; (800c940 <_printf_i+0x23c>)
 800c7d8:	230a      	movs	r3, #10
 800c7da:	e012      	b.n	800c802 <_printf_i+0xfe>
 800c7dc:	682b      	ldr	r3, [r5, #0]
 800c7de:	6820      	ldr	r0, [r4, #0]
 800c7e0:	1d19      	adds	r1, r3, #4
 800c7e2:	6029      	str	r1, [r5, #0]
 800c7e4:	0605      	lsls	r5, r0, #24
 800c7e6:	d501      	bpl.n	800c7ec <_printf_i+0xe8>
 800c7e8:	681e      	ldr	r6, [r3, #0]
 800c7ea:	e002      	b.n	800c7f2 <_printf_i+0xee>
 800c7ec:	0641      	lsls	r1, r0, #25
 800c7ee:	d5fb      	bpl.n	800c7e8 <_printf_i+0xe4>
 800c7f0:	881e      	ldrh	r6, [r3, #0]
 800c7f2:	4853      	ldr	r0, [pc, #332]	; (800c940 <_printf_i+0x23c>)
 800c7f4:	2f6f      	cmp	r7, #111	; 0x6f
 800c7f6:	bf0c      	ite	eq
 800c7f8:	2308      	moveq	r3, #8
 800c7fa:	230a      	movne	r3, #10
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c802:	6865      	ldr	r5, [r4, #4]
 800c804:	60a5      	str	r5, [r4, #8]
 800c806:	2d00      	cmp	r5, #0
 800c808:	bfa2      	ittt	ge
 800c80a:	6821      	ldrge	r1, [r4, #0]
 800c80c:	f021 0104 	bicge.w	r1, r1, #4
 800c810:	6021      	strge	r1, [r4, #0]
 800c812:	b90e      	cbnz	r6, 800c818 <_printf_i+0x114>
 800c814:	2d00      	cmp	r5, #0
 800c816:	d04b      	beq.n	800c8b0 <_printf_i+0x1ac>
 800c818:	4615      	mov	r5, r2
 800c81a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c81e:	fb03 6711 	mls	r7, r3, r1, r6
 800c822:	5dc7      	ldrb	r7, [r0, r7]
 800c824:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c828:	4637      	mov	r7, r6
 800c82a:	42bb      	cmp	r3, r7
 800c82c:	460e      	mov	r6, r1
 800c82e:	d9f4      	bls.n	800c81a <_printf_i+0x116>
 800c830:	2b08      	cmp	r3, #8
 800c832:	d10b      	bne.n	800c84c <_printf_i+0x148>
 800c834:	6823      	ldr	r3, [r4, #0]
 800c836:	07de      	lsls	r6, r3, #31
 800c838:	d508      	bpl.n	800c84c <_printf_i+0x148>
 800c83a:	6923      	ldr	r3, [r4, #16]
 800c83c:	6861      	ldr	r1, [r4, #4]
 800c83e:	4299      	cmp	r1, r3
 800c840:	bfde      	ittt	le
 800c842:	2330      	movle	r3, #48	; 0x30
 800c844:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c848:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c84c:	1b52      	subs	r2, r2, r5
 800c84e:	6122      	str	r2, [r4, #16]
 800c850:	f8cd a000 	str.w	sl, [sp]
 800c854:	464b      	mov	r3, r9
 800c856:	aa03      	add	r2, sp, #12
 800c858:	4621      	mov	r1, r4
 800c85a:	4640      	mov	r0, r8
 800c85c:	f7ff fee4 	bl	800c628 <_printf_common>
 800c860:	3001      	adds	r0, #1
 800c862:	d14a      	bne.n	800c8fa <_printf_i+0x1f6>
 800c864:	f04f 30ff 	mov.w	r0, #4294967295
 800c868:	b004      	add	sp, #16
 800c86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c86e:	6823      	ldr	r3, [r4, #0]
 800c870:	f043 0320 	orr.w	r3, r3, #32
 800c874:	6023      	str	r3, [r4, #0]
 800c876:	4833      	ldr	r0, [pc, #204]	; (800c944 <_printf_i+0x240>)
 800c878:	2778      	movs	r7, #120	; 0x78
 800c87a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c87e:	6823      	ldr	r3, [r4, #0]
 800c880:	6829      	ldr	r1, [r5, #0]
 800c882:	061f      	lsls	r7, r3, #24
 800c884:	f851 6b04 	ldr.w	r6, [r1], #4
 800c888:	d402      	bmi.n	800c890 <_printf_i+0x18c>
 800c88a:	065f      	lsls	r7, r3, #25
 800c88c:	bf48      	it	mi
 800c88e:	b2b6      	uxthmi	r6, r6
 800c890:	07df      	lsls	r7, r3, #31
 800c892:	bf48      	it	mi
 800c894:	f043 0320 	orrmi.w	r3, r3, #32
 800c898:	6029      	str	r1, [r5, #0]
 800c89a:	bf48      	it	mi
 800c89c:	6023      	strmi	r3, [r4, #0]
 800c89e:	b91e      	cbnz	r6, 800c8a8 <_printf_i+0x1a4>
 800c8a0:	6823      	ldr	r3, [r4, #0]
 800c8a2:	f023 0320 	bic.w	r3, r3, #32
 800c8a6:	6023      	str	r3, [r4, #0]
 800c8a8:	2310      	movs	r3, #16
 800c8aa:	e7a7      	b.n	800c7fc <_printf_i+0xf8>
 800c8ac:	4824      	ldr	r0, [pc, #144]	; (800c940 <_printf_i+0x23c>)
 800c8ae:	e7e4      	b.n	800c87a <_printf_i+0x176>
 800c8b0:	4615      	mov	r5, r2
 800c8b2:	e7bd      	b.n	800c830 <_printf_i+0x12c>
 800c8b4:	682b      	ldr	r3, [r5, #0]
 800c8b6:	6826      	ldr	r6, [r4, #0]
 800c8b8:	6961      	ldr	r1, [r4, #20]
 800c8ba:	1d18      	adds	r0, r3, #4
 800c8bc:	6028      	str	r0, [r5, #0]
 800c8be:	0635      	lsls	r5, r6, #24
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	d501      	bpl.n	800c8c8 <_printf_i+0x1c4>
 800c8c4:	6019      	str	r1, [r3, #0]
 800c8c6:	e002      	b.n	800c8ce <_printf_i+0x1ca>
 800c8c8:	0670      	lsls	r0, r6, #25
 800c8ca:	d5fb      	bpl.n	800c8c4 <_printf_i+0x1c0>
 800c8cc:	8019      	strh	r1, [r3, #0]
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	6123      	str	r3, [r4, #16]
 800c8d2:	4615      	mov	r5, r2
 800c8d4:	e7bc      	b.n	800c850 <_printf_i+0x14c>
 800c8d6:	682b      	ldr	r3, [r5, #0]
 800c8d8:	1d1a      	adds	r2, r3, #4
 800c8da:	602a      	str	r2, [r5, #0]
 800c8dc:	681d      	ldr	r5, [r3, #0]
 800c8de:	6862      	ldr	r2, [r4, #4]
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	4628      	mov	r0, r5
 800c8e4:	f7f3 fcb4 	bl	8000250 <memchr>
 800c8e8:	b108      	cbz	r0, 800c8ee <_printf_i+0x1ea>
 800c8ea:	1b40      	subs	r0, r0, r5
 800c8ec:	6060      	str	r0, [r4, #4]
 800c8ee:	6863      	ldr	r3, [r4, #4]
 800c8f0:	6123      	str	r3, [r4, #16]
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8f8:	e7aa      	b.n	800c850 <_printf_i+0x14c>
 800c8fa:	6923      	ldr	r3, [r4, #16]
 800c8fc:	462a      	mov	r2, r5
 800c8fe:	4649      	mov	r1, r9
 800c900:	4640      	mov	r0, r8
 800c902:	47d0      	blx	sl
 800c904:	3001      	adds	r0, #1
 800c906:	d0ad      	beq.n	800c864 <_printf_i+0x160>
 800c908:	6823      	ldr	r3, [r4, #0]
 800c90a:	079b      	lsls	r3, r3, #30
 800c90c:	d413      	bmi.n	800c936 <_printf_i+0x232>
 800c90e:	68e0      	ldr	r0, [r4, #12]
 800c910:	9b03      	ldr	r3, [sp, #12]
 800c912:	4298      	cmp	r0, r3
 800c914:	bfb8      	it	lt
 800c916:	4618      	movlt	r0, r3
 800c918:	e7a6      	b.n	800c868 <_printf_i+0x164>
 800c91a:	2301      	movs	r3, #1
 800c91c:	4632      	mov	r2, r6
 800c91e:	4649      	mov	r1, r9
 800c920:	4640      	mov	r0, r8
 800c922:	47d0      	blx	sl
 800c924:	3001      	adds	r0, #1
 800c926:	d09d      	beq.n	800c864 <_printf_i+0x160>
 800c928:	3501      	adds	r5, #1
 800c92a:	68e3      	ldr	r3, [r4, #12]
 800c92c:	9903      	ldr	r1, [sp, #12]
 800c92e:	1a5b      	subs	r3, r3, r1
 800c930:	42ab      	cmp	r3, r5
 800c932:	dcf2      	bgt.n	800c91a <_printf_i+0x216>
 800c934:	e7eb      	b.n	800c90e <_printf_i+0x20a>
 800c936:	2500      	movs	r5, #0
 800c938:	f104 0619 	add.w	r6, r4, #25
 800c93c:	e7f5      	b.n	800c92a <_printf_i+0x226>
 800c93e:	bf00      	nop
 800c940:	0800cee5 	.word	0x0800cee5
 800c944:	0800cef6 	.word	0x0800cef6

0800c948 <__swhatbuf_r>:
 800c948:	b570      	push	{r4, r5, r6, lr}
 800c94a:	460c      	mov	r4, r1
 800c94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c950:	2900      	cmp	r1, #0
 800c952:	b096      	sub	sp, #88	; 0x58
 800c954:	4615      	mov	r5, r2
 800c956:	461e      	mov	r6, r3
 800c958:	da0d      	bge.n	800c976 <__swhatbuf_r+0x2e>
 800c95a:	89a3      	ldrh	r3, [r4, #12]
 800c95c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c960:	f04f 0100 	mov.w	r1, #0
 800c964:	bf0c      	ite	eq
 800c966:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c96a:	2340      	movne	r3, #64	; 0x40
 800c96c:	2000      	movs	r0, #0
 800c96e:	6031      	str	r1, [r6, #0]
 800c970:	602b      	str	r3, [r5, #0]
 800c972:	b016      	add	sp, #88	; 0x58
 800c974:	bd70      	pop	{r4, r5, r6, pc}
 800c976:	466a      	mov	r2, sp
 800c978:	f000 f848 	bl	800ca0c <_fstat_r>
 800c97c:	2800      	cmp	r0, #0
 800c97e:	dbec      	blt.n	800c95a <__swhatbuf_r+0x12>
 800c980:	9901      	ldr	r1, [sp, #4]
 800c982:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c986:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c98a:	4259      	negs	r1, r3
 800c98c:	4159      	adcs	r1, r3
 800c98e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c992:	e7eb      	b.n	800c96c <__swhatbuf_r+0x24>

0800c994 <__smakebuf_r>:
 800c994:	898b      	ldrh	r3, [r1, #12]
 800c996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c998:	079d      	lsls	r5, r3, #30
 800c99a:	4606      	mov	r6, r0
 800c99c:	460c      	mov	r4, r1
 800c99e:	d507      	bpl.n	800c9b0 <__smakebuf_r+0x1c>
 800c9a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9a4:	6023      	str	r3, [r4, #0]
 800c9a6:	6123      	str	r3, [r4, #16]
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	6163      	str	r3, [r4, #20]
 800c9ac:	b002      	add	sp, #8
 800c9ae:	bd70      	pop	{r4, r5, r6, pc}
 800c9b0:	ab01      	add	r3, sp, #4
 800c9b2:	466a      	mov	r2, sp
 800c9b4:	f7ff ffc8 	bl	800c948 <__swhatbuf_r>
 800c9b8:	9900      	ldr	r1, [sp, #0]
 800c9ba:	4605      	mov	r5, r0
 800c9bc:	4630      	mov	r0, r6
 800c9be:	f7ff f8ad 	bl	800bb1c <_malloc_r>
 800c9c2:	b948      	cbnz	r0, 800c9d8 <__smakebuf_r+0x44>
 800c9c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9c8:	059a      	lsls	r2, r3, #22
 800c9ca:	d4ef      	bmi.n	800c9ac <__smakebuf_r+0x18>
 800c9cc:	f023 0303 	bic.w	r3, r3, #3
 800c9d0:	f043 0302 	orr.w	r3, r3, #2
 800c9d4:	81a3      	strh	r3, [r4, #12]
 800c9d6:	e7e3      	b.n	800c9a0 <__smakebuf_r+0xc>
 800c9d8:	89a3      	ldrh	r3, [r4, #12]
 800c9da:	6020      	str	r0, [r4, #0]
 800c9dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9e0:	81a3      	strh	r3, [r4, #12]
 800c9e2:	9b00      	ldr	r3, [sp, #0]
 800c9e4:	6163      	str	r3, [r4, #20]
 800c9e6:	9b01      	ldr	r3, [sp, #4]
 800c9e8:	6120      	str	r0, [r4, #16]
 800c9ea:	b15b      	cbz	r3, 800ca04 <__smakebuf_r+0x70>
 800c9ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	f000 f81d 	bl	800ca30 <_isatty_r>
 800c9f6:	b128      	cbz	r0, 800ca04 <__smakebuf_r+0x70>
 800c9f8:	89a3      	ldrh	r3, [r4, #12]
 800c9fa:	f023 0303 	bic.w	r3, r3, #3
 800c9fe:	f043 0301 	orr.w	r3, r3, #1
 800ca02:	81a3      	strh	r3, [r4, #12]
 800ca04:	89a3      	ldrh	r3, [r4, #12]
 800ca06:	431d      	orrs	r5, r3
 800ca08:	81a5      	strh	r5, [r4, #12]
 800ca0a:	e7cf      	b.n	800c9ac <__smakebuf_r+0x18>

0800ca0c <_fstat_r>:
 800ca0c:	b538      	push	{r3, r4, r5, lr}
 800ca0e:	4d07      	ldr	r5, [pc, #28]	; (800ca2c <_fstat_r+0x20>)
 800ca10:	2300      	movs	r3, #0
 800ca12:	4604      	mov	r4, r0
 800ca14:	4608      	mov	r0, r1
 800ca16:	4611      	mov	r1, r2
 800ca18:	602b      	str	r3, [r5, #0]
 800ca1a:	f7fc fdda 	bl	80095d2 <_fstat>
 800ca1e:	1c43      	adds	r3, r0, #1
 800ca20:	d102      	bne.n	800ca28 <_fstat_r+0x1c>
 800ca22:	682b      	ldr	r3, [r5, #0]
 800ca24:	b103      	cbz	r3, 800ca28 <_fstat_r+0x1c>
 800ca26:	6023      	str	r3, [r4, #0]
 800ca28:	bd38      	pop	{r3, r4, r5, pc}
 800ca2a:	bf00      	nop
 800ca2c:	200004d8 	.word	0x200004d8

0800ca30 <_isatty_r>:
 800ca30:	b538      	push	{r3, r4, r5, lr}
 800ca32:	4d06      	ldr	r5, [pc, #24]	; (800ca4c <_isatty_r+0x1c>)
 800ca34:	2300      	movs	r3, #0
 800ca36:	4604      	mov	r4, r0
 800ca38:	4608      	mov	r0, r1
 800ca3a:	602b      	str	r3, [r5, #0]
 800ca3c:	f7fc fdd9 	bl	80095f2 <_isatty>
 800ca40:	1c43      	adds	r3, r0, #1
 800ca42:	d102      	bne.n	800ca4a <_isatty_r+0x1a>
 800ca44:	682b      	ldr	r3, [r5, #0]
 800ca46:	b103      	cbz	r3, 800ca4a <_isatty_r+0x1a>
 800ca48:	6023      	str	r3, [r4, #0]
 800ca4a:	bd38      	pop	{r3, r4, r5, pc}
 800ca4c:	200004d8 	.word	0x200004d8

0800ca50 <_init>:
 800ca50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca52:	bf00      	nop
 800ca54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca56:	bc08      	pop	{r3}
 800ca58:	469e      	mov	lr, r3
 800ca5a:	4770      	bx	lr

0800ca5c <_fini>:
 800ca5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca5e:	bf00      	nop
 800ca60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca62:	bc08      	pop	{r3}
 800ca64:	469e      	mov	lr, r3
 800ca66:	4770      	bx	lr
